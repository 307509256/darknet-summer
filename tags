!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACTIVATION	include/darknet.h	/^} ACTIVATION;$/;"	t	typeref:enum:__anon6
ACTIVATIONS_H	src/activations.h	2;"	d
ACTIVATION_LAYER_H	src/activation_layer.h	2;"	d
ACTIVE	include/darknet.h	/^    ACTIVE,$/;"	e	enum:__anon7
ALIB	Makefile	/^ALIB=libdarknet.a$/;"	m
AR	Makefile	/^AR=ar$/;"	m
ARCH	Makefile	/^ARCH= -gencode arch=compute_20,code=[sm_20,sm_21] \\$/;"	m
ARFLAGS	Makefile	/^ARFLAGS=rcs$/;"	m
AVGPOOL	include/darknet.h	/^    AVGPOOL,$/;"	e	enum:__anon7
AVGPOOL_LAYER_H	src/avgpool_layer.h	2;"	d
B1	include/darknet.h	/^    float B1;$/;"	m	struct:__anon9	access:public
B1	include/darknet.h	/^    float B1;$/;"	m	struct:network	access:public
B2	include/darknet.h	/^    float B2;$/;"	m	struct:__anon9	access:public
B2	include/darknet.h	/^    float B2;$/;"	m	struct:network	access:public
BATCHNORM	include/darknet.h	/^    BATCHNORM,$/;"	e	enum:__anon7
BATCHNORM_LAYER_H	src/batchnorm_layer.h	2;"	d
BLANK	include/darknet.h	/^    BLANK$/;"	e	enum:__anon7
BLAS_H	src/blas.h	2;"	d
BLOCK	include/darknet.h	12;"	d
BOX_H	src/box.h	2;"	d
BattleRoyaleWithCheese	src/compare.c	/^void BattleRoyaleWithCheese(char *filename, char *weightfile)$/;"	f	signature:(char *filename, char *weightfile)
CAPTCHA_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA$/;"	e	enum:__anon15
CASE	src/stb_image.h	1338;"	d
CASE	src/stb_image.h	1356;"	d
CASE	src/stb_image.h	4025;"	d
CASE	src/stb_image.h	4038;"	d
CASE	src/stb_image.h	4042;"	d
CASE	src/stb_image.h	4055;"	d
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=-Wall -Wfatal-errors -fPIC$/;"	m
CLASSIFICATION_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA$/;"	e	enum:__anon15
COL2IM_H	src/col2im.h	2;"	d
COMBO	src/stb_image.h	1337;"	d
COMMON	Makefile	/^COMMON= -Iinclude\/ -Isrc\/$/;"	m
COMPARE_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA$/;"	e	enum:__anon15
CONNECTED	include/darknet.h	/^    CONNECTED,$/;"	e	enum:__anon7
CONNECTED_LAYER_H	src/connected_layer.h	2;"	d
CONSTANT	include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon10
CONVOLUTIONAL	include/darknet.h	/^    CONVOLUTIONAL,$/;"	e	enum:__anon7
CONVOLUTIONAL_LAYER_H	src/convolutional_layer.h	2;"	d
COST	include/darknet.h	/^    COST,$/;"	e	enum:__anon7
COST_LAYER_H	src/cost_layer.h	2;"	d
COST_TYPE	include/darknet.h	/^} COST_TYPE;$/;"	t	typeref:enum:__anon8
CRNN	include/darknet.h	/^    CRNN,$/;"	e	enum:__anon7
CRNN_LAYER_H	src/crnn_layer.h	3;"	d
CROP	include/darknet.h	/^    CROP,$/;"	e	enum:__anon7
CROP_LAYER_H	src/crop_layer.h	2;"	d
CUDA_H	src/cuda.h	2;"	d
CUDNN	Makefile	/^CUDNN=0$/;"	m
DARKNET_API	include/darknet.h	2;"	d
DATA_H	src/data.h	2;"	d
DEBUG	Makefile	/^DEBUG=0$/;"	m
DECONVOLUTIONAL	include/darknet.h	/^    DECONVOLUTIONAL,$/;"	e	enum:__anon7
DECONVOLUTIONAL_LAYER_H	src/deconvolutional_layer.h	2;"	d
DEMO	src/demo.c	12;"	d	file:
DEMO_H	src/demo.h	2;"	d
DEPS	Makefile	/^DEPS = $(wildcard src\/*.h) Makefile include\/darknet.h$/;"	m
DETECTION	include/darknet.h	/^    DETECTION,$/;"	e	enum:__anon7
DETECTION_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA$/;"	e	enum:__anon15
DETECTION_LAYER_H	src/detection_layer.h	2;"	d
DET_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA$/;"	e	enum:__anon15
DROPOUT	include/darknet.h	/^    DROPOUT,$/;"	e	enum:__anon7
DROPOUT_LAYER_H	src/dropout_layer.h	2;"	d
ELU	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon6
EXEC	Makefile	/^EXEC=darknet$/;"	m
EXECOBJ	Makefile	/^EXECOBJ = $(addprefix $(OBJDIR), $(EXECOBJA))$/;"	m
EXECOBJA	Makefile	/^EXECOBJA=captcha.o lsd.o super.o voxel.o art.o tag.o cifar.o go.o rnn.o rnn_vid.o compare.o segmenter.o regressor.o classifier.o coco.o dice.o yolo.o detector.o  writing.o nightmare.o swag.o darknet.o $/;"	m
EXP	include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon10
FAST_BITS	src/stb_image.h	1434;"	d
GEMM_H	src/gemm.h	2;"	d
GPU	Makefile	/^GPU=0$/;"	m
GRU	include/darknet.h	/^    GRU,$/;"	e	enum:__anon7
GRU_LAYER_H	src/gru_layer.h	3;"	d
HARDTAN	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon6
IM2COL_H	src/im2col.h	2;"	d
IMAGE	python/darknet.py	/^class IMAGE(Structure):$/;"	c	inherits:Structure
IMAGE_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA$/;"	e	enum:__anon15
IMAGE_H	src/image.h	2;"	d
INCLUDE_STB_IMAGE_WRITE_H	src/stb_image_write.h	81;"	d
L1	include/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH$/;"	e	enum:__anon8
LAYER_TYPE	include/darknet.h	/^} LAYER_TYPE;$/;"	t	typeref:enum:__anon7
LDFLAGS	Makefile	/^LDFLAGS= -lm -pthread $/;"	m
LEAKY	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon6
LETTERBOX_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA$/;"	e	enum:__anon15
LHTAN	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon6
LINEAR	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon6
LIST_H	src/list.h	2;"	d
LOCAL	include/darknet.h	/^    LOCAL,$/;"	e	enum:__anon7
LOCAL_LAYER_H	src/local_layer.h	2;"	d
LOGGY	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon6
LOGISTIC	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon6
LSTM	include/darknet.h	/^    LSTM,$/;"	e	enum:__anon7
LSTM_LAYER_H	src/lstm_layer.h	2;"	d
MASKED	include/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH$/;"	e	enum:__anon8
MATRIX_H	src/matrix.h	2;"	d
MAXPOOL	include/darknet.h	/^    MAXPOOL,$/;"	e	enum:__anon7
MAXPOOL_LAYER_H	src/maxpool_layer.h	2;"	d
METADATA	python/darknet.py	/^class METADATA(Structure):$/;"	c	inherits:Structure
NETWORK	include/darknet.h	/^    NETWORK,$/;"	e	enum:__anon7
NETWORK_H	src/network.h	3;"	d
NORMALIZATION	include/darknet.h	/^    NORMALIZATION,$/;"	e	enum:__anon7
NORMALIZATION_LAYER_H	src/normalization_layer.h	2;"	d
NUMCHARS	src/data.c	336;"	d	file:
NVCC	Makefile	/^NVCC=nvcc --compiler-options '-fPIC'$/;"	m
OBJ	Makefile	/^OBJ=gemm.o utils.o cuda.o deconvolutional_layer.o convolutional_layer.o list.o image.o activations.o im2col.o col2im.o blas.o crop_layer.o dropout_layer.o maxpool_layer.o softmax_layer.o data.o matrix.o network.o connected_layer.o cost_layer.o parser.o option_list.o detection_layer.o route_layer.o box.o normalization_layer.o avgpool_layer.o layer.o local_layer.o shortcut_layer.o activation_layer.o rnn_layer.o gru_layer.o crnn_layer.o demo.o batchnorm_layer.o region_layer.o reorg_layer.o tree.o  lstm_layer.o$/;"	m
OBJDIR	Makefile	/^OBJDIR=.\/obj\/$/;"	m
OBJS	Makefile	/^OBJS = $(addprefix $(OBJDIR), $(OBJ))$/;"	m
OLD_CLASSIFICATION_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA$/;"	e	enum:__anon15
OPENCV	Makefile	/^OPENCV=0$/;"	m
OPTION_LIST_H	src/option_list.h	2;"	d
OPTS	Makefile	/^OPTS=-O0 -g$/;"	m
OPTS	Makefile	/^OPTS=-Ofast$/;"	m
PARSER_H	src/parser.h	2;"	d
PLSE	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon6
POLY	include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon10
RAMP	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon6
RANDOM	include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon10
REGION	include/darknet.h	/^    REGION,$/;"	e	enum:__anon7
REGION_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA$/;"	e	enum:__anon15
REGION_LAYER_H	src/region_layer.h	2;"	d
REGRESSION_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA$/;"	e	enum:__anon15
RELIE	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon6
RELU	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon6
REORG	include/darknet.h	/^    REORG,$/;"	e	enum:__anon7
REORG_LAYER_H	src/reorg_layer.h	2;"	d
RNN	include/darknet.h	/^    RNN,$/;"	e	enum:__anon7
RNN_LAYER_H	src/rnn_layer.h	3;"	d
ROUTE	include/darknet.h	/^    ROUTE,$/;"	e	enum:__anon7
ROUTE_LAYER_H	src/route_layer.h	2;"	d
SECRET_NUM	include/darknet.h	8;"	d
SEG	include/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH$/;"	e	enum:__anon8
SEGMENTATION_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA$/;"	e	enum:__anon15
SHORTCUT	include/darknet.h	/^    SHORTCUT,$/;"	e	enum:__anon7
SHORTCUT_LAYER_H	src/shortcut_layer.h	2;"	d
SIG	include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon10
SLIB	Makefile	/^SLIB=libdarknet.so$/;"	m
SMOOTH	include/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH$/;"	e	enum:__anon8
SOFTMAX	include/darknet.h	/^    SOFTMAX,$/;"	e	enum:__anon7
SOFTMAX_LAYER_H	src/softmax_layer.h	2;"	d
SSE	include/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH$/;"	e	enum:__anon8
STAIR	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon6
STBIDEF	src/stb_image.h	410;"	d
STBIDEF	src/stb_image.h	412;"	d
STBIW_ASSERT	src/stb_image_write.h	126;"	d
STBIW_FREE	src/stb_image_write.h	117;"	d
STBIW_MALLOC	src/stb_image_write.h	115;"	d
STBIW_MEMMOVE	src/stb_image_write.h	120;"	d
STBIW_REALLOC	src/stb_image_write.h	116;"	d
STBI_ASSERT	src/stb_image.h	575;"	d
STBI_FREE	src/stb_image.h	633;"	d
STBI_HAS_LROTL	src/stb_image.h	613;"	d
STBI_INCLUDE_STB_IMAGE_H	src/stb_image.h	215;"	d
STBI_MALLOC	src/stb_image.h	631;"	d
STBI_NEON	src/stb_image.h	720;"	d
STBI_NOTUSED	src/stb_image.h	607;"	d
STBI_NOTUSED	src/stb_image.h	609;"	d
STBI_NO_BMP	src/stb_image.h	533;"	d
STBI_NO_GIF	src/stb_image.h	542;"	d
STBI_NO_HDR	src/stb_image.h	545;"	d
STBI_NO_JPEG	src/stb_image.h	527;"	d
STBI_NO_PIC	src/stb_image.h	548;"	d
STBI_NO_PNG	src/stb_image.h	530;"	d
STBI_NO_PNM	src/stb_image.h	551;"	d
STBI_NO_PSD	src/stb_image.h	536;"	d
STBI_NO_SIMD	src/stb_image.h	649;"	d
STBI_NO_SIMD	src/stb_image.h	664;"	d
STBI_NO_TGA	src/stb_image.h	539;"	d
STBI_NO_ZLIB	src/stb_image.h	556;"	d
STBI_REALLOC	src/stb_image.h	632;"	d
STBI_SIMD_ALIGN	src/stb_image.h	694;"	d
STBI_SIMD_ALIGN	src/stb_image.h	702;"	d
STBI_SIMD_ALIGN	src/stb_image.h	726;"	d
STBI_SIMD_ALIGN	src/stb_image.h	730;"	d
STBI_SSE2	src/stb_image.h	668;"	d
STBI_VERSION	src/stb_image.h	391;"	d
STBI__BYTECAST	src/stb_image.h	1300;"	d
STBI__F_avg	src/stb_image.h	/^   STBI__F_avg=3,$/;"	e	enum:__anon32
STBI__F_avg_first	src/stb_image.h	/^   STBI__F_avg_first,$/;"	e	enum:__anon32
STBI__F_none	src/stb_image.h	/^   STBI__F_none=0,$/;"	e	enum:__anon32
STBI__F_paeth	src/stb_image.h	/^   STBI__F_paeth=4,$/;"	e	enum:__anon32
STBI__F_paeth_first	src/stb_image.h	/^   STBI__F_paeth_first$/;"	e	enum:__anon32
STBI__F_sub	src/stb_image.h	/^   STBI__F_sub=1,$/;"	e	enum:__anon32
STBI__F_up	src/stb_image.h	/^   STBI__F_up=2,$/;"	e	enum:__anon32
STBI__HDR_BUFLEN	src/stb_image.h	5795;"	d
STBI__IDCT_1D	src/stb_image.h	1909;"	d
STBI__MARKER_none	src/stb_image.h	2394;"	d
STBI__PNG_TYPE	src/stb_image.h	4295;"	d
STBI__RESTART	src/stb_image.h	2411;"	d
STBI__SCAN_header	src/stb_image.h	/^   STBI__SCAN_header$/;"	e	enum:__anon23
STBI__SCAN_load	src/stb_image.h	/^   STBI__SCAN_load=0,$/;"	e	enum:__anon23
STBI__SCAN_type	src/stb_image.h	/^   STBI__SCAN_type,$/;"	e	enum:__anon23
STBI__X64_TARGET	src/stb_image.h	638;"	d
STBI__X86_TARGET	src/stb_image.h	640;"	d
STBI__ZFAST_BITS	src/stb_image.h	3437;"	d
STBI__ZFAST_MASK	src/stb_image.h	3438;"	d
STBI_default	src/stb_image.h	/^   STBI_default = 0, \/\/ only used for req_comp$/;"	e	enum:__anon20
STBI_grey	src/stb_image.h	/^   STBI_grey       = 1,$/;"	e	enum:__anon20
STBI_grey_alpha	src/stb_image.h	/^   STBI_grey_alpha = 2,$/;"	e	enum:__anon20
STBI_rgb	src/stb_image.h	/^   STBI_rgb        = 3,$/;"	e	enum:__anon20
STBI_rgb_alpha	src/stb_image.h	/^   STBI_rgb_alpha  = 4$/;"	e	enum:__anon20
STB_IMAGE_IMPLEMENTATION	src/image.c	8;"	d	file:
STB_IMAGE_WRITE_IMPLEMENTATION	src/image.c	10;"	d	file:
STEP	include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon10
STEPS	include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon10
STUDY_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA$/;"	e	enum:__anon15
SUPER_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA$/;"	e	enum:__anon15
SWAG_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA$/;"	e	enum:__anon15
SortMaster3000	src/compare.c	/^void SortMaster3000(char *filename, char *weightfile)$/;"	f	signature:(char *filename, char *weightfile)
TAG_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA$/;"	e	enum:__anon15
TANH	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon6
TREE_H	src/tree.h	2;"	d
TWO_PI	src/utils.h	8;"	d
USET	src/lstm_layer.h	7;"	d
USET	src/rnn_layer.h	8;"	d
UTILS_H	src/utils.h	2;"	d
VPATH	Makefile	/^VPATH=.\/src\/:.\/examples$/;"	m
WRITING_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA$/;"	e	enum:__anon15
X	include/darknet.h	/^    matrix X;$/;"	m	struct:__anon14	access:public
XNOR	include/darknet.h	/^    XNOR,$/;"	e	enum:__anon7
YCbCr_to_RGB_kernel	src/stb_image.h	/^   void (*YCbCr_to_RGB_kernel)(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step);$/;"	m	struct:__anon25	access:public
__anon11::aspect	include/darknet.h	/^    float aspect;$/;"	m	struct:__anon11	access:public
__anon11::dx	include/darknet.h	/^    float dx;$/;"	m	struct:__anon11	access:public
__anon11::dy	include/darknet.h	/^    float dy;$/;"	m	struct:__anon11	access:public
__anon11::h	include/darknet.h	/^    int h;$/;"	m	struct:__anon11	access:public
__anon11::rad	include/darknet.h	/^    float rad;$/;"	m	struct:__anon11	access:public
__anon11::scale	include/darknet.h	/^    float scale;$/;"	m	struct:__anon11	access:public
__anon11::w	include/darknet.h	/^    int w;$/;"	m	struct:__anon11	access:public
__anon12::c	include/darknet.h	/^    int c;$/;"	m	struct:__anon12	access:public
__anon12::data	include/darknet.h	/^    float *data;$/;"	m	struct:__anon12	access:public
__anon12::h	include/darknet.h	/^    int h;$/;"	m	struct:__anon12	access:public
__anon12::w	include/darknet.h	/^    int w;$/;"	m	struct:__anon12	access:public
__anon13::h	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:__anon13	access:public
__anon13::w	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:__anon13	access:public
__anon13::x	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:__anon13	access:public
__anon13::y	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:__anon13	access:public
__anon14::X	include/darknet.h	/^    matrix X;$/;"	m	struct:__anon14	access:public
__anon14::boxes	include/darknet.h	/^    box **boxes;$/;"	m	struct:__anon14	access:public
__anon14::h	include/darknet.h	/^    int w, h;$/;"	m	struct:__anon14	access:public
__anon14::num_boxes	include/darknet.h	/^    int *num_boxes;$/;"	m	struct:__anon14	access:public
__anon14::shallow	include/darknet.h	/^    int shallow;$/;"	m	struct:__anon14	access:public
__anon14::w	include/darknet.h	/^    int w, h;$/;"	m	struct:__anon14	access:public
__anon14::y	include/darknet.h	/^    matrix y;$/;"	m	struct:__anon14	access:public
__anon16::bottom	include/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon16	access:public
__anon16::h	include/darknet.h	/^    float x,y,w,h;$/;"	m	struct:__anon16	access:public
__anon16::id	include/darknet.h	/^    int id;$/;"	m	struct:__anon16	access:public
__anon16::left	include/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon16	access:public
__anon16::right	include/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon16	access:public
__anon16::top	include/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon16	access:public
__anon16::w	include/darknet.h	/^    float x,y,w,h;$/;"	m	struct:__anon16	access:public
__anon16::x	include/darknet.h	/^    float x,y,w,h;$/;"	m	struct:__anon16	access:public
__anon16::y	include/darknet.h	/^    float x,y,w,h;$/;"	m	struct:__anon16	access:public
__anon17::class	src/compare.c	/^    int class;$/;"	m	struct:__anon17	file:	access:public
__anon17::classes	src/compare.c	/^    int classes;$/;"	m	struct:__anon17	file:	access:public
__anon17::elo	src/compare.c	/^    float elo;$/;"	m	struct:__anon17	file:	access:public
__anon17::elos	src/compare.c	/^    float *elos;$/;"	m	struct:__anon17	file:	access:public
__anon17::filename	src/compare.c	/^    char *filename;$/;"	m	struct:__anon17	file:	access:public
__anon17::net	src/compare.c	/^    network net;$/;"	m	struct:__anon17	file:	access:public
__anon18::d	src/network_kernels.cu	/^    data d;$/;"	m	struct:__anon18	file:	access:public
__anon18::err	src/network_kernels.cu	/^    float *err;$/;"	m	struct:__anon18	file:	access:public
__anon18::net	src/network_kernels.cu	/^    network net;$/;"	m	struct:__anon18	file:	access:public
__anon19::j	src/network_kernels.cu	/^    int j;$/;"	m	struct:__anon19	file:	access:public
__anon19::n	src/network_kernels.cu	/^    int n;$/;"	m	struct:__anon19	file:	access:public
__anon19::nets	src/network_kernels.cu	/^    network *nets;$/;"	m	struct:__anon19	file:	access:public
__anon1::data	examples/go.c	/^    char **data;$/;"	m	struct:__anon1	file:	access:public
__anon1::n	examples/go.c	/^    int n;$/;"	m	struct:__anon1	file:	access:public
__anon21::eof	src/stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon21	access:public
__anon21::read	src/stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read$/;"	m	struct:__anon21	access:public
__anon21::skip	src/stb_image.h	/^   void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget' the last -n bytes if negative$/;"	m	struct:__anon21	access:public
__anon22::buffer_start	src/stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon22	access:public
__anon22::buflen	src/stb_image.h	/^   int buflen;$/;"	m	struct:__anon22	access:public
__anon22::img_buffer	src/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon22	access:public
__anon22::img_buffer_end	src/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon22	access:public
__anon22::img_buffer_original	src/stb_image.h	/^   stbi_uc *img_buffer_original;$/;"	m	struct:__anon22	access:public
__anon22::img_n	src/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon22	access:public
__anon22::img_out_n	src/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon22	access:public
__anon22::img_x	src/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon22	access:public
__anon22::img_y	src/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon22	access:public
__anon22::io	src/stb_image.h	/^   stbi_io_callbacks io;$/;"	m	struct:__anon22	access:public
__anon22::io_user_data	src/stb_image.h	/^   void *io_user_data;$/;"	m	struct:__anon22	access:public
__anon22::read_from_callbacks	src/stb_image.h	/^   int read_from_callbacks;$/;"	m	struct:__anon22	access:public
__anon24::code	src/stb_image.h	/^   stbi__uint16 code[256];$/;"	m	struct:__anon24	access:public
__anon24::delta	src/stb_image.h	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon24	access:public
__anon24::fast	src/stb_image.h	/^   stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anon24	access:public
__anon24::maxcode	src/stb_image.h	/^   unsigned int maxcode[18];$/;"	m	struct:__anon24	access:public
__anon24::size	src/stb_image.h	/^   stbi_uc  size[257];$/;"	m	struct:__anon24	access:public
__anon24::values	src/stb_image.h	/^   stbi_uc  values[256];$/;"	m	struct:__anon24	access:public
__anon25::YCbCr_to_RGB_kernel	src/stb_image.h	/^   void (*YCbCr_to_RGB_kernel)(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step);$/;"	m	struct:__anon25	access:public
__anon25::__anon26::coeff	src/stb_image.h	/^      short   *coeff;   \/\/ progressive only$/;"	m	struct:__anon25::__anon26	access:public
__anon25::__anon26::coeff_h	src/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon25::__anon26	access:public
__anon25::__anon26::coeff_w	src/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon25::__anon26	access:public
__anon25::__anon26::data	src/stb_image.h	/^      stbi_uc *data;$/;"	m	struct:__anon25::__anon26	access:public
__anon25::__anon26::dc_pred	src/stb_image.h	/^      int dc_pred;$/;"	m	struct:__anon25::__anon26	access:public
__anon25::__anon26::h	src/stb_image.h	/^      int h,v;$/;"	m	struct:__anon25::__anon26	access:public
__anon25::__anon26::h2	src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon25::__anon26	access:public
__anon25::__anon26::ha	src/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon25::__anon26	access:public
__anon25::__anon26::hd	src/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon25::__anon26	access:public
__anon25::__anon26::id	src/stb_image.h	/^      int id;$/;"	m	struct:__anon25::__anon26	access:public
__anon25::__anon26::linebuf	src/stb_image.h	/^      stbi_uc *linebuf;$/;"	m	struct:__anon25::__anon26	access:public
__anon25::__anon26::raw_coeff	src/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon25::__anon26	access:public
__anon25::__anon26::raw_data	src/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon25::__anon26	access:public
__anon25::__anon26::tq	src/stb_image.h	/^      int tq;$/;"	m	struct:__anon25::__anon26	access:public
__anon25::__anon26::v	src/stb_image.h	/^      int h,v;$/;"	m	struct:__anon25::__anon26	access:public
__anon25::__anon26::w2	src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon25::__anon26	access:public
__anon25::__anon26::x	src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon25::__anon26	access:public
__anon25::__anon26::y	src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon25::__anon26	access:public
__anon25::code_bits	src/stb_image.h	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon25	access:public
__anon25::code_buffer	src/stb_image.h	/^   stbi__uint32   code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon25	access:public
__anon25::dequant	src/stb_image.h	/^   stbi_uc dequant[4][64];$/;"	m	struct:__anon25	access:public
__anon25::eob_run	src/stb_image.h	/^   int            eob_run;$/;"	m	struct:__anon25	access:public
__anon25::fast_ac	src/stb_image.h	/^   stbi__int16 fast_ac[4][1 << FAST_BITS];$/;"	m	struct:__anon25	access:public
__anon25::huff_ac	src/stb_image.h	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anon25	access:public
__anon25::huff_dc	src/stb_image.h	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anon25	access:public
__anon25::idct_block_kernel	src/stb_image.h	/^   void (*idct_block_kernel)(stbi_uc *out, int out_stride, short data[64]);$/;"	m	struct:__anon25	access:public
__anon25::img_comp	src/stb_image.h	/^   } img_comp[4];$/;"	m	struct:__anon25	typeref:struct:__anon25::__anon26	access:public
__anon25::img_h_max	src/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon25	access:public
__anon25::img_mcu_h	src/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon25	access:public
__anon25::img_mcu_w	src/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon25	access:public
__anon25::img_mcu_x	src/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon25	access:public
__anon25::img_mcu_y	src/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon25	access:public
__anon25::img_v_max	src/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon25	access:public
__anon25::marker	src/stb_image.h	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon25	access:public
__anon25::nomore	src/stb_image.h	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon25	access:public
__anon25::order	src/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon25	access:public
__anon25::progressive	src/stb_image.h	/^   int            progressive;$/;"	m	struct:__anon25	access:public
__anon25::resample_row_hv_2_kernel	src/stb_image.h	/^   stbi_uc *(*resample_row_hv_2_kernel)(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs);$/;"	m	struct:__anon25	access:public
__anon25::restart_interval	src/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon25	access:public
__anon25::s	src/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon25	access:public
__anon25::scan_n	src/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon25	access:public
__anon25::spec_end	src/stb_image.h	/^   int            spec_end;$/;"	m	struct:__anon25	access:public
__anon25::spec_start	src/stb_image.h	/^   int            spec_start;$/;"	m	struct:__anon25	access:public
__anon25::succ_high	src/stb_image.h	/^   int            succ_high;$/;"	m	struct:__anon25	access:public
__anon25::succ_low	src/stb_image.h	/^   int            succ_low;$/;"	m	struct:__anon25	access:public
__anon25::todo	src/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon25	access:public
__anon27::hs	src/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon27	access:public
__anon27::line0	src/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon27	access:public
__anon27::line1	src/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon27	access:public
__anon27::resample	src/stb_image.h	/^   resample_row_func resample;$/;"	m	struct:__anon27	access:public
__anon27::vs	src/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon27	access:public
__anon27::w_lores	src/stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion$/;"	m	struct:__anon27	access:public
__anon27::ypos	src/stb_image.h	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon27	access:public
__anon27::ystep	src/stb_image.h	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon27	access:public
__anon28::fast	src/stb_image.h	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon28	access:public
__anon28::firstcode	src/stb_image.h	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anon28	access:public
__anon28::firstsymbol	src/stb_image.h	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon28	access:public
__anon28::maxcode	src/stb_image.h	/^   int maxcode[17];$/;"	m	struct:__anon28	access:public
__anon28::size	src/stb_image.h	/^   stbi_uc  size[288];$/;"	m	struct:__anon28	access:public
__anon28::value	src/stb_image.h	/^   stbi__uint16 value[288];$/;"	m	struct:__anon28	access:public
__anon29::code_buffer	src/stb_image.h	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anon29	access:public
__anon29::num_bits	src/stb_image.h	/^   int num_bits;$/;"	m	struct:__anon29	access:public
__anon29::z_distance	src/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon29	access:public
__anon29::z_expandable	src/stb_image.h	/^   int   z_expandable;$/;"	m	struct:__anon29	access:public
__anon29::z_length	src/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon29	access:public
__anon29::zbuffer	src/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon29	access:public
__anon29::zbuffer_end	src/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon29	access:public
__anon29::zout	src/stb_image.h	/^   char *zout;$/;"	m	struct:__anon29	access:public
__anon29::zout_end	src/stb_image.h	/^   char *zout_end;$/;"	m	struct:__anon29	access:public
__anon29::zout_start	src/stb_image.h	/^   char *zout_start;$/;"	m	struct:__anon29	access:public
__anon2::x	examples/rnn_vid.c	/^    float *x;$/;"	m	struct:__anon2	file:	access:public
__anon2::y	examples/rnn_vid.c	/^    float *y;$/;"	m	struct:__anon2	file:	access:public
__anon30::length	src/stb_image.h	/^   stbi__uint32 length;$/;"	m	struct:__anon30	access:public
__anon30::type	src/stb_image.h	/^   stbi__uint32 type;$/;"	m	struct:__anon30	access:public
__anon31::expanded	src/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon31	access:public
__anon31::idata	src/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon31	access:public
__anon31::out	src/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon31	access:public
__anon31::s	src/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon31	access:public
__anon33::channel	src/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon33	access:public
__anon33::size	src/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon33	access:public
__anon33::type	src/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon33	access:public
__anon34::first	src/stb_image.h	/^   stbi_uc first;$/;"	m	struct:__anon34	access:public
__anon34::prefix	src/stb_image.h	/^   stbi__int16 prefix;$/;"	m	struct:__anon34	access:public
__anon34::suffix	src/stb_image.h	/^   stbi_uc suffix;$/;"	m	struct:__anon34	access:public
__anon35::bgindex	src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon35	access:public
__anon35::codes	src/stb_image.h	/^   stbi__gif_lzw codes[4096];$/;"	m	struct:__anon35	access:public
__anon35::color_table	src/stb_image.h	/^   stbi_uc *color_table;$/;"	m	struct:__anon35	access:public
__anon35::cur_x	src/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon35	access:public
__anon35::cur_y	src/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon35	access:public
__anon35::eflags	src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon35	access:public
__anon35::flags	src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon35	access:public
__anon35::h	src/stb_image.h	/^   int w,h;$/;"	m	struct:__anon35	access:public
__anon35::lflags	src/stb_image.h	/^   int lflags;$/;"	m	struct:__anon35	access:public
__anon35::line_size	src/stb_image.h	/^   int line_size;$/;"	m	struct:__anon35	access:public
__anon35::lpal	src/stb_image.h	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anon35	access:public
__anon35::max_x	src/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon35	access:public
__anon35::max_y	src/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon35	access:public
__anon35::out	src/stb_image.h	/^   stbi_uc *out;                 \/\/ output buffer (always 4 components)$/;"	m	struct:__anon35	access:public
__anon35::pal	src/stb_image.h	/^   stbi_uc  pal[256][4];$/;"	m	struct:__anon35	access:public
__anon35::parse	src/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon35	access:public
__anon35::ratio	src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon35	access:public
__anon35::start_x	src/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon35	access:public
__anon35::start_y	src/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon35	access:public
__anon35::step	src/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon35	access:public
__anon35::transparent	src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon35	access:public
__anon35::w	src/stb_image.h	/^   int w,h;$/;"	m	struct:__anon35	access:public
__anon36::class	src/box.c	/^    int class;$/;"	m	struct:__anon36	file:	access:public
__anon36::index	src/box.c	/^    int index;$/;"	m	struct:__anon36	file:	access:public
__anon36::probs	src/box.c	/^    float **probs;$/;"	m	struct:__anon36	file:	access:public
__anon37::key	src/option_list.h	/^    char *key;$/;"	m	struct:__anon37	access:public
__anon37::used	src/option_list.h	/^    int used;$/;"	m	struct:__anon37	access:public
__anon37::val	src/option_list.h	/^    char *val;$/;"	m	struct:__anon37	access:public
__anon38::options	src/parser.c	/^    list *options;$/;"	m	struct:__anon38	file:	access:public
__anon38::type	src/parser.c	/^    char *type;$/;"	m	struct:__anon38	file:	access:public
__anon39::dh	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon39	access:public
__anon39::dw	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon39	access:public
__anon39::dx	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon39	access:public
__anon39::dy	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon39	access:public
__anon3::x	examples/rnn.c	/^    float *x;$/;"	m	struct:__anon3	file:	access:public
__anon3::y	examples/rnn.c	/^    float *y;$/;"	m	struct:__anon3	file:	access:public
__anon4::classes	include/darknet.h	/^    int classes;$/;"	m	struct:__anon4	access:public
__anon4::names	include/darknet.h	/^    char **names;$/;"	m	struct:__anon4	access:public
__anon5::child	include/darknet.h	/^    int *child;$/;"	m	struct:__anon5	access:public
__anon5::group	include/darknet.h	/^    int *group;$/;"	m	struct:__anon5	access:public
__anon5::group_offset	include/darknet.h	/^    int *group_offset;$/;"	m	struct:__anon5	access:public
__anon5::group_size	include/darknet.h	/^    int *group_size;$/;"	m	struct:__anon5	access:public
__anon5::groups	include/darknet.h	/^    int groups;$/;"	m	struct:__anon5	access:public
__anon5::leaf	include/darknet.h	/^    int *leaf;$/;"	m	struct:__anon5	access:public
__anon5::n	include/darknet.h	/^    int n;$/;"	m	struct:__anon5	access:public
__anon5::name	include/darknet.h	/^    char **name;$/;"	m	struct:__anon5	access:public
__anon5::parent	include/darknet.h	/^    int *parent;$/;"	m	struct:__anon5	access:public
__anon9::B1	include/darknet.h	/^    float B1;$/;"	m	struct:__anon9	access:public
__anon9::B2	include/darknet.h	/^    float B2;$/;"	m	struct:__anon9	access:public
__anon9::adam	include/darknet.h	/^    int adam;$/;"	m	struct:__anon9	access:public
__anon9::batch	include/darknet.h	/^    int batch;$/;"	m	struct:__anon9	access:public
__anon9::decay	include/darknet.h	/^    float decay;$/;"	m	struct:__anon9	access:public
__anon9::eps	include/darknet.h	/^    float eps;$/;"	m	struct:__anon9	access:public
__anon9::learning_rate	include/darknet.h	/^    float learning_rate;$/;"	m	struct:__anon9	access:public
__anon9::momentum	include/darknet.h	/^    float momentum;$/;"	m	struct:__anon9	access:public
__anon9::t	include/darknet.h	/^    int t;$/;"	m	struct:__anon9	access:public
_fields_	python/darknet.py	/^    _fields_ = [("classes", c_int),$/;"	v	class:METADATA
_fields_	python/darknet.py	/^    _fields_ = [("w", c_int),$/;"	v	class:IMAGE
abs_mean	examples/nightmare.c	/^float abs_mean(float *x, int n)$/;"	f	signature:(float *x, int n)
absolute	include/darknet.h	/^    int absolute;$/;"	m	struct:layer	access:public
accumulate_kernel	src/blas_kernels.cu	/^__global__ void accumulate_kernel(float *x, int n, int groups, float *sum)$/;"	f	signature:(float *x, int n, int groups, float *sum)
activate	src/activations.c	/^float activate(float x, ACTIVATION a)$/;"	f	signature:(float x, ACTIVATION a)
activate_array	src/activations.c	/^void activate_array(float *x, const int n, const ACTIVATION a)$/;"	f	signature:(float *x, const int n, const ACTIVATION a)
activate_array_gpu	src/activation_kernels.cu	/^extern "C" void activate_array_gpu(float *x, int n, ACTIVATION a) $/;"	f	signature:(float *x, int n, ACTIVATION a)
activate_array_kernel	src/activation_kernels.cu	/^__global__ void activate_array_kernel(float *x, int n, ACTIVATION a)$/;"	f	signature:(float *x, int n, ACTIVATION a)
activate_kernel	src/activation_kernels.cu	/^__device__ float activate_kernel(float x, ACTIVATION a)$/;"	f	signature:(float x, ACTIVATION a)
activation	include/darknet.h	/^    ACTIVATION activation;$/;"	m	struct:layer	access:public
adam	include/darknet.h	/^    int adam;$/;"	m	struct:__anon9	access:public
adam	include/darknet.h	/^    int adam;$/;"	m	struct:network	access:public
adam_gpu	src/blas_kernels.cu	/^extern "C" void adam_gpu(int n, float *x, float *m, float *v, float B1, float B2, float rate, float eps, int t)$/;"	f	signature:(int n, float *x, float *m, float *v, float B1, float B2, float rate, float eps, int t)
adam_kernel	src/blas_kernels.cu	/^__global__ void adam_kernel(int N, float *x, float *m, float *v, float B1, float B2, float rate, float eps, int t)$/;"	f	signature:(int N, float *x, float *m, float *v, float B1, float B2, float rate, float eps, int t)
adam_update_gpu	src/blas_kernels.cu	/^extern "C" void adam_update_gpu(float *w, float *d, float *m, float *v, float B1, float B2, float eps, float decay, float rate, int n, int batch, int t)$/;"	f	signature:(float *w, float *d, float *m, float *v, float B1, float B2, float eps, float decay, float rate, int n, int batch, int t)
add_bias	src/convolutional_layer.c	/^void add_bias(float *output, float *biases, int batch, int n, int size)$/;"	f	signature:(float *output, float *biases, int batch, int n, int size)
add_bias_gpu	src/blas_kernels.cu	/^void add_bias_gpu(float *output, float *biases, int batch, int n, int size)$/;"	f	signature:(float *output, float *biases, int batch, int n, int size)
add_bias_kernel	src/blas_kernels.cu	/^__global__ void add_bias_kernel(float *output, float *biases, int batch, int n, int size)$/;"	f	signature:(float *output, float *biases, int batch, int n, int size)
add_gpu	src/blas_kernels.cu	/^extern "C" void add_gpu(int N, float ALPHA, float * X, int INCX)$/;"	f	signature:(int N, float ALPHA, float * X, int INCX)
add_kernel	src/blas_kernels.cu	/^__global__ void add_kernel(int N, float ALPHA, float *X, int INCX)$/;"	f	signature:(int N, float ALPHA, float *X, int INCX)
add_pixel	src/image.c	/^void add_pixel(image m, int x, int y, int c, float val)$/;"	f	signature:(image m, int x, int y, int c, float val)
alpha	include/darknet.h	/^    float alpha;$/;"	m	struct:layer	access:public
alphanum_to_int	src/utils.c	/^int alphanum_to_int(char c)$/;"	f	signature:(char c)
angle	include/darknet.h	/^    float angle;$/;"	m	struct:layer	access:public
angle	include/darknet.h	/^    float angle;$/;"	m	struct:load_args	access:public
angle	include/darknet.h	/^    float angle;$/;"	m	struct:network	access:public
aspect	include/darknet.h	/^    float aspect;$/;"	m	struct:__anon11	access:public
aspect	include/darknet.h	/^    float aspect;$/;"	m	struct:load_args	access:public
aspect	include/darknet.h	/^    float aspect;$/;"	m	struct:network	access:public
augment_args	include/darknet.h	/^} augment_args;$/;"	t	typeref:struct:__anon11
average	examples/darknet.c	/^void average(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
avg	src/demo.c	/^static float *avg;$/;"	v	file:
avgpool_layer	src/avgpool_layer.h	/^typedef layer avgpool_layer;$/;"	t
axpy_cpu	src/blas.c	/^void axpy_cpu(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f	signature:(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)
axpy_gpu	src/blas_kernels.cu	/^extern "C" void axpy_gpu(int N, float ALPHA, float * X, int INCX, float * Y, int INCY)$/;"	f	signature:(int N, float ALPHA, float * X, int INCX, float * Y, int INCY)
axpy_gpu_offset	src/blas_kernels.cu	/^extern "C" void axpy_gpu_offset(int N, float ALPHA, float * X, int OFFX, int INCX, float * Y, int OFFY, int INCY)$/;"	f	signature:(int N, float ALPHA, float * X, int OFFX, int INCX, float * Y, int OFFY, int INCY)
axpy_kernel	src/blas_kernels.cu	/^__global__ void axpy_kernel(int N, float ALPHA, float *X, int OFFX, int INCX,  float *Y, int OFFY, int INCY)$/;"	f	signature:(int N, float ALPHA, float *X, int OFFX, int INCX, float *Y, int OFFY, int INCY)
back	include/darknet.h	/^    node *back;$/;"	m	struct:list	access:public
background	include/darknet.h	/^    int background;$/;"	m	struct:layer	access:public
background	include/darknet.h	/^    int background;$/;"	m	struct:load_args	access:public
backward	include/darknet.h	/^    void (*backward)  (struct layer, struct network);$/;"	m	struct:layer	access:public
backward_activation_layer	src/activation_layer.c	/^void backward_activation_layer(layer l, network net)$/;"	f	signature:(layer l, network net)
backward_activation_layer_gpu	src/activation_layer.c	/^void backward_activation_layer_gpu(layer l, network net)$/;"	f	signature:(layer l, network net)
backward_avgpool_layer	src/avgpool_layer.c	/^void backward_avgpool_layer(const avgpool_layer l, network net)$/;"	f	signature:(const avgpool_layer l, network net)
backward_avgpool_layer_gpu	src/avgpool_layer_kernels.cu	/^extern "C" void backward_avgpool_layer_gpu(avgpool_layer layer, network net)$/;"	f	signature:(avgpool_layer layer, network net)
backward_avgpool_layer_kernel	src/avgpool_layer_kernels.cu	/^__global__ void backward_avgpool_layer_kernel(int n, int w, int h, int c, float *in_delta, float *out_delta)$/;"	f	signature:(int n, int w, int h, int c, float *in_delta, float *out_delta)
backward_batchnorm_layer	src/batchnorm_layer.c	/^void backward_batchnorm_layer(layer l, network net)$/;"	f	signature:(layer l, network net)
backward_batchnorm_layer_gpu	src/batchnorm_layer.c	/^void backward_batchnorm_layer_gpu(layer l, network net)$/;"	f	signature:(layer l, network net)
backward_bias	src/convolutional_layer.c	/^void backward_bias(float *bias_updates, float *delta, int batch, int n, int size)$/;"	f	signature:(float *bias_updates, float *delta, int batch, int n, int size)
backward_bias_conn_kernel	src/blas_kernels.cu	/^__global__ void backward_bias_conn_kernel(float *bias_updates, float *delta, int batch, int n)$/;"	f	signature:(float *bias_updates, float *delta, int batch, int n)
backward_bias_gpu	src/blas_kernels.cu	/^void backward_bias_gpu(float *bias_updates, float *delta, int batch, int n, int size)$/;"	f	signature:(float *bias_updates, float *delta, int batch, int n, int size)
backward_bias_kernel	src/blas_kernels.cu	/^__global__ void backward_bias_kernel(float *bias_updates, float *delta, int batch, int n, int size)$/;"	f	signature:(float *bias_updates, float *delta, int batch, int n, int size)
backward_connected_layer	src/connected_layer.c	/^void backward_connected_layer(layer l, network net)$/;"	f	signature:(layer l, network net)
backward_connected_layer_gpu	src/connected_layer.c	/^void backward_connected_layer_gpu(layer l, network net)$/;"	f	signature:(layer l, network net)
backward_convolutional_layer	src/convolutional_layer.c	/^void backward_convolutional_layer(convolutional_layer l, network net)$/;"	f	signature:(convolutional_layer l, network net)
backward_convolutional_layer_gpu	src/convolutional_kernels.cu	/^void backward_convolutional_layer_gpu(convolutional_layer l, network net)$/;"	f	signature:(convolutional_layer l, network net)
backward_cost_layer	src/cost_layer.c	/^void backward_cost_layer(const cost_layer l, network net)$/;"	f	signature:(const cost_layer l, network net)
backward_cost_layer_gpu	src/cost_layer.c	/^void backward_cost_layer_gpu(const cost_layer l, network net)$/;"	f	signature:(const cost_layer l, network net)
backward_crnn_layer	src/crnn_layer.c	/^void backward_crnn_layer(layer l, network net)$/;"	f	signature:(layer l, network net)
backward_crnn_layer_gpu	src/crnn_layer.c	/^void backward_crnn_layer_gpu(layer l, network net)$/;"	f	signature:(layer l, network net)
backward_crop_layer	src/crop_layer.c	/^void backward_crop_layer(const crop_layer l, network net){}$/;"	f	signature:(const crop_layer l, network net)
backward_crop_layer_gpu	src/crop_layer.c	/^void backward_crop_layer_gpu(const crop_layer l, network net){}$/;"	f	signature:(const crop_layer l, network net)
backward_deconvolutional_layer	src/deconvolutional_layer.c	/^void backward_deconvolutional_layer(layer l, network net)$/;"	f	signature:(layer l, network net)
backward_deconvolutional_layer_gpu	src/deconvolutional_kernels.cu	/^extern "C" void backward_deconvolutional_layer_gpu(layer l, network net)$/;"	f	signature:(layer l, network net)
backward_detection_layer	src/detection_layer.c	/^void backward_detection_layer(const detection_layer l, network net)$/;"	f	signature:(const detection_layer l, network net)
backward_detection_layer_gpu	src/detection_layer.c	/^void backward_detection_layer_gpu(detection_layer l, network net)$/;"	f	signature:(detection_layer l, network net)
backward_dropout_layer	src/dropout_layer.c	/^void backward_dropout_layer(dropout_layer l, network net)$/;"	f	signature:(dropout_layer l, network net)
backward_dropout_layer_gpu	src/dropout_layer_kernels.cu	/^void backward_dropout_layer_gpu(dropout_layer layer, network net)$/;"	f	signature:(dropout_layer layer, network net)
backward_gpu	include/darknet.h	/^    void (*backward_gpu)  (struct layer, struct network);$/;"	m	struct:layer	access:public
backward_gru_layer	src/gru_layer.c	/^void backward_gru_layer(layer l, network net)$/;"	f	signature:(layer l, network net)
backward_gru_layer_gpu	src/gru_layer.c	/^void backward_gru_layer_gpu(layer l, network net)$/;"	f	signature:(layer l, network net)
backward_local_layer	src/local_layer.c	/^void backward_local_layer(local_layer l, network net)$/;"	f	signature:(local_layer l, network net)
backward_local_layer_gpu	src/local_layer.c	/^void backward_local_layer_gpu(local_layer l, network net)$/;"	f	signature:(local_layer l, network net)
backward_lstm_layer	src/lstm_layer.c	/^void backward_lstm_layer(layer l, network state)$/;"	f	signature:(layer l, network state)
backward_lstm_layer_gpu	src/lstm_layer.c	/^void backward_lstm_layer_gpu(layer l, network state)$/;"	f	signature:(layer l, network state)
backward_maxpool_layer	src/maxpool_layer.c	/^void backward_maxpool_layer(const maxpool_layer l, network net)$/;"	f	signature:(const maxpool_layer l, network net)
backward_maxpool_layer_gpu	src/maxpool_layer_kernels.cu	/^extern "C" void backward_maxpool_layer_gpu(maxpool_layer layer, network net)$/;"	f	signature:(maxpool_layer layer, network net)
backward_maxpool_layer_kernel	src/maxpool_layer_kernels.cu	/^__global__ void backward_maxpool_layer_kernel(int n, int in_h, int in_w, int in_c, int stride, int size, int pad, float *delta, float *prev_delta, int *indexes)$/;"	f	signature:(int n, int in_h, int in_w, int in_c, int stride, int size, int pad, float *delta, float *prev_delta, int *indexes)
backward_network	src/network.c	/^void backward_network(network net)$/;"	f	signature:(network net)
backward_network_gpu	src/network_kernels.cu	/^void backward_network_gpu(network net)$/;"	f	signature:(network net)
backward_normalization_layer	src/normalization_layer.c	/^void backward_normalization_layer(const layer layer, network net)$/;"	f	signature:(const layer layer, network net)
backward_normalization_layer_gpu	src/normalization_layer.c	/^void backward_normalization_layer_gpu(const layer layer, network net)$/;"	f	signature:(const layer layer, network net)
backward_region_layer	src/region_layer.c	/^void backward_region_layer(const layer l, network net)$/;"	f	signature:(const layer l, network net)
backward_region_layer_gpu	src/region_layer.c	/^void backward_region_layer_gpu(const layer l, network net)$/;"	f	signature:(const layer l, network net)
backward_reorg_layer	src/reorg_layer.c	/^void backward_reorg_layer(const layer l, network net)$/;"	f	signature:(const layer l, network net)
backward_reorg_layer_gpu	src/reorg_layer.c	/^void backward_reorg_layer_gpu(layer l, network net)$/;"	f	signature:(layer l, network net)
backward_rnn_layer	src/rnn_layer.c	/^void backward_rnn_layer(layer l, network net)$/;"	f	signature:(layer l, network net)
backward_rnn_layer_gpu	src/rnn_layer.c	/^void backward_rnn_layer_gpu(layer l, network net)$/;"	f	signature:(layer l, network net)
backward_route_layer	src/route_layer.c	/^void backward_route_layer(const route_layer l, network net)$/;"	f	signature:(const route_layer l, network net)
backward_route_layer_gpu	src/route_layer.c	/^void backward_route_layer_gpu(const route_layer l, network net)$/;"	f	signature:(const route_layer l, network net)
backward_scale_cpu	src/batchnorm_layer.c	/^void backward_scale_cpu(float *x_norm, float *delta, int batch, int n, int size, float *scale_updates)$/;"	f	signature:(float *x_norm, float *delta, int batch, int n, int size, float *scale_updates)
backward_scale_gpu	src/blas_kernels.cu	/^void backward_scale_gpu(float *x_norm, float *delta, int batch, int n, int size, float *scale_updates)$/;"	f	signature:(float *x_norm, float *delta, int batch, int n, int size, float *scale_updates)
backward_scale_kernel	src/blas_kernels.cu	/^__global__ void backward_scale_kernel(float *x_norm, float *delta, int batch, int n, int size, float *scale_updates)$/;"	f	signature:(float *x_norm, float *delta, int batch, int n, int size, float *scale_updates)
backward_shortcut_layer	src/shortcut_layer.c	/^void backward_shortcut_layer(const layer l, network net)$/;"	f	signature:(const layer l, network net)
backward_shortcut_layer_gpu	src/shortcut_layer.c	/^void backward_shortcut_layer_gpu(const layer l, network net)$/;"	f	signature:(const layer l, network net)
backward_softmax_layer	src/softmax_layer.c	/^void backward_softmax_layer(const softmax_layer l, network net)$/;"	f	signature:(const softmax_layer l, network net)
backward_softmax_layer_gpu	src/softmax_layer.c	/^void backward_softmax_layer_gpu(const softmax_layer layer, network net)$/;"	f	signature:(const softmax_layer layer, network net)
basecfg	src/utils.c	/^char *basecfg(char *cfgfile)$/;"	f	signature:(char *cfgfile)
batch	include/darknet.h	/^    int batch;$/;"	m	struct:__anon9	access:public
batch	include/darknet.h	/^    int batch;$/;"	m	struct:layer	access:public
batch	include/darknet.h	/^    int batch;$/;"	m	struct:network	access:public
batch	src/parser.c	/^    int batch;$/;"	m	struct:size_params	file:	access:public
batch_normalize	include/darknet.h	/^    int batch_normalize;$/;"	m	struct:layer	access:public
bbox_comparator	src/compare.c	/^int bbox_comparator(const void *a, const void *b)$/;"	f	signature:(const void *a, const void *b)
bbox_fight	src/compare.c	/^void bbox_fight(network net, sortable_bbox *a, sortable_bbox *b, int classes, int class)$/;"	f	signature:(network net, sortable_bbox *a, sortable_bbox *b, int classes, int class)
bbox_update	src/compare.c	/^void bbox_update(sortable_bbox *a, sortable_bbox *b, int class, int result)$/;"	f	signature:(sortable_bbox *a, sortable_bbox *b, int class, int result)
bd_algo	include/darknet.h	/^    cudnnConvolutionBwdDataAlgo_t bd_algo;$/;"	m	struct:layer	access:public
best_3d_shift	src/image.c	/^int best_3d_shift(image a, image b, int min, int max)$/;"	f	signature:(image a, image b, int min, int max)
best_3d_shift_r	src/image.c	/^int best_3d_shift_r(image a, image b, int min, int max)$/;"	f	signature:(image a, image b, int min, int max)
beta	include/darknet.h	/^    float beta;$/;"	m	struct:layer	access:public
bf_algo	include/darknet.h	/^    cudnnConvolutionBwdFilterAlgo_t bf_algo;$/;"	m	struct:layer	access:public
bgindex	src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon35	access:public
bias_change_gpu	include/darknet.h	/^    float * bias_change_gpu;$/;"	m	struct:layer	access:public
bias_m	include/darknet.h	/^    float * bias_m;$/;"	m	struct:layer	access:public
bias_m_gpu	include/darknet.h	/^    float *bias_m_gpu;$/;"	m	struct:layer	access:public
bias_match	include/darknet.h	/^    int bias_match;$/;"	m	struct:layer	access:public
bias_updates	include/darknet.h	/^    float * bias_updates;$/;"	m	struct:layer	access:public
bias_updates_gpu	include/darknet.h	/^    float * bias_updates_gpu;$/;"	m	struct:layer	access:public
bias_v	include/darknet.h	/^    float * bias_v;$/;"	m	struct:layer	access:public
bias_v_gpu	include/darknet.h	/^    float *bias_v_gpu;$/;"	m	struct:layer	access:public
biases	include/darknet.h	/^    float * biases;$/;"	m	struct:layer	access:public
biases_gpu	include/darknet.h	/^    float * biases_gpu;$/;"	m	struct:layer	access:public
bilinear_interpolate	src/image.c	/^float bilinear_interpolate(image im, float x, float y, int c)$/;"	f	signature:(image im, float x, float y, int c)
bilinear_interpolate_kernel	src/crop_layer_kernels.cu	/^__device__ float bilinear_interpolate_kernel(float *image, int w, int h, float x, float y, int c)$/;"	f	signature:(float *image, int w, int h, float x, float y, int c)
binarize_cpu	src/convolutional_layer.c	/^void binarize_cpu(float *input, int n, float *binary)$/;"	f	signature:(float *input, int n, float *binary)
binarize_gpu	src/convolutional_kernels.cu	/^void binarize_gpu(float *x, int n, float *binary)$/;"	f	signature:(float *x, int n, float *binary)
binarize_image	src/image.c	/^image binarize_image(image im)$/;"	f	signature:(image im)
binarize_input	src/convolutional_layer.c	/^void binarize_input(float *input, int n, int size, float *binary)$/;"	f	signature:(float *input, int n, int size, float *binary)
binarize_input_gpu	src/convolutional_kernels.cu	/^void binarize_input_gpu(float *input, int n, int size, float *binary)$/;"	f	signature:(float *input, int n, int size, float *binary)
binarize_input_kernel	src/convolutional_kernels.cu	/^__global__ void binarize_input_kernel(float *input, int n, int size, float *binary)$/;"	f	signature:(float *input, int n, int size, float *binary)
binarize_kernel	src/convolutional_kernels.cu	/^__global__ void binarize_kernel(float *x, int n, float *binary)$/;"	f	signature:(float *x, int n, float *binary)
binarize_weights	src/convolutional_layer.c	/^void binarize_weights(float *weights, int n, int size, float *binary)$/;"	f	signature:(float *weights, int n, int size, float *binary)
binarize_weights_gpu	src/convolutional_kernels.cu	/^void binarize_weights_gpu(float *weights, int n, int size, float *binary)$/;"	f	signature:(float *weights, int n, int size, float *binary)
binarize_weights_kernel	src/convolutional_kernels.cu	/^__global__ void binarize_weights_kernel(float *weights, int n, int size, float *binary)$/;"	f	signature:(float *weights, int n, int size, float *binary)
binary	include/darknet.h	/^    int binary;$/;"	m	struct:layer	access:public
binary_input	include/darknet.h	/^    float * binary_input;$/;"	m	struct:layer	access:public
binary_input_gpu	include/darknet.h	/^    float * binary_input_gpu;$/;"	m	struct:layer	access:public
binary_weights	include/darknet.h	/^    float * binary_weights;$/;"	m	struct:layer	access:public
binary_weights_gpu	include/darknet.h	/^    float * binary_weights_gpu;$/;"	m	struct:layer	access:public
blas_handle	src/cuda.c	/^cublasHandle_t blas_handle()$/;"	f
blend_image	src/image.c	/^image blend_image(image fore, image back, float alpha)$/;"	f	signature:(image fore, image back, float alpha)
board_to_string	examples/go.c	/^void board_to_string(char *s, float *board)$/;"	f	signature:(char *s, float *board)
border_image	src/image.c	/^image border_image(image a, int border)$/;"	f	signature:(image a, int border)
bottom	include/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon16	access:public
box	include/darknet.h	/^} box;$/;"	t	typeref:struct:__anon13
box_intersection	src/box.c	/^float box_intersection(box a, box b)$/;"	f	signature:(box a, box b)
box_iou	src/box.c	/^float box_iou(box a, box b)$/;"	f	signature:(box a, box b)
box_label	include/darknet.h	/^} box_label;$/;"	t	typeref:struct:__anon16
box_rmse	src/box.c	/^float box_rmse(box a, box b)$/;"	f	signature:(box a, box b)
box_union	src/box.c	/^float box_union(box a, box b)$/;"	f	signature:(box a, box b)
boxes	include/darknet.h	/^    box **boxes;$/;"	m	struct:__anon14	access:public
boxes	src/demo.c	/^static box *boxes;$/;"	v	file:
buff	src/demo.c	/^static image buff [3];$/;"	v	file:
buff_index	src/demo.c	/^static int buff_index = 0;$/;"	v	file:
buff_letter	src/demo.c	/^static image buff_letter[3];$/;"	v	file:
buffer_start	src/stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon22	access:public
buflen	src/stb_image.h	/^   int buflen;$/;"	m	struct:__anon22	access:public
burn_in	include/darknet.h	/^    int burn_in;$/;"	m	struct:network	access:public
c	include/darknet.h	/^    int c;$/;"	m	struct:__anon12	access:public
c	include/darknet.h	/^    int h, w, c;$/;"	m	struct:network	access:public
c	include/darknet.h	/^    int h,w,c;$/;"	m	struct:layer	access:public
c	src/parser.c	/^    int c;$/;"	m	struct:size_params	file:	access:public
c_cpu	include/darknet.h	/^    float *c_cpu;$/;"	m	struct:layer	access:public
c_gpu	include/darknet.h	/^    float *c_gpu;$/;"	m	struct:layer	access:public
calc_network_cost	src/network.c	/^void calc_network_cost(network net)$/;"	f	signature:(network net)
calculate_liberties	examples/go.c	/^int *calculate_liberties(float *board)$/;"	f	signature:(float *board)
calculate_loss	examples/nightmare.c	/^void calculate_loss(float *output, float *delta, int n, float thresh)$/;"	f	signature:(float *output, float *delta, int n, float thresh)
cap	src/demo.c	/^static CvCapture * cap;$/;"	v	file:
cell_cpu	include/darknet.h	/^    float *cell_cpu;$/;"	m	struct:layer	access:public
cell_gpu	include/darknet.h	/^    float *cell_gpu;$/;"	m	struct:layer	access:public
center	include/darknet.h	/^    int center;$/;"	m	struct:load_args	access:public
center	include/darknet.h	/^    int center;$/;"	m	struct:network	access:public
center_crop_image	src/image.c	/^image center_crop_image(image im, int w, int h)$/;"	f	signature:(image im, int w, int h)
change_leaves	src/tree.c	/^void change_leaves(tree *t, char *leaf_list)$/;"	f	signature:(tree *t, char *leaf_list)
channel	src/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon33	access:public
check_error	src/cuda.c	/^void check_error(cudaError_t status)$/;"	f	signature:(cudaError_t status)
child	include/darknet.h	/^    int *child;$/;"	m	struct:__anon5	access:public
class	src/box.c	/^    int class;$/;"	m	struct:__anon36	file:	access:public
class	src/compare.c	/^    int class;$/;"	m	struct:__anon17	file:	access:public
class_scale	include/darknet.h	/^    float class_scale;$/;"	m	struct:layer	access:public
classes	include/darknet.h	/^    int classes;$/;"	m	struct:__anon4	access:public
classes	include/darknet.h	/^    int classes;$/;"	m	struct:layer	access:public
classes	include/darknet.h	/^    int classes;$/;"	m	struct:load_args	access:public
classes	scripts/voc_label.py	/^classes = ["aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"]$/;"	v
classes	src/compare.c	/^    int classes;$/;"	m	struct:__anon17	file:	access:public
classfix	include/darknet.h	/^    int classfix;$/;"	m	struct:layer	access:public
classify	python/darknet.py	/^def classify(net, meta, im):$/;"	f	access:public
coco_classes	examples/coco.c	/^char *coco_classes[] = {"person","bicycle","car","motorcycle","airplane","bus","train","truck","boat","traffic light","fire hydrant","stop sign","parking meter","bench","bird","cat","dog","horse","sheep","cow","elephant","bear","zebra","giraffe","backpack","umbrella","handbag","tie","suitcase","frisbee","skis","snowboard","sports ball","kite","baseball bat","baseball glove","skateboard","surfboard","tennis racket","bottle","wine glass","cup","fork","knife","spoon","bowl","banana","apple","sandwich","orange","broccoli","carrot","hot dog","pizza","donut","cake","chair","couch","potted plant","bed","dining table","toilet","tv","laptop","mouse","remote","keyboard","cell phone","microwave","oven","toaster","sink","refrigerator","book","clock","vase","scissors","teddy bear","hair drier","toothbrush"};$/;"	v
coco_ids	examples/coco.c	/^int coco_ids[] = {1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,70,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90};$/;"	v
coco_ids	examples/detector.c	/^static int coco_ids[] = {1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,70,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90};$/;"	v	file:
code	src/stb_image.h	/^   stbi__uint16 code[256];$/;"	m	struct:__anon24	access:public
code_bits	src/stb_image.h	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon25	access:public
code_buffer	src/stb_image.h	/^   stbi__uint32   code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon25	access:public
code_buffer	src/stb_image.h	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anon29	access:public
codes	src/stb_image.h	/^   stbi__gif_lzw codes[4096];$/;"	m	struct:__anon35	access:public
coeff	src/stb_image.h	/^      short   *coeff;   \/\/ progressive only$/;"	m	struct:__anon25::__anon26	access:public
coeff_h	src/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon25::__anon26	access:public
coeff_w	src/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon25::__anon26	access:public
col2im_add_pixel	src/col2im.c	/^void col2im_add_pixel(float *im, int height, int width, int channels,$/;"	f	signature:(float *im, int height, int width, int channels, int row, int col, int channel, int pad, float val)
col2im_cpu	src/col2im.c	/^void col2im_cpu(float* data_col,$/;"	f	signature:(float* data_col, int channels, int height, int width, int ksize, int stride, int pad, float* data_im)
col2im_gpu	src/col2im_kernels.cu	/^void col2im_gpu(float *data_col,$/;"	f	signature:(float *data_col, int channels, int height, int width, int ksize, int stride, int pad, float *data_im)
col2im_gpu_kernel	src/col2im_kernels.cu	/^__global__ void col2im_gpu_kernel(const int n, const float* data_col,$/;"	f	signature:(const int n, const float* data_col, const int height, const int width, const int ksize, const int pad, const int stride, const int height_col, const int width_col, float *data_im)
collapse_image_layers	src/image.c	/^image collapse_image_layers(image source, int border)$/;"	f	signature:(image source, int border)
collapse_images_horz	src/image.c	/^image collapse_images_horz(image *ims, int n)$/;"	f	signature:(image *ims, int n)
collapse_images_vert	src/image.c	/^image collapse_images_vert(image *ims, int n)$/;"	f	signature:(image *ims, int n)
color_table	src/stb_image.h	/^   stbi_uc *color_table;$/;"	m	struct:__anon35	access:public
colors	src/image.c	/^float colors[6][3] = { {1,0,1}, {0,0,1},{0,1,1},{0,1,0},{1,1,0},{1,0,0} };$/;"	v
cols	include/darknet.h	/^    int rows, cols;$/;"	m	struct:matrix	access:public
combine_cpu	include/darknet.h	/^    float * combine_cpu;$/;"	m	struct:layer	access:public
combine_delta_cpu	include/darknet.h	/^    float * combine_delta_cpu;$/;"	m	struct:layer	access:public
combine_delta_gpu	include/darknet.h	/^    float * combine_delta_gpu;$/;"	m	struct:layer	access:public
combine_gpu	include/darknet.h	/^    float * combine_gpu;$/;"	m	struct:layer	access:public
compare_networks	src/network.c	/^void compare_networks(network n1, network n2, data test)$/;"	f	signature:(network n1, network n2, data test)
composite_3d	src/image.c	/^void composite_3d(char *f1, char *f2, char *out, int delta)$/;"	f	signature:(char *f1, char *f2, char *out, int delta)
composite_image	src/image.c	/^void composite_image(image source, image dest, int dx, int dy)$/;"	f	signature:(image source, image dest, int dx, int dy)
concat	include/darknet.h	/^    float * concat;$/;"	m	struct:layer	access:public
concat_data	src/data.c	/^data concat_data(data d1, data d2)$/;"	f	signature:(data d1, data d2)
concat_datas	src/data.c	/^data concat_datas(data *d, int n)$/;"	f	signature:(data *d, int n)
concat_delta	include/darknet.h	/^    float * concat_delta;$/;"	m	struct:layer	access:public
concat_delta_gpu	include/darknet.h	/^    float * concat_delta_gpu;$/;"	m	struct:layer	access:public
concat_gpu	include/darknet.h	/^    float * concat_gpu;$/;"	m	struct:layer	access:public
concat_matrix	src/data.c	/^matrix concat_matrix(matrix m1, matrix m2)$/;"	f	signature:(matrix m1, matrix m2)
const_cpu	src/blas.c	/^void const_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f	signature:(int N, float ALPHA, float *X, int INCX)
const_gpu	src/blas_kernels.cu	/^extern "C" void const_gpu(int N, float ALPHA, float * X, int INCX)$/;"	f	signature:(int N, float ALPHA, float * X, int INCX)
const_kernel	src/blas_kernels.cu	/^__global__ void const_kernel(int N, float ALPHA, float *X, int INCX)$/;"	f	signature:(int N, float ALPHA, float *X, int INCX)
constrain	src/utils.c	/^float constrain(float min, float max, float a)$/;"	f	signature:(float min, float max, float a)
constrain_gpu	src/blas_kernels.cu	/^extern "C" void constrain_gpu(int N, float ALPHA, float * X, int INCX)$/;"	f	signature:(int N, float ALPHA, float * X, int INCX)
constrain_image	src/image.c	/^void constrain_image(image im)$/;"	f	signature:(image im)
constrain_int	src/utils.c	/^int constrain_int(int a, int min, int max)$/;"	f	signature:(int a, int min, int max)
constrain_kernel	src/blas_kernels.cu	/^__global__ void constrain_kernel(int N, float ALPHA, float *X, int INCX)$/;"	f	signature:(int N, float ALPHA, float *X, int INCX)
convDesc	include/darknet.h	/^    cudnnConvolutionDescriptor_t convDesc;$/;"	m	struct:layer	access:public
convert	scripts/voc_label.py	/^def convert(size, box):$/;"	f	access:public
convert_annotation	scripts/voc_label.py	/^def convert_annotation(year, image_id):$/;"	f	access:public
convolutional_layer	src/convolutional_layer.h	/^typedef layer convolutional_layer;$/;"	t
convolutional_out_height	src/convolutional_layer.c	/^int convolutional_out_height(convolutional_layer l)$/;"	f	signature:(convolutional_layer l)
convolutional_out_width	src/convolutional_layer.c	/^int convolutional_out_width(convolutional_layer l)$/;"	f	signature:(convolutional_layer l)
coord_scale	include/darknet.h	/^    float coord_scale;$/;"	m	struct:layer	access:public
coords	include/darknet.h	/^    int coords;$/;"	m	struct:layer	access:public
copy_cpu	src/blas.c	/^void copy_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f	signature:(int N, float *X, int INCX, float *Y, int INCY)
copy_data	src/data.c	/^data copy_data(data d)$/;"	f	signature:(data d)
copy_gpu	src/blas_kernels.cu	/^extern "C" void copy_gpu(int N, float * X, int INCX, float * Y, int INCY)$/;"	f	signature:(int N, float * X, int INCX, float * Y, int INCY)
copy_gpu_offset	src/blas_kernels.cu	/^extern "C" void copy_gpu_offset(int N, float * X, int OFFX, int INCX, float * Y, int OFFY, int INCY)$/;"	f	signature:(int N, float * X, int OFFX, int INCX, float * Y, int OFFY, int INCY)
copy_image	src/image.c	/^image copy_image(image p)$/;"	f	signature:(image p)
copy_image_into	src/image.c	/^void copy_image_into(image src, image dest)$/;"	f	signature:(image src, image dest)
copy_kernel	src/blas_kernels.cu	/^__global__ void copy_kernel(int N,  float *X, int OFFX, int INCX, float *Y, int OFFY, int INCY)$/;"	f	signature:(int N, float *X, int OFFX, int INCX, float *Y, int OFFY, int INCY)
copy_matrix	src/matrix.c	/^matrix copy_matrix(matrix m)$/;"	f	signature:(matrix m)
copy_string	src/utils.c	/^char *copy_string(char *s)$/;"	f	signature:(char *s)
correct_boxes	src/data.c	/^void correct_boxes(box_label *boxes, int n, float dx, float dy, float sx, float sy, int flip)$/;"	f	signature:(box_label *boxes, int n, float dx, float dy, float sx, float sy, int flip)
correct_region_boxes	src/region_layer.c	/^void correct_region_boxes(box *boxes, int n, int w, int h, int netw, int neth, int relative)$/;"	f	signature:(box *boxes, int n, int w, int h, int netw, int neth, int relative)
cost	include/darknet.h	/^    float * cost;$/;"	m	struct:layer	access:public
cost	include/darknet.h	/^    float *cost;$/;"	m	struct:network	access:public
cost_layer	src/cost_layer.h	/^typedef layer cost_layer;$/;"	t
cost_type	include/darknet.h	/^    COST_TYPE cost_type;$/;"	m	struct:layer	access:public
count_fields	src/utils.c	/^int count_fields(char *line)$/;"	f	signature:(char *line)
crop_image	src/image.c	/^image crop_image(image im, int dx, int dy, int w, int h)$/;"	f	signature:(image im, int dx, int dy, int w, int h)
crop_layer	src/crop_layer.h	/^typedef layer crop_layer;$/;"	t
csv_to_matrix	src/matrix.c	/^matrix csv_to_matrix(char *filename)$/;"	f	signature:(char *filename)
cuda_compare	src/cuda.c	/^float cuda_compare(float *x_gpu, float *x, size_t n, char *s)$/;"	f	signature:(float *x_gpu, float *x, size_t n, char *s)
cuda_free	src/cuda.c	/^void cuda_free(float *x_gpu)$/;"	f	signature:(float *x_gpu)
cuda_get_device	src/cuda.c	/^int cuda_get_device()$/;"	f
cuda_gridsize	src/cuda.c	/^dim3 cuda_gridsize(size_t n){$/;"	f	signature:(size_t n)
cuda_mag_array	src/cuda.c	/^float cuda_mag_array(float *x_gpu, size_t n)$/;"	f	signature:(float *x_gpu, size_t n)
cuda_make_array	src/cuda.c	/^float *cuda_make_array(float *x, size_t n)$/;"	f	signature:(float *x, size_t n)
cuda_make_int_array	src/cuda.c	/^int *cuda_make_int_array(int *x, size_t n)$/;"	f	signature:(int *x, size_t n)
cuda_pull_array	src/cuda.c	/^void cuda_pull_array(float *x_gpu, float *x, size_t n)$/;"	f	signature:(float *x_gpu, float *x, size_t n)
cuda_push_array	src/cuda.c	/^void cuda_push_array(float *x_gpu, float *x, size_t n)$/;"	f	signature:(float *x_gpu, float *x, size_t n)
cuda_random	src/cuda.c	/^void cuda_random(float *x_gpu, size_t n)$/;"	f	signature:(float *x_gpu, size_t n)
cuda_set_device	src/cuda.c	/^void cuda_set_device(int n)$/;"	f	signature:(int n)
cudnn_convolutional_setup	src/convolutional_layer.c	/^void cudnn_convolutional_setup(layer *l)$/;"	f	signature:(layer *l)
cudnn_handle	src/cuda.c	/^cudnnHandle_t cudnn_handle()$/;"	f
cur_x	src/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon35	access:public
cur_y	src/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon35	access:public
current_class	src/compare.c	/^int current_class = 0;$/;"	v
cweights	include/darknet.h	/^    char  * cweights;$/;"	m	struct:layer	access:public
d	include/darknet.h	/^    data *d;$/;"	m	struct:load_args	access:public
d	src/network_kernels.cu	/^    data d;$/;"	m	struct:__anon18	file:	access:public
data	examples/go.c	/^    char **data;$/;"	m	struct:__anon1	file:	access:public
data	include/darknet.h	/^    float *data;$/;"	m	struct:__anon12	access:public
data	include/darknet.h	/^} data;$/;"	t	typeref:struct:__anon14
data	src/stb_image.h	/^      stbi_uc *data;$/;"	m	struct:__anon25::__anon26	access:public
data_type	include/darknet.h	/^} data_type;$/;"	t	typeref:enum:__anon15
dbox	src/box.h	/^} dbox;$/;"	t	typeref:struct:__anon39
dc_cpu	include/darknet.h	/^    float *dc_cpu; $/;"	m	struct:layer	access:public
dc_gpu	include/darknet.h	/^    float *dc_gpu; $/;"	m	struct:layer	access:public
dc_pred	src/stb_image.h	/^      int dc_pred;$/;"	m	struct:__anon25::__anon26	access:public
dcgan_batch	examples/lsd.c	/^void dcgan_batch(network gnet, network anet)$/;"	f	signature:(network gnet, network anet)
dct_bfly32o	src/stb_image.h	2044;"	d
dct_bfly32o	src/stb_image.h	2178;"	d
dct_bfly32o	src/stb_image.h	2230;"	d
dct_bfly32o	src/stb_image.h	2388;"	d
dct_const	src/stb_image.h	2016;"	d
dct_const	src/stb_image.h	2173;"	d
dct_interleave16	src/stb_image.h	2061;"	d
dct_interleave16	src/stb_image.h	2180;"	d
dct_interleave8	src/stb_image.h	2055;"	d
dct_interleave8	src/stb_image.h	2179;"	d
dct_long_mac	src/stb_image.h	2211;"	d
dct_long_mac	src/stb_image.h	2384;"	d
dct_long_mul	src/stb_image.h	2207;"	d
dct_long_mul	src/stb_image.h	2383;"	d
dct_pass	src/stb_image.h	2066;"	d
dct_pass	src/stb_image.h	2181;"	d
dct_pass	src/stb_image.h	2238;"	d
dct_pass	src/stb_image.h	2389;"	d
dct_rot	src/stb_image.h	2020;"	d
dct_rot	src/stb_image.h	2174;"	d
dct_trn16	src/stb_image.h	2298;"	d
dct_trn16	src/stb_image.h	2320;"	d
dct_trn32	src/stb_image.h	2299;"	d
dct_trn32	src/stb_image.h	2321;"	d
dct_trn64	src/stb_image.h	2300;"	d
dct_trn64	src/stb_image.h	2322;"	d
dct_trn8_16	src/stb_image.h	2344;"	d
dct_trn8_16	src/stb_image.h	2379;"	d
dct_trn8_32	src/stb_image.h	2345;"	d
dct_trn8_32	src/stb_image.h	2380;"	d
dct_trn8_8	src/stb_image.h	2343;"	d
dct_trn8_8	src/stb_image.h	2378;"	d
dct_wadd	src/stb_image.h	2034;"	d
dct_wadd	src/stb_image.h	2176;"	d
dct_wadd	src/stb_image.h	2220;"	d
dct_wadd	src/stb_image.h	2386;"	d
dct_widen	src/stb_image.h	2029;"	d
dct_widen	src/stb_image.h	2175;"	d
dct_widen	src/stb_image.h	2215;"	d
dct_widen	src/stb_image.h	2385;"	d
dct_wsub	src/stb_image.h	2039;"	d
dct_wsub	src/stb_image.h	2177;"	d
dct_wsub	src/stb_image.h	2225;"	d
dct_wsub	src/stb_image.h	2387;"	d
ddstTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t dsrcTensorDesc, ddstTensorDesc;$/;"	m	struct:layer	access:public
decay	include/darknet.h	/^    float decay;$/;"	m	struct:__anon9	access:public
decay	include/darknet.h	/^    float decay;$/;"	m	struct:network	access:public
decode_box	src/box.c	/^box decode_box(box b, box anchor)$/;"	f	signature:(box b, box anchor)
deinter_cpu	src/blas.c	/^void deinter_cpu(int NX, float *X, int NY, float *Y, int B, float *OUT)$/;"	f	signature:(int NX, float *X, int NY, float *Y, int B, float *OUT)
deinter_gpu	src/blas_kernels.cu	/^extern "C" void deinter_gpu(int NX, float *X, int NY, float *Y, int B, float *OUT)$/;"	f	signature:(int NX, float *X, int NY, float *Y, int B, float *OUT)
deinter_kernel	src/blas_kernels.cu	/^__global__ void deinter_kernel(int NX, float *X, int NY, float *Y, int B, float *OUT)$/;"	f	signature:(int NX, float *X, int NY, float *Y, int B, float *OUT)
del_arg	src/utils.c	/^void del_arg(int argc, char **argv, int index)$/;"	f	signature:(int argc, char **argv, int index)
delta	include/darknet.h	/^    float * delta;$/;"	m	struct:layer	access:public
delta	include/darknet.h	/^    float *delta;$/;"	m	struct:network	access:public
delta	src/stb_image.h	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon24	access:public
delta_gpu	include/darknet.h	/^    float * delta_gpu;$/;"	m	struct:layer	access:public
delta_gpu	include/darknet.h	/^    float *delta_gpu;$/;"	m	struct:network	access:public
delta_region_box	src/region_layer.c	/^float delta_region_box(box truth, float *x, float *biases, int n, int index, int i, int j, int w, int h, float *delta, float scale, int stride)$/;"	f	signature:(box truth, float *x, float *biases, int n, int index, int i, int j, int w, int h, float *delta, float scale, int stride)
delta_region_class	src/region_layer.c	/^void delta_region_class(float *output, float *delta, int index, int class, int classes, tree *hier, float scale, int stride, float *avg_cat)$/;"	f	signature:(float *output, float *delta, int index, int class, int classes, tree *hier, float scale, int stride, float *avg_cat)
demo	src/demo.c	/^void demo(char *cfgfile, char *weightfile, float thresh, int cam_index, const char *filename, char **names, int classes, int delay, char *prefix, int avg, float hier, int w, int h, int frames, int fullscreen)$/;"	f	signature:(char *cfgfile, char *weightfile, float thresh, int cam_index, const char *filename, char **names, int classes, int delay, char *prefix, int avg, float hier, int w, int h, int frames, int fullscreen)
demo	src/demo.c	/^void demo(char *cfgfile, char *weightfile, float thresh, int cam_index, const char *filename, char **names, int classes, int delay, char *prefix, int avg_frames, float hier, int w, int h, int frames, int fullscreen)$/;"	f	signature:(char *cfgfile, char *weightfile, float thresh, int cam_index, const char *filename, char **names, int classes, int delay, char *prefix, int avg_frames, float hier, int w, int h, int frames, int fullscreen)
demo_alphabet	src/demo.c	/^static image **demo_alphabet;$/;"	v	file:
demo_art	examples/art.c	/^void demo_art(char *cfgfile, char *weightfile, int cam_index)$/;"	f	signature:(char *cfgfile, char *weightfile, int cam_index)
demo_classes	src/demo.c	/^static int demo_classes;$/;"	v	file:
demo_classifier	examples/classifier.c	/^void demo_classifier(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)$/;"	f	signature:(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)
demo_delay	src/demo.c	/^static int demo_delay = 0;$/;"	v	file:
demo_detections	src/demo.c	/^static int demo_detections = 0;$/;"	v	file:
demo_done	src/demo.c	/^static int demo_done = 0;$/;"	v	file:
demo_frame	src/demo.c	/^static int demo_frame = 3;$/;"	v	file:
demo_hier	src/demo.c	/^static float demo_hier = .5;$/;"	v	file:
demo_index	src/demo.c	/^static int demo_index = 0;$/;"	v	file:
demo_names	src/demo.c	/^static char **demo_names;$/;"	v	file:
demo_regressor	examples/regressor.c	/^void demo_regressor(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)$/;"	f	signature:(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)
demo_segmenter	examples/segmenter.c	/^void demo_segmenter(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)$/;"	f	signature:(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)
demo_thresh	src/demo.c	/^static float demo_thresh = 0;$/;"	v	file:
demo_time	src/demo.c	/^double demo_time;$/;"	v
denormalize_connected_layer	src/connected_layer.c	/^void denormalize_connected_layer(layer l)$/;"	f	signature:(layer l)
denormalize_convolutional_layer	src/convolutional_layer.c	/^void denormalize_convolutional_layer(convolutional_layer l)$/;"	f	signature:(convolutional_layer l)
denormalize_deconvolutional_layer	src/deconvolutional_layer.c	/^void denormalize_deconvolutional_layer(layer l)$/;"	f	signature:(layer l)
denormalize_net	examples/darknet.c	/^void denormalize_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f	signature:(char *cfgfile, char *weightfile, char *outfile)
dequant	src/stb_image.h	/^   stbi_uc dequant[4][64];$/;"	m	struct:__anon25	access:public
derivative	src/box.c	/^dbox derivative(box a, box b)$/;"	f	signature:(box a, box b)
detect	python/darknet.py	/^def detect(net, meta, im):$/;"	f	access:public
detect_in_thread	src/demo.c	/^void *detect_in_thread(void *ptr)$/;"	f	signature:(void *ptr)
detect_loop	src/demo.c	/^void *detect_loop(void *ptr)$/;"	f	signature:(void *ptr)
detection_layer	src/detection_layer.h	/^typedef layer detection_layer;$/;"	t
dh	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon39	access:public
dh_cpu	include/darknet.h	/^    float *dh_cpu;$/;"	m	struct:layer	access:public
dh_gpu	include/darknet.h	/^    float *dh_gpu;$/;"	m	struct:layer	access:public
dice_labels	examples/dice.c	/^char *dice_labels[] = {"face1","face2","face3","face4","face5","face6"};$/;"	v
dintersect	src/box.c	/^dbox dintersect(box a, box b)$/;"	f	signature:(box a, box b)
diou	src/box.c	/^dbox diou(box a, box b)$/;"	f	signature:(box a, box b)
display_in_thread	src/demo.c	/^void *display_in_thread(void *ptr)$/;"	f	signature:(void *ptr)
display_loop	src/demo.c	/^void *display_loop(void *ptr)$/;"	f	signature:(void *ptr)
dist_array	src/utils.c	/^float dist_array(float *a, float *b, int n, int sub)$/;"	f	signature:(float *a, float *b, int n, int sub)
distance_from_edge	src/data.h	/^static inline float distance_from_edge(int x, int max)$/;"	f	signature:(int x, int max)
distort_image	src/image.c	/^void distort_image(image im, float hue, float sat, float val)$/;"	f	signature:(image im, float hue, float sat, float val)
distribute_weights	src/network_kernels.cu	/^void distribute_weights(layer l, layer base)$/;"	f	signature:(layer l, layer base)
do_nms	src/box.c	/^void do_nms(box *boxes, float **probs, int total, int classes, float thresh)$/;"	f	signature:(box *boxes, float **probs, int total, int classes, float thresh)
do_nms_obj	src/box.c	/^void do_nms_obj(box *boxes, float **probs, int total, int classes, float thresh)$/;"	f	signature:(box *boxes, float **probs, int total, int classes, float thresh)
do_nms_sort	src/box.c	/^void do_nms_sort(box *boxes, float **probs, int total, int classes, float thresh)$/;"	f	signature:(box *boxes, float **probs, int total, int classes, float thresh)
does_cost	include/darknet.h	/^    int does_cost;$/;"	m	struct:layer	access:public
dontload	include/darknet.h	/^    int dontload;$/;"	m	struct:layer	access:public
dontloadscales	include/darknet.h	/^    int dontloadscales;$/;"	m	struct:layer	access:public
dot	include/darknet.h	/^    float dot;$/;"	m	struct:layer	access:public
dot_cpu	src/blas.c	/^float dot_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f	signature:(int N, float *X, int INCX, float *Y, int INCY)
draw_bbox	src/image.c	/^void draw_bbox(image a, box bbox, int w, float r, float g, float b)$/;"	f	signature:(image a, box bbox, int w, float r, float g, float b)
draw_box	src/image.c	/^void draw_box(image a, int x1, int y1, int x2, int y2, float r, float g, float b)$/;"	f	signature:(image a, int x1, int y1, int x2, int y2, float r, float g, float b)
draw_box_width	src/image.c	/^void draw_box_width(image a, int x1, int y1, int x2, int y2, int w, float r, float g, float b)$/;"	f	signature:(image a, int x1, int y1, int x2, int y2, int w, float r, float g, float b)
draw_detections	src/image.c	/^void draw_detections(image im, int num, float thresh, box *boxes, float **probs, char **names, image **alphabet, int classes)$/;"	f	signature:(image im, int num, float thresh, box *boxes, float **probs, char **names, image **alphabet, int classes)
draw_label	src/image.c	/^void draw_label(image a, int r, int c, image label, const float *rgb)$/;"	f	signature:(image a, int r, int c, image label, const float *rgb)
dropout_layer	src/dropout_layer.h	/^typedef layer dropout_layer;$/;"	t
dsrcTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t dsrcTensorDesc, ddstTensorDesc;$/;"	m	struct:layer	access:public
dstTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t srcTensorDesc, dstTensorDesc;$/;"	m	struct:layer	access:public
dunion	src/box.c	/^dbox dunion(box a, box b)$/;"	f	signature:(box a, box b)
dw	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon39	access:public
dweightDesc	include/darknet.h	/^    cudnnFilterDescriptor_t dweightDesc;$/;"	m	struct:layer	access:public
dx	include/darknet.h	/^    float dx;$/;"	m	struct:__anon11	access:public
dx	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon39	access:public
dy	include/darknet.h	/^    float dy;$/;"	m	struct:__anon11	access:public
dy	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon39	access:public
eflags	src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon35	access:public
elo	src/compare.c	/^    float elo;$/;"	m	struct:__anon17	file:	access:public
elo_comparator	src/compare.c	/^int elo_comparator(const void*a, const void *b)$/;"	f	signature:(const void*a, const void *b)
elos	src/compare.c	/^    float *elos;$/;"	m	struct:__anon17	file:	access:public
elu_activate	src/activations.h	/^static inline float elu_activate(float x){return (x >= 0)*x + (x < 0)*(exp(x)-1);}$/;"	f	signature:(float x)
elu_activate_kernel	src/activation_kernels.cu	/^__device__ float elu_activate_kernel(float x){return (x >= 0)*x + (x < 0)*(exp(x)-1);}$/;"	f	signature:(float x)
elu_gradient	src/activations.h	/^static inline float elu_gradient(float x){return (x >= 0) + (x < 0)*(x + 1);}$/;"	f	signature:(float x)
elu_gradient_kernel	src/activation_kernels.cu	/^__device__ float elu_gradient_kernel(float x){return (x >= 0) + (x < 0)*(x + 1);}$/;"	f	signature:(float x)
embed_image	src/image.c	/^void embed_image(image source, image dest, int dx, int dy)$/;"	f	signature:(image source, image dest, int dx, int dy)
encode_box	src/box.c	/^box encode_box(box b, box anchor)$/;"	f	signature:(box b, box anchor)
engine_go	examples/go.c	/^void engine_go(char *filename, char *weightfile, int multi)$/;"	f	signature:(char *filename, char *weightfile, int multi)
entry_index	src/region_layer.c	/^int entry_index(layer l, int batch, int location, int entry)$/;"	f	signature:(layer l, int batch, int location, int entry)
eob_run	src/stb_image.h	/^   int            eob_run;$/;"	m	struct:__anon25	access:public
eof	src/stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon21	access:public
epoch	include/darknet.h	/^    float epoch;$/;"	m	struct:network	access:public
eps	include/darknet.h	/^    float eps;$/;"	m	struct:__anon9	access:public
eps	include/darknet.h	/^    float eps;$/;"	m	struct:network	access:public
err	src/network_kernels.cu	/^    float *err;$/;"	m	struct:__anon18	file:	access:public
error	src/utils.c	/^void error(const char *s)$/;"	f	signature:(const char *s)
eval_cifar_csv	examples/cifar.c	/^void eval_cifar_csv()$/;"	f
exclusive_image	src/data.c	/^void exclusive_image(image src)$/;"	f	signature:(image src)
expanded	src/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon31	access:public
exposure	include/darknet.h	/^    float exposure;$/;"	m	struct:layer	access:public
exposure	include/darknet.h	/^    float exposure;$/;"	m	struct:load_args	access:public
exposure	include/darknet.h	/^    float exposure;$/;"	m	struct:network	access:public
exposure_image	src/image.c	/^void exposure_image(image im, float sat)$/;"	f	signature:(image im, float sat)
extra	include/darknet.h	/^    int extra;$/;"	m	struct:layer	access:public
extract_cifar	examples/cifar.c	/^void extract_cifar()$/;"	f
extract_voxel	examples/voxel.c	/^void extract_voxel(char *lfile, char *rfile, char *prefix)$/;"	f	signature:(char *lfile, char *rfile, char *prefix)
f_cpu	include/darknet.h	/^    float *f_cpu;$/;"	m	struct:layer	access:public
f_gpu	include/darknet.h	/^    float *f_gpu;$/;"	m	struct:layer	access:public
fast	src/stb_image.h	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon28	access:public
fast	src/stb_image.h	/^   stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anon24	access:public
fast_ac	src/stb_image.h	/^   stbi__int16 fast_ac[4][1 << FAST_BITS];$/;"	m	struct:__anon25	access:public
fast_mean_delta_gpu	src/blas_kernels.cu	/^extern "C" void fast_mean_delta_gpu(float *delta, float *variance, int batch, int filters, int spatial, float *mean_delta)$/;"	f	signature:(float *delta, float *variance, int batch, int filters, int spatial, float *mean_delta)
fast_mean_delta_kernel	src/blas_kernels.cu	/^__global__ void fast_mean_delta_kernel(float *delta, float *variance, int batch, int filters, int spatial, float *mean_delta)$/;"	f	signature:(float *delta, float *variance, int batch, int filters, int spatial, float *mean_delta)
fast_mean_gpu	src/blas_kernels.cu	/^extern "C" void fast_mean_gpu(float *x, int batch, int filters, int spatial, float *mean)$/;"	f	signature:(float *x, int batch, int filters, int spatial, float *mean)
fast_mean_kernel	src/blas_kernels.cu	/^__global__ void  fast_mean_kernel(float *x, int batch, int filters, int spatial, float *mean)$/;"	f	signature:(float *x, int batch, int filters, int spatial, float *mean)
fast_variance_delta_gpu	src/blas_kernels.cu	/^extern "C" void fast_variance_delta_gpu(float *x, float *delta, float *mean, float *variance, int batch, int filters, int spatial, float *variance_delta)$/;"	f	signature:(float *x, float *delta, float *mean, float *variance, int batch, int filters, int spatial, float *variance_delta)
fast_variance_delta_kernel	src/blas_kernels.cu	/^__global__ void  fast_variance_delta_kernel(float *x, float *delta, float *mean, float *variance, int batch, int filters, int spatial, float *variance_delta)$/;"	f	signature:(float *x, float *delta, float *mean, float *variance, int batch, int filters, int spatial, float *variance_delta)
fast_variance_gpu	src/blas_kernels.cu	/^extern "C" void fast_variance_gpu(float *x, float *mean, int batch, int filters, int spatial, float *variance)$/;"	f	signature:(float *x, float *mean, int batch, int filters, int spatial, float *variance)
fast_variance_kernel	src/blas_kernels.cu	/^__global__ void  fast_variance_kernel(float *x, float *mean, int batch, int filters, int spatial, float *variance)$/;"	f	signature:(float *x, float *mean, int batch, int filters, int spatial, float *variance)
fetch_in_thread	src/demo.c	/^void *fetch_in_thread(void *ptr)$/;"	f	signature:(void *ptr)
fgetgo	examples/go.c	/^char *fgetgo(FILE *fp)$/;"	f	signature:(FILE *fp)
fgetl	src/utils.c	/^char *fgetl(FILE *fp)$/;"	f	signature:(FILE *fp)
file_error	src/utils.c	/^void file_error(char *s)$/;"	f	signature:(char *s)
filename	src/compare.c	/^    char *filename;$/;"	m	struct:__anon17	file:	access:public
fill_cpu	src/blas.c	/^void fill_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f	signature:(int N, float ALPHA, float *X, int INCX)
fill_gpu	src/blas_kernels.cu	/^extern "C" void fill_gpu(int N, float ALPHA, float * X, int INCX)$/;"	f	signature:(int N, float ALPHA, float * X, int INCX)
fill_hierarchy	src/data.c	/^void fill_hierarchy(float *truth, int k, tree *hierarchy)$/;"	f	signature:(float *truth, int k, tree *hierarchy)
fill_image	src/image.c	/^void fill_image(image m, float s)$/;"	f	signature:(image m, float s)
fill_image_from_stream	src/image.c	/^int fill_image_from_stream(CvCapture *cap, image im)$/;"	f	signature:(CvCapture *cap, image im)
fill_kernel	src/blas_kernels.cu	/^__global__ void fill_kernel(int N, float ALPHA, float *X, int INCX)$/;"	f	signature:(int N, float ALPHA, float *X, int INCX)
fill_truth	src/data.c	/^void fill_truth(char *path, char **labels, int k, float *truth)$/;"	f	signature:(char *path, char **labels, int k, float *truth)
fill_truth_captcha	src/data.c	/^void fill_truth_captcha(char *path, int n, float *truth)$/;"	f	signature:(char *path, int n, float *truth)
fill_truth_detection	src/data.c	/^void fill_truth_detection(char *path, int num_boxes, float *truth, int classes, int flip, float dx, float dy, float sx, float sy)$/;"	f	signature:(char *path, int num_boxes, float *truth, int classes, int flip, float dx, float dy, float sx, float sy)
fill_truth_region	src/data.c	/^void fill_truth_region(char *path, float *truth, int classes, int num_boxes, int flip, float dx, float dy, float sx, float sy)$/;"	f	signature:(char *path, float *truth, int classes, int num_boxes, int flip, float dx, float dy, float sx, float sy)
fill_truth_swag	src/data.c	/^void fill_truth_swag(char *path, float *truth, int classes, int flip, float dx, float dy, float sx, float sy)$/;"	f	signature:(char *path, float *truth, int classes, int flip, float dx, float dy, float sx, float sy)
find_arg	src/utils.c	/^int find_arg(int argc, char* argv[], char *arg)$/;"	f	signature:(int argc, char* argv[], char *arg)
find_char_arg	src/utils.c	/^char *find_char_arg(int argc, char **argv, char *arg, char *def)$/;"	f	signature:(int argc, char **argv, char *arg, char *def)
find_float_arg	src/utils.c	/^float find_float_arg(int argc, char **argv, char *arg, float def)$/;"	f	signature:(int argc, char **argv, char *arg, float def)
find_int_arg	src/utils.c	/^int find_int_arg(int argc, char **argv, char *arg, int def)$/;"	f	signature:(int argc, char **argv, char *arg, int def)
find_replace	src/utils.c	/^void find_replace(char *str, char *orig, char *rep, char *output)$/;"	f	signature:(char *str, char *orig, char *rep, char *output)
find_replace_paths	src/data.c	/^char **find_replace_paths(char **paths, int n, char *find, char *replace)$/;"	f	signature:(char **paths, int n, char *find, char *replace)
first	src/stb_image.h	/^   stbi_uc first;$/;"	m	struct:__anon34	access:public
first_row_filter	src/stb_image.h	/^static stbi_uc first_row_filter[5] =$/;"	v
firstcode	src/stb_image.h	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anon28	access:public
firstsymbol	src/stb_image.h	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon28	access:public
fix_data_captcha	examples/captcha.c	/^void fix_data_captcha(data d, int mask)$/;"	f	signature:(data d, int mask)
flags	src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon35	access:public
flatten	include/darknet.h	/^    int flatten;$/;"	m	struct:layer	access:public
flatten	src/blas.c	/^void flatten(float *x, int size, int layers, int batch, int forward)$/;"	f	signature:(float *x, int size, int layers, int batch, int forward)
flatten_gpu	src/blas_kernels.cu	/^extern "C" void flatten_gpu(float *x, int spatial, int layers, int batch, int forward, float *out)$/;"	f	signature:(float *x, int spatial, int layers, int batch, int forward, float *out)
flatten_kernel	src/blas_kernels.cu	/^__global__ void flatten_kernel(int N, float *x, int spatial, int layers, int batch, int forward, float *out)$/;"	f	signature:(int N, float *x, int spatial, int layers, int batch, int forward, float *out)
flip	include/darknet.h	/^    int flip;$/;"	m	struct:layer	access:public
flip_board	examples/go.c	/^void flip_board(float *board)$/;"	f	signature:(float *board)
flip_image	src/image.c	/^void flip_image(image a)$/;"	f	signature:(image a)
flipped	include/darknet.h	/^    int flipped;$/;"	m	struct:layer	access:public
float2fixed	src/stb_image.h	3043;"	d
float2fixed	src/stb_image.h	3071;"	d
float_abs_compare	src/cost_layer.c	/^int float_abs_compare (const void * a, const void * b)$/;"	f	signature:(const void * a, const void * b)
float_pair	examples/rnn.c	/^} float_pair;$/;"	t	typeref:struct:__anon3	file:
float_pair	examples/rnn_vid.c	/^} float_pair;$/;"	t	typeref:struct:__anon2	file:
float_to_box	src/box.c	/^box float_to_box(float *f, int stride)$/;"	f	signature:(float *f, int stride)
float_to_image	src/image.c	/^image float_to_image(int w, int h, int c, float *data)$/;"	f	signature:(int w, int h, int c, float *data)
flush_stream_buffer	src/image.c	/^void flush_stream_buffer(CvCapture *cap, int n)$/;"	f	signature:(CvCapture *cap, int n)
font	data/labels/make_labels.py	/^font = 'futura-normal'$/;"	v
forced	include/darknet.h	/^    int forced;$/;"	m	struct:layer	access:public
forgot_delta	include/darknet.h	/^    float * forgot_delta;$/;"	m	struct:layer	access:public
forgot_delta_gpu	include/darknet.h	/^    float * forgot_delta_gpu;$/;"	m	struct:layer	access:public
forgot_state	include/darknet.h	/^    float * forgot_state;$/;"	m	struct:layer	access:public
forgot_state_gpu	include/darknet.h	/^    float * forgot_state_gpu;$/;"	m	struct:layer	access:public
forward	include/darknet.h	/^    void (*forward)   (struct layer, struct network);$/;"	m	struct:layer	access:public
forward_activation_layer	src/activation_layer.c	/^void forward_activation_layer(layer l, network net)$/;"	f	signature:(layer l, network net)
forward_activation_layer_gpu	src/activation_layer.c	/^void forward_activation_layer_gpu(layer l, network net)$/;"	f	signature:(layer l, network net)
forward_avgpool_layer	src/avgpool_layer.c	/^void forward_avgpool_layer(const avgpool_layer l, network net)$/;"	f	signature:(const avgpool_layer l, network net)
forward_avgpool_layer_gpu	src/avgpool_layer_kernels.cu	/^extern "C" void forward_avgpool_layer_gpu(avgpool_layer layer, network net)$/;"	f	signature:(avgpool_layer layer, network net)
forward_avgpool_layer_kernel	src/avgpool_layer_kernels.cu	/^__global__ void forward_avgpool_layer_kernel(int n, int w, int h, int c, float *input, float *output)$/;"	f	signature:(int n, int w, int h, int c, float *input, float *output)
forward_batchnorm_layer	src/batchnorm_layer.c	/^void forward_batchnorm_layer(layer l, network net)$/;"	f	signature:(layer l, network net)
forward_batchnorm_layer_gpu	src/batchnorm_layer.c	/^void forward_batchnorm_layer_gpu(layer l, network net)$/;"	f	signature:(layer l, network net)
forward_connected_layer	src/connected_layer.c	/^void forward_connected_layer(layer l, network net)$/;"	f	signature:(layer l, network net)
forward_connected_layer_gpu	src/connected_layer.c	/^void forward_connected_layer_gpu(layer l, network net)$/;"	f	signature:(layer l, network net)
forward_convolutional_layer	src/convolutional_layer.c	/^void forward_convolutional_layer(convolutional_layer l, network net)$/;"	f	signature:(convolutional_layer l, network net)
forward_convolutional_layer_gpu	src/convolutional_kernels.cu	/^void forward_convolutional_layer_gpu(convolutional_layer l, network net)$/;"	f	signature:(convolutional_layer l, network net)
forward_cost_layer	src/cost_layer.c	/^void forward_cost_layer(cost_layer l, network net)$/;"	f	signature:(cost_layer l, network net)
forward_cost_layer_gpu	src/cost_layer.c	/^void forward_cost_layer_gpu(cost_layer l, network net)$/;"	f	signature:(cost_layer l, network net)
forward_crnn_layer	src/crnn_layer.c	/^void forward_crnn_layer(layer l, network net)$/;"	f	signature:(layer l, network net)
forward_crnn_layer_gpu	src/crnn_layer.c	/^void forward_crnn_layer_gpu(layer l, network net)$/;"	f	signature:(layer l, network net)
forward_crop_layer	src/crop_layer.c	/^void forward_crop_layer(const crop_layer l, network net)$/;"	f	signature:(const crop_layer l, network net)
forward_crop_layer_gpu	src/crop_layer_kernels.cu	/^extern "C" void forward_crop_layer_gpu(crop_layer layer, network net)$/;"	f	signature:(crop_layer layer, network net)
forward_crop_layer_kernel	src/crop_layer_kernels.cu	/^__global__ void forward_crop_layer_kernel(float *input, float *rand, int size, int c, int h, int w, int crop_height, int crop_width, int train, int flip, float angle, float *output)$/;"	f	signature:(float *input, float *rand, int size, int c, int h, int w, int crop_height, int crop_width, int train, int flip, float angle, float *output)
forward_deconvolutional_layer	src/deconvolutional_layer.c	/^void forward_deconvolutional_layer(const layer l, network net)$/;"	f	signature:(const layer l, network net)
forward_deconvolutional_layer_gpu	src/deconvolutional_kernels.cu	/^extern "C" void forward_deconvolutional_layer_gpu(layer l, network net)$/;"	f	signature:(layer l, network net)
forward_detection_layer	src/detection_layer.c	/^void forward_detection_layer(const detection_layer l, network net)$/;"	f	signature:(const detection_layer l, network net)
forward_detection_layer_gpu	src/detection_layer.c	/^void forward_detection_layer_gpu(const detection_layer l, network net)$/;"	f	signature:(const detection_layer l, network net)
forward_dropout_layer	src/dropout_layer.c	/^void forward_dropout_layer(dropout_layer l, network net)$/;"	f	signature:(dropout_layer l, network net)
forward_dropout_layer_gpu	src/dropout_layer_kernels.cu	/^void forward_dropout_layer_gpu(dropout_layer layer, network net)$/;"	f	signature:(dropout_layer layer, network net)
forward_gpu	include/darknet.h	/^    void (*forward_gpu)   (struct layer, struct network);$/;"	m	struct:layer	access:public
forward_gru_layer	src/gru_layer.c	/^void forward_gru_layer(layer l, network net)$/;"	f	signature:(layer l, network net)
forward_gru_layer_gpu	src/gru_layer.c	/^void forward_gru_layer_gpu(layer l, network net)$/;"	f	signature:(layer l, network net)
forward_local_layer	src/local_layer.c	/^void forward_local_layer(const local_layer l, network net)$/;"	f	signature:(const local_layer l, network net)
forward_local_layer_gpu	src/local_layer.c	/^void forward_local_layer_gpu(const local_layer l, network net)$/;"	f	signature:(const local_layer l, network net)
forward_lstm_layer	src/lstm_layer.c	/^void forward_lstm_layer(layer l, network state)$/;"	f	signature:(layer l, network state)
forward_lstm_layer_gpu	src/lstm_layer.c	/^void forward_lstm_layer_gpu(layer l, network state)$/;"	f	signature:(layer l, network state)
forward_maxpool_layer	src/maxpool_layer.c	/^void forward_maxpool_layer(const maxpool_layer l, network net)$/;"	f	signature:(const maxpool_layer l, network net)
forward_maxpool_layer_gpu	src/maxpool_layer_kernels.cu	/^extern "C" void forward_maxpool_layer_gpu(maxpool_layer layer, network net)$/;"	f	signature:(maxpool_layer layer, network net)
forward_maxpool_layer_kernel	src/maxpool_layer_kernels.cu	/^__global__ void forward_maxpool_layer_kernel(int n, int in_h, int in_w, int in_c, int stride, int size, int pad, float *input, float *output, int *indexes)$/;"	f	signature:(int n, int in_h, int in_w, int in_c, int stride, int size, int pad, float *input, float *output, int *indexes)
forward_network	src/network.c	/^void forward_network(network net)$/;"	f	signature:(network net)
forward_network_gpu	src/network_kernels.cu	/^void forward_network_gpu(network net)$/;"	f	signature:(network net)
forward_normalization_layer	src/normalization_layer.c	/^void forward_normalization_layer(const layer layer, network net)$/;"	f	signature:(const layer layer, network net)
forward_normalization_layer_gpu	src/normalization_layer.c	/^void forward_normalization_layer_gpu(const layer layer, network net)$/;"	f	signature:(const layer layer, network net)
forward_region_layer	src/region_layer.c	/^void forward_region_layer(const layer l, network net)$/;"	f	signature:(const layer l, network net)
forward_region_layer_gpu	src/region_layer.c	/^void forward_region_layer_gpu(const layer l, network net)$/;"	f	signature:(const layer l, network net)
forward_reorg_layer	src/reorg_layer.c	/^void forward_reorg_layer(const layer l, network net)$/;"	f	signature:(const layer l, network net)
forward_reorg_layer_gpu	src/reorg_layer.c	/^void forward_reorg_layer_gpu(layer l, network net)$/;"	f	signature:(layer l, network net)
forward_rnn_layer	src/rnn_layer.c	/^void forward_rnn_layer(layer l, network net)$/;"	f	signature:(layer l, network net)
forward_rnn_layer_gpu	src/rnn_layer.c	/^void forward_rnn_layer_gpu(layer l, network net)$/;"	f	signature:(layer l, network net)
forward_route_layer	src/route_layer.c	/^void forward_route_layer(const route_layer l, network net)$/;"	f	signature:(const route_layer l, network net)
forward_route_layer_gpu	src/route_layer.c	/^void forward_route_layer_gpu(const route_layer l, network net)$/;"	f	signature:(const route_layer l, network net)
forward_shortcut_layer	src/shortcut_layer.c	/^void forward_shortcut_layer(const layer l, network net)$/;"	f	signature:(const layer l, network net)
forward_shortcut_layer_gpu	src/shortcut_layer.c	/^void forward_shortcut_layer_gpu(const layer l, network net)$/;"	f	signature:(const layer l, network net)
forward_softmax_layer	src/softmax_layer.c	/^void forward_softmax_layer(const softmax_layer l, network net)$/;"	f	signature:(const softmax_layer l, network net)
forward_softmax_layer_gpu	src/softmax_layer.c	/^void forward_softmax_layer_gpu(const softmax_layer l, network net)$/;"	f	signature:(const softmax_layer l, network net)
fps	src/demo.c	/^static float fps = 0;$/;"	v	file:
free_data	src/data.c	/^void free_data(data d)$/;"	f	signature:(data d)
free_image	src/image.c	/^void free_image(image m)$/;"	f	signature:(image m)
free_layer	src/layer.c	/^void free_layer(layer l)$/;"	f	signature:(layer l)
free_list	src/list.c	/^void free_list(list *l)$/;"	f	signature:(list *l)
free_list_contents	src/list.c	/^void free_list_contents(list *l)$/;"	f	signature:(list *l)
free_matrix	src/matrix.c	/^void free_matrix(matrix m)$/;"	f	signature:(matrix m)
free_network	src/network.c	/^void free_network(network net)$/;"	f	signature:(network net)
free_node	src/list.c	/^void free_node(node *n)$/;"	f	signature:(node *n)
free_ptrs	src/utils.c	/^void free_ptrs(void **ptrs, int n)$/;"	f	signature:(void **ptrs, int n)
free_section	src/parser.c	/^void free_section(section *s)$/;"	f	signature:(section *s)
front	include/darknet.h	/^    node *front;$/;"	m	struct:list	access:public
fw_algo	include/darknet.h	/^    cudnnConvolutionFwdAlgo_t fw_algo;$/;"	m	struct:layer	access:public
g_cpu	include/darknet.h	/^    float *g_cpu;$/;"	m	struct:layer	access:public
g_gpu	include/darknet.h	/^    float *g_gpu;$/;"	m	struct:layer	access:public
gamma	include/darknet.h	/^    float gamma;$/;"	m	struct:network	access:public
gate_delta_gpu	include/darknet.h	/^    float * gate_delta_gpu;$/;"	m	struct:layer	access:public
gate_gpu	include/darknet.h	/^    float * gate_gpu;$/;"	m	struct:layer	access:public
gemm	src/gemm.c	/^void gemm(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f	signature:(int TA, int TB, int M, int N, int K, float ALPHA, float *A, int lda, float *B, int ldb, float BETA, float *C, int ldc)
gemm_bin	src/gemm.c	/^void gemm_bin(int M, int N, int K, float ALPHA, $/;"	f	signature:(int M, int N, int K, float ALPHA, char *A, int lda, float *B, int ldb, float *C, int ldc)
gemm_cpu	src/gemm.c	/^void gemm_cpu(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f	signature:(int TA, int TB, int M, int N, int K, float ALPHA, float *A, int lda, float *B, int ldb, float BETA, float *C, int ldc)
gemm_gpu	src/gemm.c	/^void gemm_gpu(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f	signature:(int TA, int TB, int M, int N, int K, float ALPHA, float *A_gpu, int lda, float *B_gpu, int ldb, float BETA, float *C_gpu, int ldc)
gemm_nn	src/gemm.c	/^void gemm_nn(int M, int N, int K, float ALPHA, $/;"	f	signature:(int M, int N, int K, float ALPHA, float *A, int lda, float *B, int ldb, float *C, int ldc)
gemm_nt	src/gemm.c	/^void gemm_nt(int M, int N, int K, float ALPHA, $/;"	f	signature:(int M, int N, int K, float ALPHA, float *A, int lda, float *B, int ldb, float *C, int ldc)
gemm_tn	src/gemm.c	/^void gemm_tn(int M, int N, int K, float ALPHA, $/;"	f	signature:(int M, int N, int K, float ALPHA, float *A, int lda, float *B, int ldb, float *C, int ldc)
gemm_tt	src/gemm.c	/^void gemm_tt(int M, int N, int K, float ALPHA, $/;"	f	signature:(int M, int N, int K, float ALPHA, float *A, int lda, float *B, int ldb, float *C, int ldc)
generate_move	examples/go.c	/^int generate_move(network net, int player, float *board, int multi, float thresh, float temp, char *ko, int print)$/;"	f	signature:(network net, int player, float *board, int multi, float thresh, float temp, char *ko, int print)
generate_vid_rnn	examples/rnn_vid.c	/^void generate_vid_rnn(char *cfgfile, char *weightfile)$/;"	f	signature:(char *cfgfile, char *weightfile)
get_activation	src/activations.c	/^ACTIVATION get_activation(char *s)$/;"	f	signature:(char *s)
get_activation_string	src/activations.c	/^char *get_activation_string(ACTIVATION a)$/;"	f	signature:(ACTIVATION a)
get_base_args	src/network.c	/^load_args get_base_args(network net)$/;"	f	signature:(network net)
get_coco_image_id	examples/coco.c	/^int get_coco_image_id(char *filename)$/;"	f	signature:(char *filename)
get_coco_image_id	examples/detector.c	/^static int get_coco_image_id(char *filename)$/;"	f	file:	signature:(char *filename)
get_color	src/image.c	/^float get_color(int c, int x, int max)$/;"	f	signature:(int c, int x, int max)
get_convolutional_delta	src/convolutional_layer.c	/^image get_convolutional_delta(convolutional_layer l)$/;"	f	signature:(convolutional_layer l)
get_convolutional_image	src/convolutional_layer.c	/^image get_convolutional_image(convolutional_layer l)$/;"	f	signature:(convolutional_layer l)
get_convolutional_weight	src/convolutional_layer.c	/^image get_convolutional_weight(convolutional_layer l, int i)$/;"	f	signature:(convolutional_layer l, int i)
get_cost_string	src/cost_layer.c	/^char *get_cost_string(COST_TYPE a)$/;"	f	signature:(COST_TYPE a)
get_cost_type	src/cost_layer.c	/^COST_TYPE get_cost_type(char *s)$/;"	f	signature:(char *s)
get_crop_image	src/crop_layer.c	/^image get_crop_image(crop_layer l)$/;"	f	signature:(crop_layer l)
get_current_batch	src/network.c	/^size_t get_current_batch(network net)$/;"	f	signature:(network net)
get_current_rate	src/network.c	/^float get_current_rate(network net)$/;"	f	signature:(network net)
get_data_part	src/data.c	/^data get_data_part(data d, int part, int total)$/;"	f	signature:(data d, int part, int total)
get_detection_boxes	src/detection_layer.c	/^void get_detection_boxes(layer l, int w, int h, float thresh, float **probs, box *boxes, int only_objectness)$/;"	f	signature:(layer l, int w, int h, float thresh, float **probs, box *boxes, int only_objectness)
get_hierarchy_probability	src/tree.c	/^float get_hierarchy_probability(float *x, tree *hier, int c, int stride)$/;"	f	signature:(float *x, tree *hier, int c, int stride)
get_image_from_stream	src/image.c	/^image get_image_from_stream(CvCapture *cap)$/;"	f	signature:(CvCapture *cap)
get_image_layer	src/image.c	/^image get_image_layer(image m, int l)$/;"	f	signature:(image m, int l)
get_label	src/image.c	/^image get_label(image **characters, char *string, int size)$/;"	f	signature:(image **characters, char *string, int size)
get_labels	src/data.c	/^char **get_labels(char *filename)$/;"	f	signature:(char *filename)
get_layer_string	src/network.c	/^char *get_layer_string(LAYER_TYPE a)$/;"	f	signature:(LAYER_TYPE a)
get_maxpool_delta	src/maxpool_layer.c	/^image get_maxpool_delta(maxpool_layer l)$/;"	f	signature:(maxpool_layer l)
get_maxpool_image	src/maxpool_layer.c	/^image get_maxpool_image(maxpool_layer l)$/;"	f	signature:(maxpool_layer l)
get_metadata	src/option_list.c	/^metadata get_metadata(char *file)$/;"	f	signature:(char *file)
get_network_detection_layer	src/network.c	/^detection_layer get_network_detection_layer(network net)$/;"	f	signature:(network net)
get_network_image	src/network.c	/^image get_network_image(network net)$/;"	f	signature:(network net)
get_network_image_layer	src/network.c	/^image get_network_image_layer(network net, int i)$/;"	f	signature:(network net, int i)
get_network_output_layer	src/network.c	/^layer get_network_output_layer(network net)$/;"	f	signature:(network net)
get_next_batch	src/data.c	/^void get_next_batch(data d, int n, int offset, float *X, float *y)$/;"	f	signature:(data d, int n, int offset, float *X, float *y)
get_paths	src/data.c	/^list *get_paths(char *filename)$/;"	f	signature:(char *filename)
get_pixel	src/image.c	/^float get_pixel(image m, int x, int y, int c)$/;"	f	signature:(image m, int x, int y, int c)
get_pixel_extend	src/image.c	/^float get_pixel_extend(image m, int x, int y, int c)$/;"	f	signature:(image m, int x, int y, int c)
get_pixel_kernel	src/crop_layer_kernels.cu	/^__device__ float get_pixel_kernel(float *image, int w, int h, int x, int y, int c)$/;"	f	signature:(float *image, int w, int h, int x, int y, int c)
get_policy	src/parser.c	/^learning_rate_policy get_policy(char *s)$/;"	f	signature:(char *s)
get_predicted_class_network	src/network.c	/^int get_predicted_class_network(network net)$/;"	f	signature:(network net)
get_random_batch	src/data.c	/^void get_random_batch(data d, int n, float *X, float *y)$/;"	f	signature:(data d, int n, float *X, float *y)
get_random_data	src/data.c	/^data get_random_data(data d, int num)$/;"	f	signature:(data d, int num)
get_random_paths	src/data.c	/^char **get_random_paths(char **paths, int n, int m)$/;"	f	signature:(char **paths, int n, int m)
get_region_box	src/region_layer.c	/^box get_region_box(float *x, float *biases, int n, int index, int i, int j, int w, int h, int stride)$/;"	f	signature:(float *x, float *biases, int n, int index, int i, int j, int w, int h, int stride)
get_region_boxes	src/region_layer.c	/^void get_region_boxes(layer l, int w, int h, int netw, int neth, float thresh, float **probs, box *boxes, int only_objectness, int *map, float tree_thresh, int relative)$/;"	f	signature:(layer l, int w, int h, int netw, int neth, float thresh, float **probs, box *boxes, int only_objectness, int *map, float tree_thresh, int relative)
get_regression_values	examples/classifier.c	/^float *get_regression_values(char **labels, int n)$/;"	f	signature:(char **labels, int n)
get_rnn_data	examples/rnn.c	/^float_pair get_rnn_data(unsigned char *text, size_t *offsets, int characters, size_t len, int batch, int steps)$/;"	f	signature:(unsigned char *text, size_t *offsets, int characters, size_t len, int batch, int steps)
get_rnn_token_data	examples/rnn.c	/^float_pair get_rnn_token_data(int *tokens, size_t *offsets, int characters, size_t len, int batch, int steps)$/;"	f	signature:(int *tokens, size_t *offsets, int characters, size_t len, int batch, int steps)
get_rnn_vid_data	examples/rnn_vid.c	/^float_pair get_rnn_vid_data(network net, char **files, int n, int batch, int steps)$/;"	f	signature:(network net, char **files, int n, int batch, int steps)
get_segmentation_image	src/data.c	/^image get_segmentation_image(char *path, int w, int h, int classes)$/;"	f	signature:(char *path, int w, int h, int classes)
get_segmentation_image2	src/data.c	/^image get_segmentation_image2(char *path, int w, int h, int classes)$/;"	f	signature:(char *path, int w, int h, int classes)
get_wall_time	src/demo.c	/^double get_wall_time()$/;"	f
get_weights	src/convolutional_layer.c	/^image *get_weights(convolutional_layer l)$/;"	f	signature:(convolutional_layer l)
get_workspace_size	src/convolutional_layer.c	/^static size_t get_workspace_size(layer l){$/;"	f	file:	signature:(layer l)
get_workspace_size	src/deconvolutional_layer.c	/^static size_t get_workspace_size(layer l){$/;"	f	file:	signature:(layer l)
ghost_image	src/image.c	/^void ghost_image(image source, image dest, int dx, int dy)$/;"	f	signature:(image source, image dest, int dx, int dy)
gpu_index	include/darknet.h	/^    int gpu_index;$/;"	m	struct:network	access:public
gpu_index	src/cuda.c	/^int gpu_index = 0;$/;"	v
gradient	src/activations.c	/^float gradient(float x, ACTIVATION a)$/;"	f	signature:(float x, ACTIVATION a)
gradient_array	src/activations.c	/^void gradient_array(const float *x, const int n, const ACTIVATION a, float *delta)$/;"	f	signature:(const float *x, const int n, const ACTIVATION a, float *delta)
gradient_array_gpu	src/activation_kernels.cu	/^extern "C" void gradient_array_gpu(float *x, int n, ACTIVATION a, float *delta) $/;"	f	signature:(float *x, int n, ACTIVATION a, float *delta)
gradient_array_kernel	src/activation_kernels.cu	/^__global__ void gradient_array_kernel(float *x, int n, ACTIVATION a, float *delta)$/;"	f	signature:(float *x, int n, ACTIVATION a, float *delta)
gradient_kernel	src/activation_kernels.cu	/^__device__ float gradient_kernel(float x, ACTIVATION a)$/;"	f	signature:(float x, ACTIVATION a)
grayscale_image	src/image.c	/^image grayscale_image(image im)$/;"	f	signature:(image im)
grayscale_image_3c	src/image.c	/^void grayscale_image_3c(image im)$/;"	f	signature:(image im)
group	include/darknet.h	/^    int *group;$/;"	m	struct:__anon5	access:public
group_offset	include/darknet.h	/^    int *group_offset;$/;"	m	struct:__anon5	access:public
group_size	include/darknet.h	/^    int *group_size;$/;"	m	struct:__anon5	access:public
groups	include/darknet.h	/^    int groups;$/;"	m	struct:__anon5	access:public
groups	include/darknet.h	/^    int groups;$/;"	m	struct:layer	access:public
gun_classifier	examples/classifier.c	/^void gun_classifier(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)$/;"	f	signature:(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)
h	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:__anon13	access:public
h	include/darknet.h	/^    float x,y,w,h;$/;"	m	struct:__anon16	access:public
h	include/darknet.h	/^    int h, w, c;$/;"	m	struct:network	access:public
h	include/darknet.h	/^    int h,w,c;$/;"	m	struct:layer	access:public
h	include/darknet.h	/^    int h;$/;"	m	struct:__anon11	access:public
h	include/darknet.h	/^    int h;$/;"	m	struct:__anon12	access:public
h	include/darknet.h	/^    int h;$/;"	m	struct:load_args	access:public
h	include/darknet.h	/^    int w, h;$/;"	m	struct:__anon14	access:public
h	src/parser.c	/^    int h;$/;"	m	struct:size_params	file:	access:public
h	src/stb_image.h	/^      int h,v;$/;"	m	struct:__anon25::__anon26	access:public
h	src/stb_image.h	/^   int w,h;$/;"	m	struct:__anon35	access:public
h2	src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon25::__anon26	access:public
h_cpu	include/darknet.h	/^    float *h_cpu;$/;"	m	struct:layer	access:public
h_gpu	include/darknet.h	/^    float *h_gpu;$/;"	m	struct:layer	access:public
ha	src/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon25::__anon26	access:public
hardtan_activate	src/activations.h	/^static inline float hardtan_activate(float x)$/;"	f	signature:(float x)
hardtan_activate_kernel	src/activation_kernels.cu	/^__device__ float hardtan_activate_kernel(float x)$/;"	f	signature:(float x)
hardtan_gradient	src/activations.h	/^static inline float hardtan_gradient(float x)$/;"	f	signature:(float x)
hardtan_gradient_kernel	src/activation_kernels.cu	/^__device__ float hardtan_gradient_kernel(float x)$/;"	f	signature:(float x)
harmless_update_network_gpu	src/network_kernels.cu	/^void harmless_update_network_gpu(network net)$/;"	f	signature:(network net)
hd	src/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon25::__anon26	access:public
hh_cpu	include/darknet.h	/^    float *hh_cpu;$/;"	m	struct:layer	access:public
hh_gpu	include/darknet.h	/^    float *hh_gpu;$/;"	m	struct:layer	access:public
hidden	include/darknet.h	/^    int hidden;$/;"	m	struct:layer	access:public
hierarchy	include/darknet.h	/^    tree *hierarchy;$/;"	m	struct:load_args	access:public
hierarchy	include/darknet.h	/^    tree *hierarchy;$/;"	m	struct:network	access:public
hierarchy_predictions	src/tree.c	/^void hierarchy_predictions(float *predictions, int n, tree *hier, int only_leaves, int stride)$/;"	f	signature:(float *predictions, int n, tree *hier, int only_leaves, int stride)
hierarchy_top_prediction	src/tree.c	/^int hierarchy_top_prediction(float *predictions, tree *hier, float thresh, int stride)$/;"	f	signature:(float *predictions, tree *hier, float thresh, int stride)
hold_out_matrix	src/matrix.c	/^matrix hold_out_matrix(matrix *m, int n)$/;"	f	signature:(matrix *m, int n)
hs	src/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon27	access:public
hsv_to_rgb	src/image.c	/^void hsv_to_rgb(image im)$/;"	f	signature:(image im)
hsv_to_rgb_kernel	src/crop_layer_kernels.cu	/^__device__ float3 hsv_to_rgb_kernel(float3 hsv)$/;"	f	signature:(float3 hsv)
hue	include/darknet.h	/^    float hue;$/;"	m	struct:load_args	access:public
hue	include/darknet.h	/^    float hue;$/;"	m	struct:network	access:public
hue_image	src/image.c	/^void hue_image(image im, float hue)$/;"	f	signature:(image im, float hue)
huff_ac	src/stb_image.h	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anon25	access:public
huff_dc	src/stb_image.h	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anon25	access:public
i_cpu	include/darknet.h	/^    float *i_cpu;$/;"	m	struct:layer	access:public
i_gpu	include/darknet.h	/^    float *i_gpu;$/;"	m	struct:layer	access:public
id	include/darknet.h	/^    int id;$/;"	m	struct:__anon16	access:public
id	src/stb_image.h	/^      int id;$/;"	m	struct:__anon25::__anon26	access:public
idata	src/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon31	access:public
idct_block_kernel	src/stb_image.h	/^   void (*idct_block_kernel)(stbi_uc *out, int out_stride, short data[64]);$/;"	m	struct:__anon25	access:public
im	include/darknet.h	/^    image *im;$/;"	m	struct:load_args	access:public
im	python/darknet.py	/^    im = load_img("data\/wolf.jpg")$/;"	v
im2col_cpu	src/im2col.c	/^void im2col_cpu(float* data_im,$/;"	f	signature:(float* data_im, int channels, int height, int width, int ksize, int stride, int pad, float* data_col)
im2col_get_pixel	src/im2col.c	/^float im2col_get_pixel(float *im, int height, int width, int channels,$/;"	f	signature:(float *im, int height, int width, int channels, int row, int col, int channel, int pad)
im2col_gpu	src/im2col_kernels.cu	/^void im2col_gpu(float *im,$/;"	f	signature:(float *im, int channels, int height, int width, int ksize, int stride, int pad, float *data_col)
im2col_gpu_kernel	src/im2col_kernels.cu	/^__global__ void im2col_gpu_kernel(const int n, const float* data_im,$/;"	f	signature:(const int n, const float* data_im, const int height, const int width, const int ksize, const int pad, const int stride, const int height_col, const int width_col, float *data_col)
image	include/darknet.h	/^} image;$/;"	t	typeref:struct:__anon12
image_distance	src/image.c	/^image image_distance(image a, image b)$/;"	f	signature:(image a, image b)
image_ids	scripts/voc_label.py	/^    image_ids = open('VOCdevkit\/VOC%s\/ImageSets\/Main\/%s.txt'%(year, image_set)).read().strip().split()$/;"	v
img_buffer	src/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon22	access:public
img_buffer_end	src/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon22	access:public
img_buffer_original	src/stb_image.h	/^   stbi_uc *img_buffer_original;$/;"	m	struct:__anon22	access:public
img_comp	src/stb_image.h	/^   } img_comp[4];$/;"	m	struct:__anon25	typeref:struct:__anon25::__anon26	access:public
img_h_max	src/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon25	access:public
img_mcu_h	src/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon25	access:public
img_mcu_w	src/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon25	access:public
img_mcu_x	src/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon25	access:public
img_mcu_y	src/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon25	access:public
img_n	src/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon22	access:public
img_out_n	src/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon22	access:public
img_v_max	src/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon25	access:public
img_x	src/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon22	access:public
img_y	src/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon22	access:public
increment_layer	src/crnn_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:	signature:(layer *l, int steps)
increment_layer	src/gru_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:	signature:(layer *l, int steps)
increment_layer	src/lstm_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:	signature:(layer *l, int steps)
increment_layer	src/rnn_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:	signature:(layer *l, int steps)
index	include/darknet.h	/^    int index;$/;"	m	struct:layer	access:public
index	include/darknet.h	/^    int index;$/;"	m	struct:network	access:public
index	src/box.c	/^    int index;$/;"	m	struct:__anon36	file:	access:public
index	src/parser.c	/^    int index;$/;"	m	struct:size_params	file:	access:public
indexes	include/darknet.h	/^    int   * indexes;$/;"	m	struct:layer	access:public
indexes_gpu	include/darknet.h	/^    int *indexes_gpu;$/;"	m	struct:layer	access:public
input	include/darknet.h	/^    float *input;$/;"	m	struct:network	access:public
input_gate_layer	include/darknet.h	/^    struct layer *input_gate_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
input_gpu	include/darknet.h	/^    float *input_gpu;$/;"	m	struct:network	access:public
input_h_layer	include/darknet.h	/^    struct layer *input_h_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
input_layer	include/darknet.h	/^    struct layer *input_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
input_layers	include/darknet.h	/^    int   * input_layers;$/;"	m	struct:layer	access:public
input_r_layer	include/darknet.h	/^    struct layer *input_r_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
input_save_layer	include/darknet.h	/^    struct layer *input_save_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
input_sizes	include/darknet.h	/^    int   * input_sizes;$/;"	m	struct:layer	access:public
input_state_layer	include/darknet.h	/^    struct layer *input_state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
input_z_layer	include/darknet.h	/^    struct layer *input_z_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
inputs	include/darknet.h	/^    int inputs;$/;"	m	struct:layer	access:public
inputs	include/darknet.h	/^    int inputs;$/;"	m	struct:network	access:public
inputs	src/parser.c	/^    int inputs;$/;"	m	struct:size_params	file:	access:public
int_to_alphanum	src/utils.c	/^char int_to_alphanum(int i)$/;"	f	signature:(int i)
inter_cpu	src/blas.c	/^void inter_cpu(int NX, float *X, int NY, float *Y, int B, float *OUT)$/;"	f	signature:(int NX, float *X, int NY, float *Y, int B, float *OUT)
inter_gpu	src/blas_kernels.cu	/^extern "C" void inter_gpu(int NX, float *X, int NY, float *Y, int B, float *OUT)$/;"	f	signature:(int NX, float *X, int NY, float *Y, int B, float *OUT)
inter_kernel	src/blas_kernels.cu	/^__global__ void inter_kernel(int NX, float *X, int NY, float *Y, int B, float *OUT)$/;"	f	signature:(int NX, float *X, int NY, float *Y, int B, float *OUT)
inverted	examples/go.c	/^int inverted = 1;$/;"	v
io	src/stb_image.h	/^   stbi_io_callbacks io;$/;"	m	struct:__anon22	access:public
io_user_data	src/stb_image.h	/^   void *io_user_data;$/;"	m	struct:__anon22	access:public
ipl	src/demo.c	/^static IplImage  * ipl;$/;"	v	file:
ipl_into_image	src/image.c	/^void ipl_into_image(IplImage* src, image im)$/;"	f	signature:(IplImage* src, image im)
ipl_to_image	src/image.c	/^image ipl_to_image(IplImage* src)$/;"	f	signature:(IplImage* src)
is_network	src/parser.c	/^int is_network(section *s)$/;"	f	signature:(section *s)
j	src/network_kernels.cu	/^    int j;$/;"	m	struct:__anon19	file:	access:public
jitter	include/darknet.h	/^    float jitter;$/;"	m	struct:layer	access:public
jitter	include/darknet.h	/^    float jitter;$/;"	m	struct:load_args	access:public
joint	include/darknet.h	/^    int joint;$/;"	m	struct:layer	access:public
kappa	include/darknet.h	/^    float kappa;$/;"	m	struct:layer	access:public
key	src/option_list.h	/^    char *key;$/;"	m	struct:__anon37	access:public
kvp	src/option_list.h	/^} kvp;$/;"	t	typeref:struct:__anon37
l1_cpu	src/blas.c	/^void l1_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f	signature:(int n, float *pred, float *truth, float *delta, float *error)
l1_gpu	src/blas_kernels.cu	/^extern "C" void l1_gpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f	signature:(int n, float *pred, float *truth, float *delta, float *error)
l1_kernel	src/blas_kernels.cu	/^__global__ void l1_kernel(int n, float *pred, float *truth, float *delta, float *error)$/;"	f	signature:(int n, float *pred, float *truth, float *delta, float *error)
l2_cpu	src/blas.c	/^void l2_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f	signature:(int n, float *pred, float *truth, float *delta, float *error)
l2_gpu	src/blas_kernels.cu	/^extern "C" void l2_gpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f	signature:(int n, float *pred, float *truth, float *delta, float *error)
l2_kernel	src/blas_kernels.cu	/^__global__ void l2_kernel(int n, float *pred, float *truth, float *delta, float *error)$/;"	f	signature:(int n, float *pred, float *truth, float *delta, float *error)
label_classifier	examples/classifier.c	/^void label_classifier(char *datacfg, char *filename, char *weightfile)$/;"	f	signature:(char *datacfg, char *filename, char *weightfile)
labels	include/darknet.h	/^    char **labels;$/;"	m	struct:load_args	access:public
last_avg	src/demo.c	/^static float *last_avg;$/;"	v	file:
last_avg2	src/demo.c	/^static float *last_avg2;$/;"	v	file:
layer	include/darknet.h	/^struct layer{$/;"	s
layer	include/darknet.h	/^typedef struct layer layer;$/;"	t	typeref:struct:layer
layer::absolute	include/darknet.h	/^    int absolute;$/;"	m	struct:layer	access:public
layer::activation	include/darknet.h	/^    ACTIVATION activation;$/;"	m	struct:layer	access:public
layer::alpha	include/darknet.h	/^    float alpha;$/;"	m	struct:layer	access:public
layer::angle	include/darknet.h	/^    float angle;$/;"	m	struct:layer	access:public
layer::background	include/darknet.h	/^    int background;$/;"	m	struct:layer	access:public
layer::backward	include/darknet.h	/^    void (*backward)  (struct layer, struct network);$/;"	m	struct:layer	access:public
layer::backward_gpu	include/darknet.h	/^    void (*backward_gpu)  (struct layer, struct network);$/;"	m	struct:layer	access:public
layer::batch	include/darknet.h	/^    int batch;$/;"	m	struct:layer	access:public
layer::batch_normalize	include/darknet.h	/^    int batch_normalize;$/;"	m	struct:layer	access:public
layer::bd_algo	include/darknet.h	/^    cudnnConvolutionBwdDataAlgo_t bd_algo;$/;"	m	struct:layer	access:public
layer::beta	include/darknet.h	/^    float beta;$/;"	m	struct:layer	access:public
layer::bf_algo	include/darknet.h	/^    cudnnConvolutionBwdFilterAlgo_t bf_algo;$/;"	m	struct:layer	access:public
layer::bias_change_gpu	include/darknet.h	/^    float * bias_change_gpu;$/;"	m	struct:layer	access:public
layer::bias_m	include/darknet.h	/^    float * bias_m;$/;"	m	struct:layer	access:public
layer::bias_m_gpu	include/darknet.h	/^    float *bias_m_gpu;$/;"	m	struct:layer	access:public
layer::bias_match	include/darknet.h	/^    int bias_match;$/;"	m	struct:layer	access:public
layer::bias_updates	include/darknet.h	/^    float * bias_updates;$/;"	m	struct:layer	access:public
layer::bias_updates_gpu	include/darknet.h	/^    float * bias_updates_gpu;$/;"	m	struct:layer	access:public
layer::bias_v	include/darknet.h	/^    float * bias_v;$/;"	m	struct:layer	access:public
layer::bias_v_gpu	include/darknet.h	/^    float *bias_v_gpu;$/;"	m	struct:layer	access:public
layer::biases	include/darknet.h	/^    float * biases;$/;"	m	struct:layer	access:public
layer::biases_gpu	include/darknet.h	/^    float * biases_gpu;$/;"	m	struct:layer	access:public
layer::binary	include/darknet.h	/^    int binary;$/;"	m	struct:layer	access:public
layer::binary_input	include/darknet.h	/^    float * binary_input;$/;"	m	struct:layer	access:public
layer::binary_input_gpu	include/darknet.h	/^    float * binary_input_gpu;$/;"	m	struct:layer	access:public
layer::binary_weights	include/darknet.h	/^    float * binary_weights;$/;"	m	struct:layer	access:public
layer::binary_weights_gpu	include/darknet.h	/^    float * binary_weights_gpu;$/;"	m	struct:layer	access:public
layer::c	include/darknet.h	/^    int h,w,c;$/;"	m	struct:layer	access:public
layer::c_cpu	include/darknet.h	/^    float *c_cpu;$/;"	m	struct:layer	access:public
layer::c_gpu	include/darknet.h	/^    float *c_gpu;$/;"	m	struct:layer	access:public
layer::cell_cpu	include/darknet.h	/^    float *cell_cpu;$/;"	m	struct:layer	access:public
layer::cell_gpu	include/darknet.h	/^    float *cell_gpu;$/;"	m	struct:layer	access:public
layer::class_scale	include/darknet.h	/^    float class_scale;$/;"	m	struct:layer	access:public
layer::classes	include/darknet.h	/^    int classes;$/;"	m	struct:layer	access:public
layer::classfix	include/darknet.h	/^    int classfix;$/;"	m	struct:layer	access:public
layer::combine_cpu	include/darknet.h	/^    float * combine_cpu;$/;"	m	struct:layer	access:public
layer::combine_delta_cpu	include/darknet.h	/^    float * combine_delta_cpu;$/;"	m	struct:layer	access:public
layer::combine_delta_gpu	include/darknet.h	/^    float * combine_delta_gpu;$/;"	m	struct:layer	access:public
layer::combine_gpu	include/darknet.h	/^    float * combine_gpu;$/;"	m	struct:layer	access:public
layer::concat	include/darknet.h	/^    float * concat;$/;"	m	struct:layer	access:public
layer::concat_delta	include/darknet.h	/^    float * concat_delta;$/;"	m	struct:layer	access:public
layer::concat_delta_gpu	include/darknet.h	/^    float * concat_delta_gpu;$/;"	m	struct:layer	access:public
layer::concat_gpu	include/darknet.h	/^    float * concat_gpu;$/;"	m	struct:layer	access:public
layer::convDesc	include/darknet.h	/^    cudnnConvolutionDescriptor_t convDesc;$/;"	m	struct:layer	access:public
layer::coord_scale	include/darknet.h	/^    float coord_scale;$/;"	m	struct:layer	access:public
layer::coords	include/darknet.h	/^    int coords;$/;"	m	struct:layer	access:public
layer::cost	include/darknet.h	/^    float * cost;$/;"	m	struct:layer	access:public
layer::cost_type	include/darknet.h	/^    COST_TYPE cost_type;$/;"	m	struct:layer	access:public
layer::cweights	include/darknet.h	/^    char  * cweights;$/;"	m	struct:layer	access:public
layer::dc_cpu	include/darknet.h	/^    float *dc_cpu; $/;"	m	struct:layer	access:public
layer::dc_gpu	include/darknet.h	/^    float *dc_gpu; $/;"	m	struct:layer	access:public
layer::ddstTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t dsrcTensorDesc, ddstTensorDesc;$/;"	m	struct:layer	access:public
layer::delta	include/darknet.h	/^    float * delta;$/;"	m	struct:layer	access:public
layer::delta_gpu	include/darknet.h	/^    float * delta_gpu;$/;"	m	struct:layer	access:public
layer::dh_cpu	include/darknet.h	/^    float *dh_cpu;$/;"	m	struct:layer	access:public
layer::dh_gpu	include/darknet.h	/^    float *dh_gpu;$/;"	m	struct:layer	access:public
layer::does_cost	include/darknet.h	/^    int does_cost;$/;"	m	struct:layer	access:public
layer::dontload	include/darknet.h	/^    int dontload;$/;"	m	struct:layer	access:public
layer::dontloadscales	include/darknet.h	/^    int dontloadscales;$/;"	m	struct:layer	access:public
layer::dot	include/darknet.h	/^    float dot;$/;"	m	struct:layer	access:public
layer::dsrcTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t dsrcTensorDesc, ddstTensorDesc;$/;"	m	struct:layer	access:public
layer::dstTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t srcTensorDesc, dstTensorDesc;$/;"	m	struct:layer	access:public
layer::dweightDesc	include/darknet.h	/^    cudnnFilterDescriptor_t dweightDesc;$/;"	m	struct:layer	access:public
layer::exposure	include/darknet.h	/^    float exposure;$/;"	m	struct:layer	access:public
layer::extra	include/darknet.h	/^    int extra;$/;"	m	struct:layer	access:public
layer::f_cpu	include/darknet.h	/^    float *f_cpu;$/;"	m	struct:layer	access:public
layer::f_gpu	include/darknet.h	/^    float *f_gpu;$/;"	m	struct:layer	access:public
layer::flatten	include/darknet.h	/^    int flatten;$/;"	m	struct:layer	access:public
layer::flip	include/darknet.h	/^    int flip;$/;"	m	struct:layer	access:public
layer::flipped	include/darknet.h	/^    int flipped;$/;"	m	struct:layer	access:public
layer::forced	include/darknet.h	/^    int forced;$/;"	m	struct:layer	access:public
layer::forgot_delta	include/darknet.h	/^    float * forgot_delta;$/;"	m	struct:layer	access:public
layer::forgot_delta_gpu	include/darknet.h	/^    float * forgot_delta_gpu;$/;"	m	struct:layer	access:public
layer::forgot_state	include/darknet.h	/^    float * forgot_state;$/;"	m	struct:layer	access:public
layer::forgot_state_gpu	include/darknet.h	/^    float * forgot_state_gpu;$/;"	m	struct:layer	access:public
layer::forward	include/darknet.h	/^    void (*forward)   (struct layer, struct network);$/;"	m	struct:layer	access:public
layer::forward_gpu	include/darknet.h	/^    void (*forward_gpu)   (struct layer, struct network);$/;"	m	struct:layer	access:public
layer::fw_algo	include/darknet.h	/^    cudnnConvolutionFwdAlgo_t fw_algo;$/;"	m	struct:layer	access:public
layer::g_cpu	include/darknet.h	/^    float *g_cpu;$/;"	m	struct:layer	access:public
layer::g_gpu	include/darknet.h	/^    float *g_gpu;$/;"	m	struct:layer	access:public
layer::gate_delta_gpu	include/darknet.h	/^    float * gate_delta_gpu;$/;"	m	struct:layer	access:public
layer::gate_gpu	include/darknet.h	/^    float * gate_gpu;$/;"	m	struct:layer	access:public
layer::groups	include/darknet.h	/^    int groups;$/;"	m	struct:layer	access:public
layer::h	include/darknet.h	/^    int h,w,c;$/;"	m	struct:layer	access:public
layer::h_cpu	include/darknet.h	/^    float *h_cpu;$/;"	m	struct:layer	access:public
layer::h_gpu	include/darknet.h	/^    float *h_gpu;$/;"	m	struct:layer	access:public
layer::hh_cpu	include/darknet.h	/^    float *hh_cpu;$/;"	m	struct:layer	access:public
layer::hh_gpu	include/darknet.h	/^    float *hh_gpu;$/;"	m	struct:layer	access:public
layer::hidden	include/darknet.h	/^    int hidden;$/;"	m	struct:layer	access:public
layer::i_cpu	include/darknet.h	/^    float *i_cpu;$/;"	m	struct:layer	access:public
layer::i_gpu	include/darknet.h	/^    float *i_gpu;$/;"	m	struct:layer	access:public
layer::index	include/darknet.h	/^    int index;$/;"	m	struct:layer	access:public
layer::indexes	include/darknet.h	/^    int   * indexes;$/;"	m	struct:layer	access:public
layer::indexes_gpu	include/darknet.h	/^    int *indexes_gpu;$/;"	m	struct:layer	access:public
layer::input_gate_layer	include/darknet.h	/^    struct layer *input_gate_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::input_h_layer	include/darknet.h	/^    struct layer *input_h_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::input_layer	include/darknet.h	/^    struct layer *input_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::input_layers	include/darknet.h	/^    int   * input_layers;$/;"	m	struct:layer	access:public
layer::input_r_layer	include/darknet.h	/^    struct layer *input_r_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::input_save_layer	include/darknet.h	/^    struct layer *input_save_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::input_sizes	include/darknet.h	/^    int   * input_sizes;$/;"	m	struct:layer	access:public
layer::input_state_layer	include/darknet.h	/^    struct layer *input_state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::input_z_layer	include/darknet.h	/^    struct layer *input_z_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::inputs	include/darknet.h	/^    int inputs;$/;"	m	struct:layer	access:public
layer::jitter	include/darknet.h	/^    float jitter;$/;"	m	struct:layer	access:public
layer::joint	include/darknet.h	/^    int joint;$/;"	m	struct:layer	access:public
layer::kappa	include/darknet.h	/^    float kappa;$/;"	m	struct:layer	access:public
layer::learning_rate_scale	include/darknet.h	/^    float learning_rate_scale;$/;"	m	struct:layer	access:public
layer::log	include/darknet.h	/^    int log;$/;"	m	struct:layer	access:public
layer::m	include/darknet.h	/^    float * m;$/;"	m	struct:layer	access:public
layer::m_gpu	include/darknet.h	/^    float *m_gpu;$/;"	m	struct:layer	access:public
layer::map	include/darknet.h	/^    int   * map;$/;"	m	struct:layer	access:public
layer::max_boxes	include/darknet.h	/^    int max_boxes;$/;"	m	struct:layer	access:public
layer::mean	include/darknet.h	/^    float * mean;$/;"	m	struct:layer	access:public
layer::mean_delta	include/darknet.h	/^    float * mean_delta;$/;"	m	struct:layer	access:public
layer::mean_delta_gpu	include/darknet.h	/^    float * mean_delta_gpu;$/;"	m	struct:layer	access:public
layer::mean_gpu	include/darknet.h	/^    float * mean_gpu;$/;"	m	struct:layer	access:public
layer::n	include/darknet.h	/^    int n;$/;"	m	struct:layer	access:public
layer::nbiases	include/darknet.h	/^    int nbiases;$/;"	m	struct:layer	access:public
layer::noadjust	include/darknet.h	/^    int noadjust;$/;"	m	struct:layer	access:public
layer::noobject_scale	include/darknet.h	/^    float noobject_scale;$/;"	m	struct:layer	access:public
layer::normTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t normTensorDesc;$/;"	m	struct:layer	access:public
layer::norms	include/darknet.h	/^    float * norms;$/;"	m	struct:layer	access:public
layer::norms_gpu	include/darknet.h	/^    float * norms_gpu;$/;"	m	struct:layer	access:public
layer::nweights	include/darknet.h	/^    int nweights;$/;"	m	struct:layer	access:public
layer::o_cpu	include/darknet.h	/^    float *o_cpu;$/;"	m	struct:layer	access:public
layer::o_gpu	include/darknet.h	/^    float *o_gpu;$/;"	m	struct:layer	access:public
layer::object_scale	include/darknet.h	/^    float object_scale;$/;"	m	struct:layer	access:public
layer::objectness	include/darknet.h	/^    int objectness;$/;"	m	struct:layer	access:public
layer::onlyforward	include/darknet.h	/^    int onlyforward;$/;"	m	struct:layer	access:public
layer::out_c	include/darknet.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer	access:public
layer::out_h	include/darknet.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer	access:public
layer::out_w	include/darknet.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer	access:public
layer::output	include/darknet.h	/^    float * output;$/;"	m	struct:layer	access:public
layer::output_gpu	include/darknet.h	/^    float * output_gpu;$/;"	m	struct:layer	access:public
layer::output_layer	include/darknet.h	/^    struct layer *output_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::outputs	include/darknet.h	/^    int outputs;$/;"	m	struct:layer	access:public
layer::pad	include/darknet.h	/^    int pad;$/;"	m	struct:layer	access:public
layer::prev_cell_cpu	include/darknet.h	/^    float *prev_cell_cpu;$/;"	m	struct:layer	access:public
layer::prev_cell_gpu	include/darknet.h	/^    float *prev_cell_gpu;$/;"	m	struct:layer	access:public
layer::prev_state	include/darknet.h	/^    float * prev_state;$/;"	m	struct:layer	access:public
layer::prev_state_cpu	include/darknet.h	/^    float * prev_state_cpu;$/;"	m	struct:layer	access:public
layer::prev_state_gpu	include/darknet.h	/^    float * prev_state_gpu;$/;"	m	struct:layer	access:public
layer::probability	include/darknet.h	/^    float probability;$/;"	m	struct:layer	access:public
layer::r_cpu	include/darknet.h	/^    float *r_cpu;$/;"	m	struct:layer	access:public
layer::r_gpu	include/darknet.h	/^    float *r_gpu;$/;"	m	struct:layer	access:public
layer::rand	include/darknet.h	/^    float * rand;$/;"	m	struct:layer	access:public
layer::rand_gpu	include/darknet.h	/^    float * rand_gpu;$/;"	m	struct:layer	access:public
layer::random	include/darknet.h	/^    int random;$/;"	m	struct:layer	access:public
layer::ratio	include/darknet.h	/^    float ratio;$/;"	m	struct:layer	access:public
layer::reorg	include/darknet.h	/^    int reorg;$/;"	m	struct:layer	access:public
layer::rescore	include/darknet.h	/^    int rescore;$/;"	m	struct:layer	access:public
layer::reset_layer	include/darknet.h	/^    struct layer *reset_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::reverse	include/darknet.h	/^    int reverse;$/;"	m	struct:layer	access:public
layer::rolling_mean	include/darknet.h	/^    float * rolling_mean;$/;"	m	struct:layer	access:public
layer::rolling_mean_gpu	include/darknet.h	/^    float * rolling_mean_gpu;$/;"	m	struct:layer	access:public
layer::rolling_variance	include/darknet.h	/^    float * rolling_variance;$/;"	m	struct:layer	access:public
layer::rolling_variance_gpu	include/darknet.h	/^    float * rolling_variance_gpu;$/;"	m	struct:layer	access:public
layer::saturation	include/darknet.h	/^    float saturation;$/;"	m	struct:layer	access:public
layer::save_delta_gpu	include/darknet.h	/^    float * save_delta_gpu;$/;"	m	struct:layer	access:public
layer::save_gpu	include/darknet.h	/^    float * save_gpu;$/;"	m	struct:layer	access:public
layer::scale	include/darknet.h	/^    float scale;$/;"	m	struct:layer	access:public
layer::scale_change_gpu	include/darknet.h	/^    float * scale_change_gpu;$/;"	m	struct:layer	access:public
layer::scale_m	include/darknet.h	/^    float * scale_m;$/;"	m	struct:layer	access:public
layer::scale_m_gpu	include/darknet.h	/^    float *scale_m_gpu;$/;"	m	struct:layer	access:public
layer::scale_updates	include/darknet.h	/^    float * scale_updates;$/;"	m	struct:layer	access:public
layer::scale_updates_gpu	include/darknet.h	/^    float * scale_updates_gpu;$/;"	m	struct:layer	access:public
layer::scale_v	include/darknet.h	/^    float * scale_v;$/;"	m	struct:layer	access:public
layer::scale_v_gpu	include/darknet.h	/^    float *scale_v_gpu;$/;"	m	struct:layer	access:public
layer::scales	include/darknet.h	/^    float * scales;$/;"	m	struct:layer	access:public
layer::scales_gpu	include/darknet.h	/^    float * scales_gpu;$/;"	m	struct:layer	access:public
layer::self_layer	include/darknet.h	/^    struct layer *self_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::shift	include/darknet.h	/^    float shift;$/;"	m	struct:layer	access:public
layer::shortcut	include/darknet.h	/^    int shortcut;$/;"	m	struct:layer	access:public
layer::side	include/darknet.h	/^    int side;$/;"	m	struct:layer	access:public
layer::size	include/darknet.h	/^    int size;$/;"	m	struct:layer	access:public
layer::smooth	include/darknet.h	/^    float smooth;$/;"	m	struct:layer	access:public
layer::softmax	include/darknet.h	/^    int softmax;$/;"	m	struct:layer	access:public
layer::softmax_tree	include/darknet.h	/^    tree *softmax_tree;$/;"	m	struct:layer	access:public
layer::spatial	include/darknet.h	/^    int spatial;$/;"	m	struct:layer	access:public
layer::spatial_mean	include/darknet.h	/^    float * spatial_mean;$/;"	m	struct:layer	access:public
layer::sqrt	include/darknet.h	/^    int sqrt;$/;"	m	struct:layer	access:public
layer::squared	include/darknet.h	/^    float * squared;$/;"	m	struct:layer	access:public
layer::squared_gpu	include/darknet.h	/^    float * squared_gpu;$/;"	m	struct:layer	access:public
layer::srcTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t srcTensorDesc, dstTensorDesc;$/;"	m	struct:layer	access:public
layer::state	include/darknet.h	/^    float * state;$/;"	m	struct:layer	access:public
layer::state_delta	include/darknet.h	/^    float * state_delta;$/;"	m	struct:layer	access:public
layer::state_delta_gpu	include/darknet.h	/^    float * state_delta_gpu;$/;"	m	struct:layer	access:public
layer::state_gate_layer	include/darknet.h	/^    struct layer *state_gate_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::state_gpu	include/darknet.h	/^    float * state_gpu;$/;"	m	struct:layer	access:public
layer::state_h_layer	include/darknet.h	/^    struct layer *state_h_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::state_layer	include/darknet.h	/^    struct layer *state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::state_r_layer	include/darknet.h	/^    struct layer *state_r_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::state_save_layer	include/darknet.h	/^    struct layer *state_save_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::state_state_layer	include/darknet.h	/^    struct layer *state_state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::state_z_layer	include/darknet.h	/^    struct layer *state_z_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::steps	include/darknet.h	/^    int steps;$/;"	m	struct:layer	access:public
layer::stopbackward	include/darknet.h	/^    int stopbackward;$/;"	m	struct:layer	access:public
layer::stride	include/darknet.h	/^    int stride;$/;"	m	struct:layer	access:public
layer::tanh	include/darknet.h	/^    int tanh;$/;"	m	struct:layer	access:public
layer::temp2_cpu	include/darknet.h	/^    float *temp2_cpu;$/;"	m	struct:layer	access:public
layer::temp2_gpu	include/darknet.h	/^    float *temp2_gpu;$/;"	m	struct:layer	access:public
layer::temp3_cpu	include/darknet.h	/^    float *temp3_cpu;$/;"	m	struct:layer	access:public
layer::temp3_gpu	include/darknet.h	/^    float *temp3_gpu;$/;"	m	struct:layer	access:public
layer::temp_cpu	include/darknet.h	/^    float *temp_cpu;$/;"	m	struct:layer	access:public
layer::temp_gpu	include/darknet.h	/^    float *temp_gpu;$/;"	m	struct:layer	access:public
layer::temperature	include/darknet.h	/^    float temperature;$/;"	m	struct:layer	access:public
layer::thresh	include/darknet.h	/^    float thresh;$/;"	m	struct:layer	access:public
layer::truth	include/darknet.h	/^    int truth;$/;"	m	struct:layer	access:public
layer::truths	include/darknet.h	/^    int truths;$/;"	m	struct:layer	access:public
layer::type	include/darknet.h	/^    LAYER_TYPE type;$/;"	m	struct:layer	access:public
layer::uf	include/darknet.h	/^    struct layer *uf;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::ug	include/darknet.h	/^    struct layer *ug;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::uh	include/darknet.h	/^    struct layer *uh;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::ui	include/darknet.h	/^    struct layer *ui;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::uo	include/darknet.h	/^    struct layer *uo;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::update	include/darknet.h	/^    void (*update)    (struct layer, update_args);$/;"	m	struct:layer	access:public
layer::update_gpu	include/darknet.h	/^    void (*update_gpu)    (struct layer, update_args);$/;"	m	struct:layer	access:public
layer::update_layer	include/darknet.h	/^    struct layer *update_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::ur	include/darknet.h	/^    struct layer *ur;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::uz	include/darknet.h	/^    struct layer *uz;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::v	include/darknet.h	/^    float * v;$/;"	m	struct:layer	access:public
layer::v_gpu	include/darknet.h	/^    float *v_gpu;$/;"	m	struct:layer	access:public
layer::variance	include/darknet.h	/^    float * variance;$/;"	m	struct:layer	access:public
layer::variance_delta	include/darknet.h	/^    float * variance_delta;$/;"	m	struct:layer	access:public
layer::variance_delta_gpu	include/darknet.h	/^    float * variance_delta_gpu;$/;"	m	struct:layer	access:public
layer::variance_gpu	include/darknet.h	/^    float * variance_gpu;$/;"	m	struct:layer	access:public
layer::w	include/darknet.h	/^    int h,w,c;$/;"	m	struct:layer	access:public
layer::weightDesc	include/darknet.h	/^    cudnnFilterDescriptor_t weightDesc;$/;"	m	struct:layer	access:public
layer::weight_change_gpu	include/darknet.h	/^    float * weight_change_gpu;$/;"	m	struct:layer	access:public
layer::weight_updates	include/darknet.h	/^    float * weight_updates;$/;"	m	struct:layer	access:public
layer::weight_updates_gpu	include/darknet.h	/^    float * weight_updates_gpu;$/;"	m	struct:layer	access:public
layer::weights	include/darknet.h	/^    float * weights;$/;"	m	struct:layer	access:public
layer::weights_gpu	include/darknet.h	/^    float * weights_gpu;$/;"	m	struct:layer	access:public
layer::wf	include/darknet.h	/^    struct layer *wf;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::wg	include/darknet.h	/^    struct layer *wg;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::wh	include/darknet.h	/^    struct layer *wh;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::wi	include/darknet.h	/^    struct layer *wi;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::wo	include/darknet.h	/^    struct layer *wo;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::workspace_size	include/darknet.h	/^    size_t workspace_size;$/;"	m	struct:layer	access:public
layer::wr	include/darknet.h	/^    struct layer *wr;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::wz	include/darknet.h	/^    struct layer *wz;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
layer::x	include/darknet.h	/^    float * x;$/;"	m	struct:layer	access:public
layer::x_gpu	include/darknet.h	/^    float * x_gpu;$/;"	m	struct:layer	access:public
layer::x_norm	include/darknet.h	/^    float * x_norm;$/;"	m	struct:layer	access:public
layer::x_norm_gpu	include/darknet.h	/^    float * x_norm_gpu;$/;"	m	struct:layer	access:public
layer::xnor	include/darknet.h	/^    int xnor;$/;"	m	struct:layer	access:public
layer::z_cpu	include/darknet.h	/^    float *z_cpu;$/;"	m	struct:layer	access:public
layer::z_gpu	include/darknet.h	/^    float *z_gpu;$/;"	m	struct:layer	access:public
layers	include/darknet.h	/^    layer *layers;$/;"	m	struct:network	access:public
leaf	include/darknet.h	/^    int *leaf;$/;"	m	struct:__anon5	access:public
leaky_activate	src/activations.h	/^static inline float leaky_activate(float x){return (x>0) ? x : .1*x;}$/;"	f	signature:(float x)
leaky_activate_kernel	src/activation_kernels.cu	/^__device__ float leaky_activate_kernel(float x){return (x>0) ? x : .1*x;}$/;"	f	signature:(float x)
leaky_gradient	src/activations.h	/^static inline float leaky_gradient(float x){return (x>0) ? 1 : .1;}$/;"	f	signature:(float x)
leaky_gradient_kernel	src/activation_kernels.cu	/^__device__ float leaky_gradient_kernel(float x){return (x>0) ? 1 : .1;}$/;"	f	signature:(float x)
learning_rate	include/darknet.h	/^    float learning_rate;$/;"	m	struct:__anon9	access:public
learning_rate	include/darknet.h	/^    float learning_rate;$/;"	m	struct:network	access:public
learning_rate_policy	include/darknet.h	/^} learning_rate_policy;$/;"	t	typeref:enum:__anon10
learning_rate_scale	include/darknet.h	/^    float learning_rate_scale;$/;"	m	struct:layer	access:public
left	include/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon16	access:public
legal_go	examples/go.c	/^int legal_go(float *b, char *ko, int p, int r, int c)$/;"	f	signature:(float *b, char *ko, int p, int r, int c)
length	src/stb_image.h	/^   stbi__uint32 length;$/;"	m	struct:__anon30	access:public
letterbox_image	src/image.c	/^image letterbox_image(image im, int w, int h)$/;"	f	signature:(image im, int w, int h)
letterbox_image_into	src/image.c	/^void letterbox_image_into(image im, int w, int h, image boxed)$/;"	f	signature:(image im, int w, int h, image boxed)
letterbox_img	python/darknet.py	/^def letterbox_img(im, w, h):$/;"	f	access:public
levels_image_kernel	src/crop_layer_kernels.cu	/^__global__ void levels_image_kernel(float *image, float *rand, int batch, int w, int h, int train, float saturation, float exposure, float translate, float scale, float shift)$/;"	f	signature:(float *image, float *rand, int batch, int w, int h, int train, float saturation, float exposure, float translate, float scale, float shift)
lflags	src/stb_image.h	/^   int lflags;$/;"	m	struct:__anon35	access:public
lhtan_activate	src/activations.h	/^static inline float lhtan_activate(float x)$/;"	f	signature:(float x)
lhtan_activate_kernel	src/activation_kernels.cu	/^__device__ float lhtan_activate_kernel(float x)$/;"	f	signature:(float x)
lhtan_gradient	src/activations.h	/^static inline float lhtan_gradient(float x)$/;"	f	signature:(float x)
lhtan_gradient_kernel	src/activation_kernels.cu	/^__device__ float lhtan_gradient_kernel(float x)$/;"	f	signature:(float x)
lib	python/darknet.py	/^lib = CDLL("\/home\/pjreddie\/documents\/darknet\/libdarknet.so", RTLD_GLOBAL)$/;"	v
line0	src/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon27	access:public
line1	src/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon27	access:public
line_size	src/stb_image.h	/^   int line_size;$/;"	m	struct:__anon35	access:public
linear_activate	src/activations.h	/^static inline float linear_activate(float x){return x;}$/;"	f	signature:(float x)
linear_activate_kernel	src/activation_kernels.cu	/^__device__ float linear_activate_kernel(float x){return x;}$/;"	f	signature:(float x)
linear_gradient	src/activations.h	/^static inline float linear_gradient(float x){return 1;}$/;"	f	signature:(float x)
linear_gradient_kernel	src/activation_kernels.cu	/^__device__ float linear_gradient_kernel(float x){return 1;}$/;"	f	signature:(float x)
linebuf	src/stb_image.h	/^      stbi_uc *linebuf;$/;"	m	struct:__anon25::__anon26	access:public
list	include/darknet.h	/^typedef struct list{$/;"	s
list	include/darknet.h	/^} list;$/;"	t	typeref:struct:list
list::back	include/darknet.h	/^    node *back;$/;"	m	struct:list	access:public
list::front	include/darknet.h	/^    node *front;$/;"	m	struct:list	access:public
list::size	include/darknet.h	/^    int size;$/;"	m	struct:list	access:public
list_file	scripts/voc_label.py	/^    list_file = open('%s_%s.txt'%(year, image_set), 'w')$/;"	v
list_insert	src/list.c	/^void list_insert(list *l, void *val)$/;"	f	signature:(list *l, void *val)
list_pop	src/list.c	/^void *list_pop(list *l){$/;"	f	signature:(list *l)
list_to_array	src/list.c	/^void **list_to_array(list *l)$/;"	f	signature:(list *l)
load_all_cifar10	src/data.c	/^data load_all_cifar10()$/;"	f
load_alphabet	src/image.c	/^image **load_alphabet()$/;"	f
load_args	include/darknet.h	/^typedef struct load_args{$/;"	s
load_args	include/darknet.h	/^} load_args;$/;"	t	typeref:struct:load_args
load_args::angle	include/darknet.h	/^    float angle;$/;"	m	struct:load_args	access:public
load_args::aspect	include/darknet.h	/^    float aspect;$/;"	m	struct:load_args	access:public
load_args::background	include/darknet.h	/^    int background;$/;"	m	struct:load_args	access:public
load_args::center	include/darknet.h	/^    int center;$/;"	m	struct:load_args	access:public
load_args::classes	include/darknet.h	/^    int classes;$/;"	m	struct:load_args	access:public
load_args::d	include/darknet.h	/^    data *d;$/;"	m	struct:load_args	access:public
load_args::exposure	include/darknet.h	/^    float exposure;$/;"	m	struct:load_args	access:public
load_args::h	include/darknet.h	/^    int h;$/;"	m	struct:load_args	access:public
load_args::hierarchy	include/darknet.h	/^    tree *hierarchy;$/;"	m	struct:load_args	access:public
load_args::hue	include/darknet.h	/^    float hue;$/;"	m	struct:load_args	access:public
load_args::im	include/darknet.h	/^    image *im;$/;"	m	struct:load_args	access:public
load_args::jitter	include/darknet.h	/^    float jitter;$/;"	m	struct:load_args	access:public
load_args::labels	include/darknet.h	/^    char **labels;$/;"	m	struct:load_args	access:public
load_args::m	include/darknet.h	/^    int m;$/;"	m	struct:load_args	access:public
load_args::max	include/darknet.h	/^    int min, max, size;$/;"	m	struct:load_args	access:public
load_args::min	include/darknet.h	/^    int min, max, size;$/;"	m	struct:load_args	access:public
load_args::n	include/darknet.h	/^    int n;$/;"	m	struct:load_args	access:public
load_args::nh	include/darknet.h	/^    int nh;$/;"	m	struct:load_args	access:public
load_args::num_boxes	include/darknet.h	/^    int num_boxes;$/;"	m	struct:load_args	access:public
load_args::nw	include/darknet.h	/^    int nw;$/;"	m	struct:load_args	access:public
load_args::out_h	include/darknet.h	/^    int out_h;$/;"	m	struct:load_args	access:public
load_args::out_w	include/darknet.h	/^    int out_w;$/;"	m	struct:load_args	access:public
load_args::path	include/darknet.h	/^    char *path;$/;"	m	struct:load_args	access:public
load_args::paths	include/darknet.h	/^    char **paths;$/;"	m	struct:load_args	access:public
load_args::resized	include/darknet.h	/^    image *resized;$/;"	m	struct:load_args	access:public
load_args::saturation	include/darknet.h	/^    float saturation;$/;"	m	struct:load_args	access:public
load_args::scale	include/darknet.h	/^    int scale;$/;"	m	struct:load_args	access:public
load_args::size	include/darknet.h	/^    int min, max, size;$/;"	m	struct:load_args	access:public
load_args::threads	include/darknet.h	/^    int threads;$/;"	m	struct:load_args	access:public
load_args::type	include/darknet.h	/^    data_type type;$/;"	m	struct:load_args	access:public
load_args::w	include/darknet.h	/^    int w;$/;"	m	struct:load_args	access:public
load_batchnorm_weights	src/parser.c	/^void load_batchnorm_weights(layer l, FILE *fp)$/;"	f	signature:(layer l, FILE *fp)
load_categorical_data_csv	src/data.c	/^data load_categorical_data_csv(char *filename, int target, int k)$/;"	f	signature:(char *filename, int target, int k)
load_cifar10_data	src/data.c	/^data load_cifar10_data(char *filename)$/;"	f	signature:(char *filename)
load_connected_weights	src/parser.c	/^void load_connected_weights(layer l, FILE *fp, int transpose)$/;"	f	signature:(layer l, FILE *fp, int transpose)
load_convolutional_weights	src/parser.c	/^void load_convolutional_weights(layer l, FILE *fp)$/;"	f	signature:(layer l, FILE *fp)
load_convolutional_weights_binary	src/parser.c	/^void load_convolutional_weights_binary(layer l, FILE *fp)$/;"	f	signature:(layer l, FILE *fp)
load_data	src/data.c	/^pthread_t load_data(load_args args)$/;"	f	signature:(load_args args)
load_data_augment	src/data.c	/^data load_data_augment(char **paths, int n, int m, char **labels, int k, tree *hierarchy, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure, int center)$/;"	f	signature:(char **paths, int n, int m, char **labels, int k, tree *hierarchy, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure, int center)
load_data_blocking	src/data.c	/^void load_data_blocking(load_args args)$/;"	f	signature:(load_args args)
load_data_captcha	src/data.c	/^data load_data_captcha(char **paths, int n, int m, int k, int w, int h)$/;"	f	signature:(char **paths, int n, int m, int k, int w, int h)
load_data_captcha_encode	src/data.c	/^data load_data_captcha_encode(char **paths, int n, int m, int w, int h)$/;"	f	signature:(char **paths, int n, int m, int w, int h)
load_data_compare	src/data.c	/^data load_data_compare(int n, char **paths, int m, int classes, int w, int h)$/;"	f	signature:(int n, char **paths, int m, int classes, int w, int h)
load_data_detection	src/data.c	/^data load_data_detection(int n, char **paths, int m, int w, int h, int boxes, int classes, float jitter, float hue, float saturation, float exposure)$/;"	f	signature:(int n, char **paths, int m, int w, int h, int boxes, int classes, float jitter, float hue, float saturation, float exposure)
load_data_in_thread	src/data.c	/^pthread_t load_data_in_thread(load_args args)$/;"	f	signature:(load_args args)
load_data_iseg	src/data.c	/^data load_data_iseg(int n, char **paths, int m, int w, int h, int classes, int min, int max, float angle, float aspect, float hue, float saturation, float exposure, int div)$/;"	f	signature:(int n, char **paths, int m, int w, int h, int classes, int min, int max, float angle, float aspect, float hue, float saturation, float exposure, int div)
load_data_old	src/data.c	/^data load_data_old(char **paths, int n, int m, char **labels, int k, int w, int h)$/;"	f	signature:(char **paths, int n, int m, char **labels, int k, int w, int h)
load_data_region	src/data.c	/^data load_data_region(int n, char **paths, int m, int w, int h, int size, int classes, float jitter, float hue, float saturation, float exposure)$/;"	f	signature:(int n, char **paths, int m, int w, int h, int size, int classes, float jitter, float hue, float saturation, float exposure)
load_data_regression	src/data.c	/^data load_data_regression(char **paths, int n, int m, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f	signature:(char **paths, int n, int m, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure)
load_data_seg	src/data.c	/^data load_data_seg(int n, char **paths, int m, int w, int h, int classes, int min, int max, float angle, float aspect, float hue, float saturation, float exposure, int div)$/;"	f	signature:(int n, char **paths, int m, int w, int h, int classes, int min, int max, float angle, float aspect, float hue, float saturation, float exposure, int div)
load_data_super	src/data.c	/^data load_data_super(char **paths, int n, int m, int w, int h, int scale)$/;"	f	signature:(char **paths, int n, int m, int w, int h, int scale)
load_data_swag	src/data.c	/^data load_data_swag(char **paths, int n, int classes, float jitter)$/;"	f	signature:(char **paths, int n, int classes, float jitter)
load_data_tag	src/data.c	/^data load_data_tag(char **paths, int n, int m, int k, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f	signature:(char **paths, int n, int m, int k, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure)
load_data_writing	src/data.c	/^data load_data_writing(char **paths, int n, int m, int w, int h, int out_w, int out_h)$/;"	f	signature:(char **paths, int n, int m, int w, int h, int out_w, int out_h)
load_go	src/data.c	/^data load_go(char *filename)$/;"	f	signature:(char *filename)
load_go_moves	examples/go.c	/^moves load_go_moves(char *filename)$/;"	f	signature:(char *filename)
load_image	src/image.c	/^image load_image(char *filename, int w, int h, int c)$/;"	f	signature:(char *filename, int w, int h, int c)
load_image_augment_paths	src/data.c	/^matrix load_image_augment_paths(char **paths, int n, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure, int center)$/;"	f	signature:(char **paths, int n, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure, int center)
load_image_color	src/image.c	/^image load_image_color(char *filename, int w, int h)$/;"	f	signature:(char *filename, int w, int h)
load_image_cv	src/image.c	/^image load_image_cv(char *filename, int channels)$/;"	f	signature:(char *filename, int channels)
load_image_paths	src/data.c	/^matrix load_image_paths(char **paths, int n, int w, int h)$/;"	f	signature:(char **paths, int n, int w, int h)
load_image_paths_gray	src/data.c	/^matrix load_image_paths_gray(char **paths, int n, int w, int h)$/;"	f	signature:(char **paths, int n, int w, int h)
load_image_stb	src/image.c	/^image load_image_stb(char *filename, int channels)$/;"	f	signature:(char *filename, int channels)
load_img	python/darknet.py	/^def load_img(f):$/;"	f	access:public
load_jpeg_image	src/stb_image.h	/^static stbi_uc *load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)$/;"	f	signature:(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)
load_labels_paths	src/data.c	/^matrix load_labels_paths(char **paths, int n, char **labels, int k, tree *hierarchy)$/;"	f	signature:(char **paths, int n, char **labels, int k, tree *hierarchy)
load_meta	python/darknet.py	/^def load_meta(f):$/;"	f	access:public
load_net	python/darknet.py	/^def load_net(cfg, weights):$/;"	f	access:public
load_network	src/network.c	/^network load_network(char *cfg, char *weights, int clear)$/;"	f	signature:(char *cfg, char *weights, int clear)
load_network_p	src/network.c	/^network *load_network_p(char *cfg, char *weights, int clear)$/;"	f	signature:(char *cfg, char *weights, int clear)
load_regression_labels_paths	src/data.c	/^matrix load_regression_labels_paths(char **paths, int n)$/;"	f	signature:(char **paths, int n)
load_rle	src/data.c	/^void load_rle(image im, int *rle, int n)$/;"	f	signature:(image im, int *rle, int n)
load_tags_paths	src/data.c	/^matrix load_tags_paths(char **paths, int n, int k)$/;"	f	signature:(char **paths, int n, int k)
load_thread	src/data.c	/^void *load_thread(void *ptr)$/;"	f	signature:(void *ptr)
load_threads	src/data.c	/^void *load_threads(void *ptr)$/;"	f	signature:(void *ptr)
load_weights	src/parser.c	/^void load_weights(network *net, char *filename)$/;"	f	signature:(network *net, char *filename)
load_weights_upto	src/parser.c	/^void load_weights_upto(network *net, char *filename, int start, int cutoff)$/;"	f	signature:(network *net, char *filename, int start, int cutoff)
local_layer	src/local_layer.h	/^typedef layer local_layer;$/;"	t
local_out_height	src/local_layer.c	/^int local_out_height(local_layer l)$/;"	f	signature:(local_layer l)
local_out_width	src/local_layer.c	/^int local_out_width(local_layer l)$/;"	f	signature:(local_layer l)
log	include/darknet.h	/^    int log;$/;"	m	struct:layer	access:public
loggy_activate	src/activations.h	/^static inline float loggy_activate(float x){return 2.\/(1. + exp(-x)) - 1;}$/;"	f	signature:(float x)
loggy_activate_kernel	src/activation_kernels.cu	/^__device__ float loggy_activate_kernel(float x){return 2.\/(1. + exp(-x)) - 1;}$/;"	f	signature:(float x)
loggy_gradient	src/activations.h	/^static inline float loggy_gradient(float x)$/;"	f	signature:(float x)
loggy_gradient_kernel	src/activation_kernels.cu	/^__device__ float loggy_gradient_kernel(float x)$/;"	f	signature:(float x)
logistic_activate	src/activations.h	/^static inline float logistic_activate(float x){return 1.\/(1. + exp(-x));}$/;"	f	signature:(float x)
logistic_activate_kernel	src/activation_kernels.cu	/^__device__ float logistic_activate_kernel(float x){return 1.\/(1. + exp(-x));}$/;"	f	signature:(float x)
logistic_gradient	src/activations.h	/^static inline float logistic_gradient(float x){return (1-x)*x;}$/;"	f	signature:(float x)
logistic_gradient_kernel	src/activation_kernels.cu	/^__device__ float logistic_gradient_kernel(float x){return (1-x)*x;}$/;"	f	signature:(float x)
logit	src/region_layer.c	/^float logit(float x)$/;"	f	signature:(float x)
lpal	src/stb_image.h	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anon35	access:public
m	include/darknet.h	/^    float * m;$/;"	m	struct:layer	access:public
m	include/darknet.h	/^    int m;$/;"	m	struct:load_args	access:public
m_gpu	include/darknet.h	/^    float *m_gpu;$/;"	m	struct:layer	access:public
mag_array	src/utils.c	/^float mag_array(float *a, int n)$/;"	f	signature:(float *a, int n)
main	examples/darknet.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
make_activation_layer	src/activation_layer.c	/^layer make_activation_layer(int batch, int inputs, ACTIVATION activation)$/;"	f	signature:(int batch, int inputs, ACTIVATION activation)
make_avgpool_layer	src/avgpool_layer.c	/^avgpool_layer make_avgpool_layer(int batch, int w, int h, int c)$/;"	f	signature:(int batch, int w, int h, int c)
make_batchnorm_layer	src/batchnorm_layer.c	/^layer make_batchnorm_layer(int batch, int w, int h, int c)$/;"	f	signature:(int batch, int w, int h, int c)
make_connected_layer	src/connected_layer.c	/^layer make_connected_layer(int batch, int inputs, int outputs, ACTIVATION activation, int batch_normalize, int adam)$/;"	f	signature:(int batch, int inputs, int outputs, ACTIVATION activation, int batch_normalize, int adam)
make_convolutional_layer	src/convolutional_layer.c	/^convolutional_layer make_convolutional_layer(int batch, int h, int w, int c, int n, int size, int stride, int padding, ACTIVATION activation, int batch_normalize, int binary, int xnor, int adam)$/;"	f	signature:(int batch, int h, int w, int c, int n, int size, int stride, int padding, ACTIVATION activation, int batch_normalize, int binary, int xnor, int adam)
make_cost_layer	src/cost_layer.c	/^cost_layer make_cost_layer(int batch, int inputs, COST_TYPE cost_type, float scale)$/;"	f	signature:(int batch, int inputs, COST_TYPE cost_type, float scale)
make_crnn_layer	src/crnn_layer.c	/^layer make_crnn_layer(int batch, int h, int w, int c, int hidden_filters, int output_filters, int steps, ACTIVATION activation, int batch_normalize)$/;"	f	signature:(int batch, int h, int w, int c, int hidden_filters, int output_filters, int steps, ACTIVATION activation, int batch_normalize)
make_crop_layer	src/crop_layer.c	/^crop_layer make_crop_layer(int batch, int h, int w, int c, int crop_height, int crop_width, int flip, float angle, float saturation, float exposure)$/;"	f	signature:(int batch, int h, int w, int c, int crop_height, int crop_width, int flip, float angle, float saturation, float exposure)
make_deconvolutional_layer	src/deconvolutional_layer.c	/^layer make_deconvolutional_layer(int batch, int h, int w, int c, int n, int size, int stride, int padding, ACTIVATION activation, int batch_normalize, int adam)$/;"	f	signature:(int batch, int h, int w, int c, int n, int size, int stride, int padding, ACTIVATION activation, int batch_normalize, int adam)
make_detection_layer	src/detection_layer.c	/^detection_layer make_detection_layer(int batch, int inputs, int n, int side, int classes, int coords, int rescore)$/;"	f	signature:(int batch, int inputs, int n, int side, int classes, int coords, int rescore)
make_dropout_layer	src/dropout_layer.c	/^dropout_layer make_dropout_layer(int batch, int inputs, float probability)$/;"	f	signature:(int batch, int inputs, float probability)
make_empty_image	src/image.c	/^image make_empty_image(int w, int h, int c)$/;"	f	signature:(int w, int h, int c)
make_gru_layer	src/gru_layer.c	/^layer make_gru_layer(int batch, int inputs, int outputs, int steps, int batch_normalize, int adam)$/;"	f	signature:(int batch, int inputs, int outputs, int steps, int batch_normalize, int adam)
make_image	src/image.c	/^image make_image(int w, int h, int c)$/;"	f	signature:(int w, int h, int c)
make_labels	data/labels/make_labels.py	/^def make_labels(s):$/;"	f	access:public
make_list	src/list.c	/^list *make_list()$/;"	f
make_local_layer	src/local_layer.c	/^local_layer make_local_layer(int batch, int h, int w, int c, int n, int size, int stride, int pad, ACTIVATION activation)$/;"	f	signature:(int batch, int h, int w, int c, int n, int size, int stride, int pad, ACTIVATION activation)
make_lstm_layer	src/lstm_layer.c	/^layer make_lstm_layer(int batch, int inputs, int outputs, int steps, int batch_normalize, int adam)$/;"	f	signature:(int batch, int inputs, int outputs, int steps, int batch_normalize, int adam)
make_matrix	src/matrix.c	/^matrix make_matrix(int rows, int cols)$/;"	f	signature:(int rows, int cols)
make_maxpool_layer	src/maxpool_layer.c	/^maxpool_layer make_maxpool_layer(int batch, int h, int w, int c, int size, int stride, int padding)$/;"	f	signature:(int batch, int h, int w, int c, int size, int stride, int padding)
make_network	src/network.c	/^network make_network(int n)$/;"	f	signature:(int n)
make_normalization_layer	src/normalization_layer.c	/^layer make_normalization_layer(int batch, int w, int h, int c, int size, float alpha, float beta, float kappa)$/;"	f	signature:(int batch, int w, int h, int c, int size, float alpha, float beta, float kappa)
make_random_image	src/image.c	/^image make_random_image(int w, int h, int c)$/;"	f	signature:(int w, int h, int c)
make_region_layer	src/region_layer.c	/^layer make_region_layer(int batch, int w, int h, int n, int classes, int coords)$/;"	f	signature:(int batch, int w, int h, int n, int classes, int coords)
make_reorg_layer	src/reorg_layer.c	/^layer make_reorg_layer(int batch, int w, int h, int c, int stride, int reverse, int flatten, int extra)$/;"	f	signature:(int batch, int w, int h, int c, int stride, int reverse, int flatten, int extra)
make_rnn_layer	src/rnn_layer.c	/^layer make_rnn_layer(int batch, int inputs, int outputs, int steps, ACTIVATION activation, int batch_normalize, int adam)$/;"	f	signature:(int batch, int inputs, int outputs, int steps, ACTIVATION activation, int batch_normalize, int adam)
make_route_layer	src/route_layer.c	/^route_layer make_route_layer(int batch, int n, int *input_layers, int *input_sizes)$/;"	f	signature:(int batch, int n, int *input_layers, int *input_sizes)
make_shortcut_layer	src/shortcut_layer.c	/^layer make_shortcut_layer(int batch, int index, int w, int h, int c, int w2, int h2, int c2)$/;"	f	signature:(int batch, int index, int w, int h, int c, int w2, int h2, int c2)
make_softmax_layer	src/softmax_layer.c	/^softmax_layer make_softmax_layer(int batch, int inputs, int groups)$/;"	f	signature:(int batch, int inputs, int groups)
makes_safe_go	examples/go.c	/^int makes_safe_go(float *b, int *lib, int p, int r, int c){$/;"	f	signature:(float *b, int *lib, int p, int r, int c)
malloc_error	src/utils.c	/^void malloc_error()$/;"	f
map	include/darknet.h	/^    int   * map;$/;"	m	struct:layer	access:public
marker	src/stb_image.h	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon25	access:public
mask_gpu	src/blas_kernels.cu	/^extern "C" void mask_gpu(int N, float * X, float mask_num, float * mask)$/;"	f	signature:(int N, float * X, float mask_num, float * mask)
mask_kernel	src/blas_kernels.cu	/^__global__ void mask_kernel(int n,  float *x, float mask_num, float *mask)$/;"	f	signature:(int n, float *x, float mask_num, float *mask)
mask_to_rgb	src/image.c	/^image mask_to_rgb(image mask)$/;"	f	signature:(image mask)
matrix	include/darknet.h	/^typedef struct matrix{$/;"	s
matrix	include/darknet.h	/^} matrix;$/;"	t	typeref:struct:matrix
matrix::cols	include/darknet.h	/^    int rows, cols;$/;"	m	struct:matrix	access:public
matrix::rows	include/darknet.h	/^    int rows, cols;$/;"	m	struct:matrix	access:public
matrix::vals	include/darknet.h	/^    float **vals;$/;"	m	struct:matrix	access:public
matrix_add_matrix	src/matrix.c	/^void matrix_add_matrix(matrix from, matrix to)$/;"	f	signature:(matrix from, matrix to)
matrix_to_csv	src/matrix.c	/^void matrix_to_csv(matrix m)$/;"	f	signature:(matrix m)
matrix_topk_accuracy	src/matrix.c	/^float matrix_topk_accuracy(matrix truth, matrix guess, int k)$/;"	f	signature:(matrix truth, matrix guess, int k)
max	include/darknet.h	/^    int min, max, size;$/;"	m	struct:load_args	access:public
max_batches	include/darknet.h	/^    int max_batches;$/;"	m	struct:network	access:public
max_boxes	include/darknet.h	/^    int max_boxes;$/;"	m	struct:layer	access:public
max_crop	include/darknet.h	/^    int max_crop;$/;"	m	struct:network	access:public
max_index	src/utils.c	/^int max_index(float *a, int n)$/;"	f	signature:(float *a, int n)
max_x	src/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon35	access:public
max_y	src/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon35	access:public
maxcode	src/stb_image.h	/^   int maxcode[17];$/;"	m	struct:__anon28	access:public
maxcode	src/stb_image.h	/^   unsigned int maxcode[18];$/;"	m	struct:__anon24	access:public
maxpool_layer	src/maxpool_layer.h	/^typedef layer maxpool_layer;$/;"	t
mean	include/darknet.h	/^    float * mean;$/;"	m	struct:layer	access:public
mean_array	src/utils.c	/^float mean_array(float *a, int n)$/;"	f	signature:(float *a, int n)
mean_arrays	src/utils.c	/^void mean_arrays(float **a, int n, int els, float *avg)$/;"	f	signature:(float **a, int n, int els, float *avg)
mean_cpu	src/blas.c	/^void mean_cpu(float *x, int batch, int filters, int spatial, float *mean)$/;"	f	signature:(float *x, int batch, int filters, int spatial, float *mean)
mean_delta	include/darknet.h	/^    float * mean_delta;$/;"	m	struct:layer	access:public
mean_delta_cpu	src/batchnorm_layer.c	/^void mean_delta_cpu(float *delta, float *variance, int batch, int filters, int spatial, float *mean_delta)$/;"	f	signature:(float *delta, float *variance, int batch, int filters, int spatial, float *mean_delta)
mean_delta_gpu	include/darknet.h	/^    float * mean_delta_gpu;$/;"	m	struct:layer	access:public
mean_delta_gpu	src/blas_kernels.cu	/^extern "C" void mean_delta_gpu(float *delta, float *variance, int batch, int filters, int spatial, float *mean_delta)$/;"	f	signature:(float *delta, float *variance, int batch, int filters, int spatial, float *mean_delta)
mean_delta_kernel	src/blas_kernels.cu	/^__global__ void mean_delta_kernel(float *delta, float *variance, int batch, int filters, int spatial, float *mean_delta)$/;"	f	signature:(float *delta, float *variance, int batch, int filters, int spatial, float *mean_delta)
mean_gpu	include/darknet.h	/^    float * mean_gpu;$/;"	m	struct:layer	access:public
mean_gpu	src/blas_kernels.cu	/^extern "C" void mean_gpu(float *x, int batch, int filters, int spatial, float *mean)$/;"	f	signature:(float *x, int batch, int filters, int spatial, float *mean)
mean_kernel	src/blas_kernels.cu	/^__global__ void  mean_kernel(float *x, int batch, int filters, int spatial, float *mean)$/;"	f	signature:(float *x, int batch, int filters, int spatial, float *mean)
merge_weights	src/network_kernels.cu	/^void merge_weights(layer l, layer base)$/;"	f	signature:(layer l, layer base)
meta	python/darknet.py	/^    meta = load_meta("cfg\/imagenet1k.data")$/;"	v
metadata	include/darknet.h	/^} metadata;$/;"	t	typeref:struct:__anon4
min	include/darknet.h	/^    int min, max, size;$/;"	m	struct:load_args	access:public
min_crop	include/darknet.h	/^    int min_crop;$/;"	m	struct:network	access:public
mkimg	examples/darknet.c	/^void mkimg(char *cfgfile, char *weightfile, int h, int w, int num, char *prefix)$/;"	f	signature:(char *cfgfile, char *weightfile, int h, int w, int num, char *prefix)
momentum	include/darknet.h	/^    float momentum;$/;"	m	struct:__anon9	access:public
momentum	include/darknet.h	/^    float momentum;$/;"	m	struct:network	access:public
move_go	examples/go.c	/^void move_go(float *b, int p, int r, int c)$/;"	f	signature:(float *b, int p, int r, int c)
moves	examples/go.c	/^} moves;$/;"	t	typeref:struct:__anon1	file:
mse_array	src/utils.c	/^float mse_array(float *a, int n)$/;"	f	signature:(float *a, int n)
mul_cpu	src/blas.c	/^void mul_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f	signature:(int N, float *X, int INCX, float *Y, int INCY)
mul_gpu	src/blas_kernels.cu	/^extern "C" void mul_gpu(int N, float * X, int INCX, float * Y, int INCY)$/;"	f	signature:(int N, float * X, int INCX, float * Y, int INCY)
mul_kernel	src/blas_kernels.cu	/^__global__ void mul_kernel(int N, float *X, int INCX, float *Y, int INCY)$/;"	f	signature:(int N, float *X, int INCX, float *Y, int INCY)
mult_add_into_cpu	src/blas.c	/^void mult_add_into_cpu(int N, float *X, float *Y, float *Z)$/;"	f	signature:(int N, float *X, float *Y, float *Z)
mult_add_into_gpu	src/blas_kernels.cu	/^extern "C" void mult_add_into_gpu(int num, float *a, float *b, float *c)$/;"	f	signature:(int num, float *a, float *b, float *c)
mult_add_into_kernel	src/blas_kernels.cu	/^__global__ void mult_add_into_kernel(int n, float *a, float *b, float *c)$/;"	f	signature:(int n, float *a, float *b, float *c)
mutex	src/data.c	/^pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
n	examples/go.c	/^    int n;$/;"	m	struct:__anon1	file:	access:public
n	include/darknet.h	/^    int n;$/;"	m	struct:__anon5	access:public
n	include/darknet.h	/^    int n;$/;"	m	struct:layer	access:public
n	include/darknet.h	/^    int n;$/;"	m	struct:load_args	access:public
n	include/darknet.h	/^    int n;$/;"	m	struct:network	access:public
n	src/network_kernels.cu	/^    int n;$/;"	m	struct:__anon19	file:	access:public
name	include/darknet.h	/^    char **name;$/;"	m	struct:__anon5	access:public
names	include/darknet.h	/^    char **names;$/;"	m	struct:__anon4	access:public
nbiases	include/darknet.h	/^    int nbiases;$/;"	m	struct:layer	access:public
net	python/darknet.py	/^    net = load_net("cfg\/densenet.cfg", "\/home\/pjreddie\/trained\/densenet201.weights")$/;"	v
net	src/compare.c	/^    network net;$/;"	m	struct:__anon17	file:	access:public
net	src/demo.c	/^static network net;$/;"	v	file:
net	src/network_kernels.cu	/^    network net;$/;"	m	struct:__anon18	file:	access:public
net	src/parser.c	/^    network net;$/;"	m	struct:size_params	file:	access:public
nets	src/network_kernels.cu	/^    network *nets;$/;"	m	struct:__anon19	file:	access:public
network	include/darknet.h	/^typedef struct network network;$/;"	t	typeref:struct:network
network	include/darknet.h	/^typedef struct network{$/;"	s
network	include/darknet.h	/^} network;$/;"	t	typeref:struct:network
network::B1	include/darknet.h	/^    float B1;$/;"	m	struct:network	access:public
network::B2	include/darknet.h	/^    float B2;$/;"	m	struct:network	access:public
network::adam	include/darknet.h	/^    int adam;$/;"	m	struct:network	access:public
network::angle	include/darknet.h	/^    float angle;$/;"	m	struct:network	access:public
network::aspect	include/darknet.h	/^    float aspect;$/;"	m	struct:network	access:public
network::batch	include/darknet.h	/^    int batch;$/;"	m	struct:network	access:public
network::burn_in	include/darknet.h	/^    int burn_in;$/;"	m	struct:network	access:public
network::c	include/darknet.h	/^    int h, w, c;$/;"	m	struct:network	access:public
network::center	include/darknet.h	/^    int center;$/;"	m	struct:network	access:public
network::cost	include/darknet.h	/^    float *cost;$/;"	m	struct:network	access:public
network::decay	include/darknet.h	/^    float decay;$/;"	m	struct:network	access:public
network::delta	include/darknet.h	/^    float *delta;$/;"	m	struct:network	access:public
network::delta_gpu	include/darknet.h	/^    float *delta_gpu;$/;"	m	struct:network	access:public
network::epoch	include/darknet.h	/^    float epoch;$/;"	m	struct:network	access:public
network::eps	include/darknet.h	/^    float eps;$/;"	m	struct:network	access:public
network::exposure	include/darknet.h	/^    float exposure;$/;"	m	struct:network	access:public
network::gamma	include/darknet.h	/^    float gamma;$/;"	m	struct:network	access:public
network::gpu_index	include/darknet.h	/^    int gpu_index;$/;"	m	struct:network	access:public
network::h	include/darknet.h	/^    int h, w, c;$/;"	m	struct:network	access:public
network::hierarchy	include/darknet.h	/^    tree *hierarchy;$/;"	m	struct:network	access:public
network::hue	include/darknet.h	/^    float hue;$/;"	m	struct:network	access:public
network::index	include/darknet.h	/^    int index;$/;"	m	struct:network	access:public
network::input	include/darknet.h	/^    float *input;$/;"	m	struct:network	access:public
network::input_gpu	include/darknet.h	/^    float *input_gpu;$/;"	m	struct:network	access:public
network::inputs	include/darknet.h	/^    int inputs;$/;"	m	struct:network	access:public
network::layers	include/darknet.h	/^    layer *layers;$/;"	m	struct:network	access:public
network::learning_rate	include/darknet.h	/^    float learning_rate;$/;"	m	struct:network	access:public
network::max_batches	include/darknet.h	/^    int max_batches;$/;"	m	struct:network	access:public
network::max_crop	include/darknet.h	/^    int max_crop;$/;"	m	struct:network	access:public
network::min_crop	include/darknet.h	/^    int min_crop;$/;"	m	struct:network	access:public
network::momentum	include/darknet.h	/^    float momentum;$/;"	m	struct:network	access:public
network::n	include/darknet.h	/^    int n;$/;"	m	struct:network	access:public
network::notruth	include/darknet.h	/^    int notruth;$/;"	m	struct:network	access:public
network::num_steps	include/darknet.h	/^    int num_steps;$/;"	m	struct:network	access:public
network::output	include/darknet.h	/^    float *output;$/;"	m	struct:network	access:public
network::output_gpu	include/darknet.h	/^    float *output_gpu;$/;"	m	struct:network	access:public
network::outputs	include/darknet.h	/^    int outputs;$/;"	m	struct:network	access:public
network::policy	include/darknet.h	/^    learning_rate_policy policy;$/;"	m	struct:network	access:public
network::power	include/darknet.h	/^    float power;$/;"	m	struct:network	access:public
network::saturation	include/darknet.h	/^    float saturation;$/;"	m	struct:network	access:public
network::scale	include/darknet.h	/^    float scale;$/;"	m	struct:network	access:public
network::scales	include/darknet.h	/^    float *scales;$/;"	m	struct:network	access:public
network::seen	include/darknet.h	/^    size_t *seen;$/;"	m	struct:network	access:public
network::step	include/darknet.h	/^    int step;$/;"	m	struct:network	access:public
network::steps	include/darknet.h	/^    int   *steps;$/;"	m	struct:network	access:public
network::subdivisions	include/darknet.h	/^    int subdivisions;$/;"	m	struct:network	access:public
network::t	include/darknet.h	/^    int *t;$/;"	m	struct:network	access:public
network::time_steps	include/darknet.h	/^    int time_steps;$/;"	m	struct:network	access:public
network::train	include/darknet.h	/^    int train;$/;"	m	struct:network	access:public
network::truth	include/darknet.h	/^    float *truth;$/;"	m	struct:network	access:public
network::truth_gpu	include/darknet.h	/^    float *truth_gpu;$/;"	m	struct:network	access:public
network::truths	include/darknet.h	/^    int truths;$/;"	m	struct:network	access:public
network::w	include/darknet.h	/^    int h, w, c;$/;"	m	struct:network	access:public
network::workspace	include/darknet.h	/^    float *workspace;$/;"	m	struct:network	access:public
network_accuracies	src/network.c	/^float *network_accuracies(network net, data d, int n)$/;"	f	signature:(network net, data d, int n)
network_accuracy	src/network.c	/^float network_accuracy(network net, data d)$/;"	f	signature:(network net, data d)
network_accuracy_multi	src/network.c	/^float network_accuracy_multi(network net, data d, int n)$/;"	f	signature:(network net, data d, int n)
network_height	src/network.c	/^int network_height(network *net){return net->h;}$/;"	f	signature:(network *net)
network_inputs	src/network.c	/^int network_inputs(network net)$/;"	f	signature:(network net)
network_output	src/network.c	/^float *network_output(network net)$/;"	f	signature:(network net)
network_output_layer	src/network.c	/^layer network_output_layer(network net)$/;"	f	signature:(network net)
network_outputs	src/network.c	/^int network_outputs(network net)$/;"	f	signature:(network net)
network_predict	src/network.c	/^float *network_predict(network net, float *input)$/;"	f	signature:(network net, float *input)
network_predict_data	src/network.c	/^matrix network_predict_data(network net, data test)$/;"	f	signature:(network net, data test)
network_predict_data_multi	src/network.c	/^matrix network_predict_data_multi(network net, data test, int n)$/;"	f	signature:(network net, data test, int n)
network_predict_gpu	src/network_kernels.cu	/^float *network_predict_gpu(network net, float *input)$/;"	f	signature:(network net, float *input)
network_predict_image	src/network.c	/^float *network_predict_image(network *net, image im)$/;"	f	signature:(network *net, image im)
network_predict_p	src/network.c	/^float *network_predict_p(network *net, float *input)$/;"	f	signature:(network *net, float *input)
network_width	src/network.c	/^int network_width(network *net){return net->w;}$/;"	f	signature:(network *net)
next	include/darknet.h	/^    struct node *next;$/;"	m	struct:node	typeref:struct:node::node	access:public
nh	include/darknet.h	/^    int nh;$/;"	m	struct:load_args	access:public
nind	examples/go.c	/^static const int nind = 2;$/;"	v	file:
nms_comparator	src/box.c	/^int nms_comparator(const void *pa, const void *pb)$/;"	f	signature:(const void *pa, const void *pb)
noadjust	include/darknet.h	/^    int noadjust;$/;"	m	struct:layer	access:public
node	include/darknet.h	/^typedef struct node{$/;"	s
node	include/darknet.h	/^} node;$/;"	t	typeref:struct:node
node::next	include/darknet.h	/^    struct node *next;$/;"	m	struct:node	typeref:struct:node::node	access:public
node::prev	include/darknet.h	/^    struct node *prev;$/;"	m	struct:node	typeref:struct:node::node	access:public
node::val	include/darknet.h	/^    void *val;$/;"	m	struct:node	access:public
noi	examples/go.c	/^int noi = 1;$/;"	v
nomore	src/stb_image.h	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon25	access:public
noobject_scale	include/darknet.h	/^    float noobject_scale;$/;"	m	struct:layer	access:public
normTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t normTensorDesc;$/;"	m	struct:layer	access:public
normalize_array	src/utils.c	/^void normalize_array(float *a, int n)$/;"	f	signature:(float *a, int n)
normalize_cpu	src/blas.c	/^void normalize_cpu(float *x, float *mean, float *variance, int batch, int filters, int spatial)$/;"	f	signature:(float *x, float *mean, float *variance, int batch, int filters, int spatial)
normalize_data_rows	src/data.c	/^void normalize_data_rows(data d)$/;"	f	signature:(data d)
normalize_delta_cpu	src/batchnorm_layer.c	/^void normalize_delta_cpu(float *x, float *mean, float *variance, float *mean_delta, float *variance_delta, int batch, int filters, int spatial, float *delta)$/;"	f	signature:(float *x, float *mean, float *variance, float *mean_delta, float *variance_delta, int batch, int filters, int spatial, float *delta)
normalize_delta_gpu	src/blas_kernels.cu	/^extern "C" void normalize_delta_gpu(float *x, float *mean, float *variance, float *mean_delta, float *variance_delta, int batch, int filters, int spatial, float *delta)$/;"	f	signature:(float *x, float *mean, float *variance, float *mean_delta, float *variance_delta, int batch, int filters, int spatial, float *delta)
normalize_delta_kernel	src/blas_kernels.cu	/^__global__ void normalize_delta_kernel(int N, float *x, float *mean, float *variance, float *mean_delta, float *variance_delta, int batch, int filters, int spatial, float *delta)$/;"	f	signature:(int N, float *x, float *mean, float *variance, float *mean_delta, float *variance_delta, int batch, int filters, int spatial, float *delta)
normalize_gpu	src/blas_kernels.cu	/^extern "C" void normalize_gpu(float *x, float *mean, float *variance, int batch, int filters, int spatial)$/;"	f	signature:(float *x, float *mean, float *variance, int batch, int filters, int spatial)
normalize_image	src/image.c	/^void normalize_image(image p)$/;"	f	signature:(image p)
normalize_image2	src/image.c	/^void normalize_image2(image p)$/;"	f	signature:(image p)
normalize_kernel	src/blas_kernels.cu	/^__global__ void normalize_kernel(int N, float *x, float *mean, float *variance, int batch, int filters, int spatial)$/;"	f	signature:(int N, float *x, float *mean, float *variance, int batch, int filters, int spatial)
normalize_layer	examples/darknet.c	/^layer normalize_layer(layer l, int n)$/;"	f	signature:(layer l, int n)
normalize_net	examples/darknet.c	/^void normalize_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f	signature:(char *cfgfile, char *weightfile, char *outfile)
norms	include/darknet.h	/^    float * norms;$/;"	m	struct:layer	access:public
norms_gpu	include/darknet.h	/^    float * norms_gpu;$/;"	m	struct:layer	access:public
notruth	include/darknet.h	/^    int notruth;$/;"	m	struct:network	access:public
num_bits	src/stb_image.h	/^   int num_bits;$/;"	m	struct:__anon29	access:public
num_boxes	include/darknet.h	/^    int *num_boxes;$/;"	m	struct:__anon14	access:public
num_boxes	include/darknet.h	/^    int num_boxes;$/;"	m	struct:load_args	access:public
num_steps	include/darknet.h	/^    int num_steps;$/;"	m	struct:network	access:public
nw	include/darknet.h	/^    int nw;$/;"	m	struct:load_args	access:public
nweights	include/darknet.h	/^    int nweights;$/;"	m	struct:layer	access:public
o_cpu	include/darknet.h	/^    float *o_cpu;$/;"	m	struct:layer	access:public
o_gpu	include/darknet.h	/^    float *o_gpu;$/;"	m	struct:layer	access:public
object_scale	include/darknet.h	/^    float object_scale;$/;"	m	struct:layer	access:public
objectness	include/darknet.h	/^    int objectness;$/;"	m	struct:layer	access:public
one_hot_encode	src/utils.c	/^float **one_hot_encode(float *a, int n, int k)$/;"	f	signature:(float *a, int n, int k)
oneoff	examples/darknet.c	/^void oneoff(char *cfgfile, char *weightfile, char *outfile)$/;"	f	signature:(char *cfgfile, char *weightfile, char *outfile)
oneoff2	examples/darknet.c	/^void oneoff2(char *cfgfile, char *weightfile, char *outfile, int l)$/;"	f	signature:(char *cfgfile, char *weightfile, char *outfile, int l)
onlyforward	include/darknet.h	/^    int onlyforward;$/;"	m	struct:layer	access:public
operations	examples/darknet.c	/^void operations(char *cfgfile)$/;"	f	signature:(char *cfgfile)
optimize_picture	examples/nightmare.c	/^void optimize_picture(network *net, image orig, int max_layer, float scale, float rate, float thresh, int norm)$/;"	f	signature:(network *net, image orig, int max_layer, float scale, float rate, float thresh, int norm)
option_find	src/option_list.c	/^char *option_find(list *l, char *key)$/;"	f	signature:(list *l, char *key)
option_find_float	src/option_list.c	/^float option_find_float(list *l, char *key, float def)$/;"	f	signature:(list *l, char *key, float def)
option_find_float_quiet	src/option_list.c	/^float option_find_float_quiet(list *l, char *key, float def)$/;"	f	signature:(list *l, char *key, float def)
option_find_int	src/option_list.c	/^int option_find_int(list *l, char *key, int def)$/;"	f	signature:(list *l, char *key, int def)
option_find_int_quiet	src/option_list.c	/^int option_find_int_quiet(list *l, char *key, int def)$/;"	f	signature:(list *l, char *key, int def)
option_find_str	src/option_list.c	/^char *option_find_str(list *l, char *key, char *def)$/;"	f	signature:(list *l, char *key, char *def)
option_insert	src/option_list.c	/^void option_insert(list *l, char *key, char *val)$/;"	f	signature:(list *l, char *key, char *val)
option_unused	src/option_list.c	/^void option_unused(list *l)$/;"	f	signature:(list *l)
options	src/parser.c	/^    list *options;$/;"	m	struct:__anon38	file:	access:public
or_image	src/data.c	/^void or_image(image src, image dest, int c)$/;"	f	signature:(image src, image dest, int c)
order	src/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon25	access:public
out	src/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon31	access:public
out	src/stb_image.h	/^   stbi_uc *out;                 \/\/ output buffer (always 4 components)$/;"	m	struct:__anon35	access:public
out_c	include/darknet.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer	access:public
out_h	include/darknet.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer	access:public
out_h	include/darknet.h	/^    int out_h;$/;"	m	struct:load_args	access:public
out_w	include/darknet.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer	access:public
out_w	include/darknet.h	/^    int out_w;$/;"	m	struct:load_args	access:public
outfile	src/stb_image_write.h	/^static int outfile(char const *filename, int rgb_dir, int vdir, int x, int y, int comp, int expand_mono, void *data, int alpha, int pad, const char *fmt, ...)$/;"	f	signature:(char const *filename, int rgb_dir, int vdir, int x, int y, int comp, int expand_mono, void *data, int alpha, int pad, const char *fmt, ...)
output	include/darknet.h	/^    float * output;$/;"	m	struct:layer	access:public
output	include/darknet.h	/^    float *output;$/;"	m	struct:network	access:public
output_gpu	include/darknet.h	/^    float * output_gpu;$/;"	m	struct:layer	access:public
output_gpu	include/darknet.h	/^    float *output_gpu;$/;"	m	struct:network	access:public
output_layer	include/darknet.h	/^    struct layer *output_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
outputs	include/darknet.h	/^    int outputs;$/;"	m	struct:layer	access:public
outputs	include/darknet.h	/^    int outputs;$/;"	m	struct:network	access:public
overlap	src/box.c	/^float overlap(float x1, float w1, float x2, float w2)$/;"	f	signature:(float x1, float w1, float x2, float w2)
pad	include/darknet.h	/^    int pad;$/;"	m	struct:layer	access:public
pal	src/stb_image.h	/^   stbi_uc  pal[256][4];$/;"	m	struct:__anon35	access:public
parent	include/darknet.h	/^    int *parent;$/;"	m	struct:__anon5	access:public
parse	src/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon35	access:public
parse_activation	src/parser.c	/^layer parse_activation(list *options, size_params params)$/;"	f	signature:(list *options, size_params params)
parse_avgpool	src/parser.c	/^avgpool_layer parse_avgpool(list *options, size_params params)$/;"	f	signature:(list *options, size_params params)
parse_batchnorm	src/parser.c	/^layer parse_batchnorm(list *options, size_params params)$/;"	f	signature:(list *options, size_params params)
parse_connected	src/parser.c	/^layer parse_connected(list *options, size_params params)$/;"	f	signature:(list *options, size_params params)
parse_convolutional	src/parser.c	/^convolutional_layer parse_convolutional(list *options, size_params params)$/;"	f	signature:(list *options, size_params params)
parse_cost	src/parser.c	/^cost_layer parse_cost(list *options, size_params params)$/;"	f	signature:(list *options, size_params params)
parse_crnn	src/parser.c	/^layer parse_crnn(list *options, size_params params)$/;"	f	signature:(list *options, size_params params)
parse_crop	src/parser.c	/^crop_layer parse_crop(list *options, size_params params)$/;"	f	signature:(list *options, size_params params)
parse_csv_line	src/utils.c	/^list *parse_csv_line(char *line)$/;"	f	signature:(char *line)
parse_data	src/parser.c	/^void parse_data(char *data, float *a, int n)$/;"	f	signature:(char *data, float *a, int n)
parse_deconvolutional	src/parser.c	/^layer parse_deconvolutional(list *options, size_params params)$/;"	f	signature:(list *options, size_params params)
parse_detection	src/parser.c	/^detection_layer parse_detection(list *options, size_params params)$/;"	f	signature:(list *options, size_params params)
parse_dropout	src/parser.c	/^dropout_layer parse_dropout(list *options, size_params params)$/;"	f	signature:(list *options, size_params params)
parse_fields	src/utils.c	/^float *parse_fields(char *line, int n)$/;"	f	signature:(char *line, int n)
parse_gru	src/parser.c	/^layer parse_gru(list *options, size_params params)$/;"	f	signature:(list *options, size_params params)
parse_local	src/parser.c	/^local_layer parse_local(list *options, size_params params)$/;"	f	signature:(list *options, size_params params)
parse_lstm	src/parser.c	/^layer parse_lstm(list *options, size_params params)$/;"	f	signature:(list *options, size_params params)
parse_maxpool	src/parser.c	/^maxpool_layer parse_maxpool(list *options, size_params params)$/;"	f	signature:(list *options, size_params params)
parse_net_options	src/parser.c	/^void parse_net_options(list *options, network *net)\/\/将参数提取并配置为net的成员变量$/;"	f	signature:(list *options, network *net)
parse_network_cfg	src/parser.c	/^network parse_network_cfg(char *filename)$/;"	f	signature:(char *filename)
parse_normalization	src/parser.c	/^layer parse_normalization(list *options, size_params params)$/;"	f	signature:(list *options, size_params params)
parse_region	src/parser.c	/^layer parse_region(list *options, size_params params)$/;"	f	signature:(list *options, size_params params)
parse_reorg	src/parser.c	/^layer parse_reorg(list *options, size_params params)$/;"	f	signature:(list *options, size_params params)
parse_rnn	src/parser.c	/^layer parse_rnn(list *options, size_params params)$/;"	f	signature:(list *options, size_params params)
parse_route	src/parser.c	/^route_layer parse_route(list *options, size_params params, network net)$/;"	f	signature:(list *options, size_params params, network net)
parse_shortcut	src/parser.c	/^layer parse_shortcut(list *options, size_params params, network net)$/;"	f	signature:(list *options, size_params params, network net)
parse_softmax	src/parser.c	/^softmax_layer parse_softmax(list *options, size_params params)$/;"	f	signature:(list *options, size_params params)
partial	examples/darknet.c	/^void partial(char *cfgfile, char *weightfile, char *outfile, int max)$/;"	f	signature:(char *cfgfile, char *weightfile, char *outfile, int max)
path	include/darknet.h	/^    char *path;$/;"	m	struct:load_args	access:public
paths	include/darknet.h	/^    char **paths;$/;"	m	struct:load_args	access:public
place_image	src/image.c	/^void place_image(image im, int w, int h, int dx, int dy, image canvas)$/;"	f	signature:(image im, int w, int h, int dx, int dy, image canvas)
plse_activate	src/activations.h	/^static inline float plse_activate(float x)$/;"	f	signature:(float x)
plse_activate_kernel	src/activation_kernels.cu	/^__device__ float plse_activate_kernel(float x)$/;"	f	signature:(float x)
plse_gradient	src/activations.h	/^static inline float plse_gradient(float x){return (x < 0 || x > 1) ? .01 : .125;}$/;"	f	signature:(float x)
plse_gradient_kernel	src/activation_kernels.cu	/^__device__ float plse_gradient_kernel(float x){return (x < 0 || x > 1) ? .01 : .125;}$/;"	f	signature:(float x)
pm	src/utils.c	/^void pm(int M, int N, float *A)$/;"	f	signature:(int M, int N, float *A)
policy	include/darknet.h	/^    learning_rate_policy policy;$/;"	m	struct:network	access:public
pop_column	src/matrix.c	/^float *pop_column(matrix *m, int c)$/;"	f	signature:(matrix *m, int c)
pow_cpu	src/blas.c	/^void pow_cpu(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f	signature:(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)
pow_gpu	src/blas_kernels.cu	/^extern "C" void pow_gpu(int N, float ALPHA, float * X, int INCX, float * Y, int INCY)$/;"	f	signature:(int N, float ALPHA, float * X, int INCX, float * Y, int INCY)
pow_kernel	src/blas_kernels.cu	/^__global__ void pow_kernel(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f	signature:(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)
power	include/darknet.h	/^    float power;$/;"	m	struct:network	access:public
predict	python/darknet.py	/^def predict(net, im):$/;"	f	access:public
predict_classifier	examples/classifier.c	/^void predict_classifier(char *datacfg, char *cfgfile, char *weightfile, char *filename, int top)$/;"	f	signature:(char *datacfg, char *cfgfile, char *weightfile, char *filename, int top)
predict_move	examples/go.c	/^void predict_move(network net, float *board, float *move, int multi)$/;"	f	signature:(network net, float *board, float *move, int multi)
predict_regressor	examples/regressor.c	/^void predict_regressor(char *cfgfile, char *weightfile, char *filename)$/;"	f	signature:(char *cfgfile, char *weightfile, char *filename)
predict_segmenter	examples/segmenter.c	/^void predict_segmenter(char *datafile, char *cfgfile, char *weightfile, char *filename)$/;"	f	signature:(char *datafile, char *cfgfile, char *weightfile, char *filename)
predictions	src/demo.c	/^static float **predictions;$/;"	v	file:
prefix	src/stb_image.h	/^   stbi__int16 prefix;$/;"	m	struct:__anon34	access:public
prev	include/darknet.h	/^    struct node *prev;$/;"	m	struct:node	typeref:struct:node::node	access:public
prev_cell_cpu	include/darknet.h	/^    float *prev_cell_cpu;$/;"	m	struct:layer	access:public
prev_cell_gpu	include/darknet.h	/^    float *prev_cell_gpu;$/;"	m	struct:layer	access:public
prev_state	include/darknet.h	/^    float * prev_state;$/;"	m	struct:layer	access:public
prev_state_cpu	include/darknet.h	/^    float * prev_state_cpu;$/;"	m	struct:layer	access:public
prev_state_gpu	include/darknet.h	/^    float * prev_state_gpu;$/;"	m	struct:layer	access:public
print_board	examples/go.c	/^void print_board(FILE *stream, float *board, int swap, int *indexes)$/;"	f	signature:(FILE *stream, float *board, int swap, int *indexes)
print_cocos	examples/coco.c	/^void print_cocos(FILE *fp, int image_id, box *boxes, float **probs, int num_boxes, int classes, int w, int h)$/;"	f	signature:(FILE *fp, int image_id, box *boxes, float **probs, int num_boxes, int classes, int w, int h)
print_cocos	examples/detector.c	/^static void print_cocos(FILE *fp, char *image_path, box *boxes, float **probs, int num_boxes, int classes, int w, int h)$/;"	f	file:	signature:(FILE *fp, char *image_path, box *boxes, float **probs, int num_boxes, int classes, int w, int h)
print_detector_detections	examples/detector.c	/^void print_detector_detections(FILE **fps, char *id, box *boxes, float **probs, int total, int classes, int w, int h)$/;"	f	signature:(FILE **fps, char *id, box *boxes, float **probs, int total, int classes, int w, int h)
print_game	examples/go.c	/^int print_game(float *board, FILE *fp)$/;"	f	signature:(float *board, FILE *fp)
print_image	src/image.c	/^void print_image(image m)$/;"	f	signature:(image m)
print_imagenet_detections	examples/detector.c	/^void print_imagenet_detections(FILE *fp, int id, box *boxes, float **probs, int total, int classes, int w, int h)$/;"	f	signature:(FILE *fp, int id, box *boxes, float **probs, int total, int classes, int w, int h)
print_letters	src/data.c	/^void print_letters(float *pred, int n)$/;"	f	signature:(float *pred, int n)
print_matrix	src/matrix.c	/^void print_matrix(matrix m)$/;"	f	signature:(matrix m)
print_network	src/network.c	/^void print_network(network net)$/;"	f	signature:(network net)
print_statistics	src/utils.c	/^void print_statistics(float *a, int n)$/;"	f	signature:(float *a, int n)
print_symbol	examples/rnn.c	/^void print_symbol(int n, char **tokens){$/;"	f	signature:(int n, char **tokens)
print_yolo_detections	examples/yolo.c	/^void print_yolo_detections(FILE **fps, char *id, box *boxes, float **probs, int total, int classes, int w, int h)$/;"	f	signature:(FILE **fps, char *id, box *boxes, float **probs, int total, int classes, int w, int h)
probability	include/darknet.h	/^    float probability;$/;"	m	struct:layer	access:public
probs	src/box.c	/^    float **probs;$/;"	m	struct:__anon36	file:	access:public
probs	src/demo.c	/^static float **probs;$/;"	v	file:
progressive	src/stb_image.h	/^   int            progressive;$/;"	m	struct:__anon25	access:public
propagate_liberty	examples/go.c	/^void propagate_liberty(float *board, int *lib, int *visited, int row, int col, int side)$/;"	f	signature:(float *board, int *lib, int *visited, int row, int col, int side)
pull_batchnorm_layer	src/batchnorm_layer.c	/^void pull_batchnorm_layer(layer l)$/;"	f	signature:(layer l)
pull_connected_layer	src/connected_layer.c	/^void pull_connected_layer(layer l)$/;"	f	signature:(layer l)
pull_convolutional_layer	src/convolutional_kernels.cu	/^void pull_convolutional_layer(convolutional_layer layer)$/;"	f	signature:(convolutional_layer layer)
pull_cost_layer	src/cost_layer.c	/^void pull_cost_layer(cost_layer l)$/;"	f	signature:(cost_layer l)
pull_crnn_layer	src/crnn_layer.c	/^void pull_crnn_layer(layer l)$/;"	f	signature:(layer l)
pull_deconvolutional_layer	src/deconvolutional_kernels.cu	/^extern "C" void pull_deconvolutional_layer(layer l)$/;"	f	signature:(layer l)
pull_gru_layer	src/gru_layer.c	/^void pull_gru_layer(layer l)$/;"	f	signature:(layer l)
pull_local_layer	src/local_layer.c	/^void pull_local_layer(local_layer l)$/;"	f	signature:(local_layer l)
pull_network_output	src/network_kernels.cu	/^void pull_network_output(network net)$/;"	f	signature:(network net)
pull_rnn_layer	src/rnn_layer.c	/^void pull_rnn_layer(layer l)$/;"	f	signature:(layer l)
pull_softmax_layer_output	src/softmax_layer.c	/^void pull_softmax_layer_output(const softmax_layer layer)$/;"	f	signature:(const softmax_layer layer)
pull_weights	src/network_kernels.cu	/^void pull_weights(layer l)$/;"	f	signature:(layer l)
push_batchnorm_layer	src/batchnorm_layer.c	/^void push_batchnorm_layer(layer l)$/;"	f	signature:(layer l)
push_connected_layer	src/connected_layer.c	/^void push_connected_layer(layer l)$/;"	f	signature:(layer l)
push_convolutional_layer	src/convolutional_kernels.cu	/^void push_convolutional_layer(convolutional_layer layer)$/;"	f	signature:(convolutional_layer layer)
push_cost_layer	src/cost_layer.c	/^void push_cost_layer(cost_layer l)$/;"	f	signature:(cost_layer l)
push_crnn_layer	src/crnn_layer.c	/^void push_crnn_layer(layer l)$/;"	f	signature:(layer l)
push_deconvolutional_layer	src/deconvolutional_kernels.cu	/^extern "C" void push_deconvolutional_layer(layer l)$/;"	f	signature:(layer l)
push_gru_layer	src/gru_layer.c	/^void push_gru_layer(layer l)$/;"	f	signature:(layer l)
push_local_layer	src/local_layer.c	/^void push_local_layer(local_layer l)$/;"	f	signature:(local_layer l)
push_rnn_layer	src/rnn_layer.c	/^void push_rnn_layer(layer l)$/;"	f	signature:(layer l)
push_weights	src/network_kernels.cu	/^void push_weights(layer l)$/;"	f	signature:(layer l)
r	python/darknet.py	/^    r = classify(net, meta, im)$/;"	v
r_cpu	include/darknet.h	/^    float *r_cpu;$/;"	m	struct:layer	access:public
r_gpu	include/darknet.h	/^    float *r_gpu;$/;"	m	struct:layer	access:public
rad	include/darknet.h	/^    float rad;$/;"	m	struct:__anon11	access:public
ramp_activate	src/activations.h	/^static inline float ramp_activate(float x){return x*(x>0)+.1*x;}$/;"	f	signature:(float x)
ramp_activate_kernel	src/activation_kernels.cu	/^__device__ float ramp_activate_kernel(float x){return x*(x>0)+.1*x;}$/;"	f	signature:(float x)
ramp_gradient	src/activations.h	/^static inline float ramp_gradient(float x){return (x>0)+.1;}$/;"	f	signature:(float x)
ramp_gradient_kernel	src/activation_kernels.cu	/^__device__ float ramp_gradient_kernel(float x){return (x>0)+.1;}$/;"	f	signature:(float x)
rand	include/darknet.h	/^    float * rand;$/;"	m	struct:layer	access:public
rand_gpu	include/darknet.h	/^    float * rand_gpu;$/;"	m	struct:layer	access:public
rand_int	src/utils.c	/^int rand_int(int min, int max)$/;"	f	signature:(int min, int max)
rand_normal	src/utils.c	/^float rand_normal()$/;"	f
rand_scale	src/utils.c	/^float rand_scale(float s)$/;"	f	signature:(float s)
rand_size_t	src/utils.c	/^size_t rand_size_t()$/;"	f
rand_uniform	src/utils.c	/^float rand_uniform(float min, float max)$/;"	f	signature:(float min, float max)
random	include/darknet.h	/^    int random;$/;"	m	struct:layer	access:public
random_augment_args	src/image.c	/^augment_args random_augment_args(image im, float angle, float aspect, int low, int high, int w, int h)$/;"	f	signature:(image im, float angle, float aspect, int low, int high, int w, int h)
random_augment_image	src/image.c	/^image random_augment_image(image im, float angle, float aspect, int low, int high, int w, int h)$/;"	f	signature:(image im, float angle, float aspect, int low, int high, int w, int h)
random_crop_image	src/image.c	/^image random_crop_image(image im, int w, int h)$/;"	f	signature:(image im, int w, int h)
random_distort_image	src/image.c	/^void random_distort_image(image im, float hue, float saturation, float exposure)$/;"	f	signature:(image im, float hue, float saturation, float exposure)
random_go_moves	examples/go.c	/^data random_go_moves(moves m, int n)$/;"	f	signature:(moves m, int n)
random_matrix	src/gemm.c	/^float *random_matrix(int rows, int cols)$/;"	f	signature:(int rows, int cols)
randomize_boxes	src/data.c	/^void randomize_boxes(box_label *b, int n)$/;"	f	signature:(box_label *b, int n)
randomize_data	src/data.c	/^void randomize_data(data d)$/;"	f	signature:(data d)
ratio	include/darknet.h	/^    float ratio;$/;"	m	struct:layer	access:public
ratio	src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon35	access:public
raw_coeff	src/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon25::__anon26	access:public
raw_data	src/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon25::__anon26	access:public
read	src/stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read$/;"	m	struct:__anon21	access:public
read_all	src/utils.c	/^void read_all(int fd, char *buffer, size_t bytes)$/;"	f	signature:(int fd, char *buffer, size_t bytes)
read_all_fail	src/utils.c	/^int read_all_fail(int fd, char *buffer, size_t bytes)$/;"	f	signature:(int fd, char *buffer, size_t bytes)
read_boxes	src/data.c	/^box_label *read_boxes(char *filename, int *n)$/;"	f	signature:(char *filename, int *n)
read_cfg	src/parser.c	/^list *read_cfg(char *filename)$/;"	f	signature:(char *filename)
read_data_cfg	src/option_list.c	/^list *read_data_cfg(char *filename)$/;"	f	signature:(char *filename)
read_from_callbacks	src/stb_image.h	/^   int read_from_callbacks;$/;"	m	struct:__anon22	access:public
read_int	src/utils.c	/^int read_int(int fd)$/;"	f	signature:(int fd)
read_intlist	src/utils.c	/^int *read_intlist(char *gpu_list, int *ngpus, int d)$/;"	f	signature:(char *gpu_list, int *ngpus, int d)
read_map	src/utils.c	/^int *read_map(char *filename)$/;"	f	signature:(char *filename)
read_option	src/option_list.c	/^int read_option(char *s, list *options)$/;"	f	signature:(char *s, list *options)
read_tokenized_data	examples/rnn.c	/^int *read_tokenized_data(char *filename, size_t *read)$/;"	f	signature:(char *filename, size_t *read)
read_tokens	examples/rnn.c	/^char **read_tokens(char *filename, size_t *read)$/;"	f	signature:(char *filename, size_t *read)
read_tree	src/tree.c	/^tree *read_tree(char *filename)$/;"	f	signature:(char *filename)
reconstruct_picture	examples/nightmare.c	/^void reconstruct_picture(network net, float *features, image recon, image update, float rate, float momentum, float lambda, int smooth_size, int iters)$/;"	f	signature:(network net, float *features, image recon, image update, float rate, float momentum, float lambda, int smooth_size, int iters)
relie_activate	src/activations.h	/^static inline float relie_activate(float x){return (x>0) ? x : .01*x;}$/;"	f	signature:(float x)
relie_activate_kernel	src/activation_kernels.cu	/^__device__ float relie_activate_kernel(float x){return (x>0) ? x : .01*x;}$/;"	f	signature:(float x)
relie_gradient	src/activations.h	/^static inline float relie_gradient(float x){return (x>0) ? 1 : .01;}$/;"	f	signature:(float x)
relie_gradient_kernel	src/activation_kernels.cu	/^__device__ float relie_gradient_kernel(float x){return (x>0) ? 1 : .01;}$/;"	f	signature:(float x)
relu_activate	src/activations.h	/^static inline float relu_activate(float x){return x*(x>0);}$/;"	f	signature:(float x)
relu_activate_kernel	src/activation_kernels.cu	/^__device__ float relu_activate_kernel(float x){return x*(x>0);}$/;"	f	signature:(float x)
relu_gradient	src/activations.h	/^static inline float relu_gradient(float x){return (x>0);}$/;"	f	signature:(float x)
relu_gradient_kernel	src/activation_kernels.cu	/^__device__ float relu_gradient_kernel(float x){return (x>0);}$/;"	f	signature:(float x)
remove_connected	examples/go.c	/^void remove_connected(float *b, int *lib, int p, int r, int c)$/;"	f	signature:(float *b, int *lib, int p, int r, int c)
reorg	include/darknet.h	/^    int reorg;$/;"	m	struct:layer	access:public
reorg_cpu	src/blas.c	/^void reorg_cpu(float *x, int w, int h, int c, int batch, int stride, int forward, float *out)$/;"	f	signature:(float *x, int w, int h, int c, int batch, int stride, int forward, float *out)
reorg_gpu	src/blas_kernels.cu	/^extern "C" void reorg_gpu(float *x, int w, int h, int c, int batch, int stride, int forward, float *out)$/;"	f	signature:(float *x, int w, int h, int c, int batch, int stride, int forward, float *out)
reorg_kernel	src/blas_kernels.cu	/^__global__ void reorg_kernel(int N, float *x, int w, int h, int c, int batch, int stride, int forward, float *out)$/;"	f	signature:(int N, float *x, int w, int h, int c, int batch, int stride, int forward, float *out)
resample	src/stb_image.h	/^   resample_row_func resample;$/;"	m	struct:__anon27	access:public
resample_row_1	src/stb_image.h	/^static stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	signature:(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
resample_row_func	src/stb_image.h	/^typedef stbi_uc *(*resample_row_func)(stbi_uc *out, stbi_uc *in0, stbi_uc *in1,$/;"	t
resample_row_hv_2_kernel	src/stb_image.h	/^   stbi_uc *(*resample_row_hv_2_kernel)(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs);$/;"	m	struct:__anon25	access:public
rescale_net	examples/darknet.c	/^void rescale_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f	signature:(char *cfgfile, char *weightfile, char *outfile)
rescale_weights	src/convolutional_layer.c	/^void rescale_weights(convolutional_layer l, float scale, float trans)$/;"	f	signature:(convolutional_layer l, float scale, float trans)
rescore	include/darknet.h	/^    int rescore;$/;"	m	struct:layer	access:public
reset_layer	include/darknet.h	/^    struct layer *reset_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
reset_momentum	src/network.c	/^void reset_momentum(network net)$/;"	f	signature:(network net)
reset_normalize_net	examples/darknet.c	/^void reset_normalize_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f	signature:(char *cfgfile, char *weightfile, char *outfile)
reset_rnn_state	examples/rnn.c	/^void reset_rnn_state(network net, int b)$/;"	f	signature:(network net, int b)
resize_avgpool_layer	src/avgpool_layer.c	/^void resize_avgpool_layer(avgpool_layer *l, int w, int h)$/;"	f	signature:(avgpool_layer *l, int w, int h)
resize_batchnorm_layer	src/batchnorm_layer.c	/^void resize_batchnorm_layer(layer *layer, int w, int h)$/;"	f	signature:(layer *layer, int w, int h)
resize_convolutional_layer	src/convolutional_layer.c	/^void resize_convolutional_layer(convolutional_layer *l, int w, int h)$/;"	f	signature:(convolutional_layer *l, int w, int h)
resize_cost_layer	src/cost_layer.c	/^void resize_cost_layer(cost_layer *l, int inputs)$/;"	f	signature:(cost_layer *l, int inputs)
resize_crop_layer	src/crop_layer.c	/^void resize_crop_layer(layer *l, int w, int h)$/;"	f	signature:(layer *l, int w, int h)
resize_deconvolutional_layer	src/deconvolutional_layer.c	/^void resize_deconvolutional_layer(layer *l, int h, int w)$/;"	f	signature:(layer *l, int h, int w)
resize_dropout_layer	src/dropout_layer.c	/^void resize_dropout_layer(dropout_layer *l, int inputs)$/;"	f	signature:(dropout_layer *l, int inputs)
resize_image	src/image.c	/^image resize_image(image im, int w, int h)$/;"	f	signature:(image im, int w, int h)
resize_matrix	src/matrix.c	/^matrix resize_matrix(matrix m, int size)$/;"	f	signature:(matrix m, int size)
resize_max	src/image.c	/^image resize_max(image im, int max)$/;"	f	signature:(image im, int max)
resize_maxpool_layer	src/maxpool_layer.c	/^void resize_maxpool_layer(maxpool_layer *l, int w, int h)$/;"	f	signature:(maxpool_layer *l, int w, int h)
resize_min	src/image.c	/^image resize_min(image im, int min)$/;"	f	signature:(image im, int min)
resize_network	src/network.c	/^int resize_network(network *net, int w, int h)$/;"	f	signature:(network *net, int w, int h)
resize_normalization_layer	src/normalization_layer.c	/^void resize_normalization_layer(layer *layer, int w, int h)$/;"	f	signature:(layer *layer, int w, int h)
resize_region_layer	src/region_layer.c	/^void resize_region_layer(layer *l, int w, int h)$/;"	f	signature:(layer *l, int w, int h)
resize_reorg_layer	src/reorg_layer.c	/^void resize_reorg_layer(layer *l, int w, int h)$/;"	f	signature:(layer *l, int w, int h)
resize_route_layer	src/route_layer.c	/^void resize_route_layer(route_layer *l, network *net)$/;"	f	signature:(route_layer *l, network *net)
resized	include/darknet.h	/^    image *resized;$/;"	m	struct:load_args	access:public
restart_interval	src/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon25	access:public
reverse	include/darknet.h	/^    int reverse;$/;"	m	struct:layer	access:public
rgb_to_hsv	src/image.c	/^void rgb_to_hsv(image im)$/;"	f	signature:(image im)
rgb_to_hsv_kernel	src/crop_layer_kernels.cu	/^__device__ float3 rgb_to_hsv_kernel(float3 rgb)$/;"	f	signature:(float3 rgb)
rgb_to_yuv	src/image.c	/^void rgb_to_yuv(image im)$/;"	f	signature:(image im)
rgbgr_image	src/image.c	/^void rgbgr_image(image im)$/;"	f	signature:(image im)
rgbgr_net	examples/darknet.c	/^void rgbgr_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f	signature:(char *cfgfile, char *weightfile, char *outfile)
rgbgr_weights	src/convolutional_layer.c	/^void rgbgr_weights(convolutional_layer l)$/;"	f	signature:(convolutional_layer l)
right	include/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon16	access:public
rolling_mean	include/darknet.h	/^    float * rolling_mean;$/;"	m	struct:layer	access:public
rolling_mean_gpu	include/darknet.h	/^    float * rolling_mean_gpu;$/;"	m	struct:layer	access:public
rolling_variance	include/darknet.h	/^    float * rolling_variance;$/;"	m	struct:layer	access:public
rolling_variance_gpu	include/darknet.h	/^    float * rolling_variance_gpu;$/;"	m	struct:layer	access:public
rotate_crop_image	src/image.c	/^image rotate_crop_image(image im, float rad, float s, int w, int h, float dx, float dy, float aspect)$/;"	f	signature:(image im, float rad, float s, int w, int h, float dx, float dy, float aspect)
rotate_image	src/image.c	/^image rotate_image(image im, float rad)$/;"	f	signature:(image im, float rad)
rotate_image_cw	src/image.c	/^void rotate_image_cw(image im, int times)$/;"	f	signature:(image im, int times)
route_layer	src/route_layer.h	/^typedef layer route_layer;$/;"	t
rows	include/darknet.h	/^    int rows, cols;$/;"	m	struct:matrix	access:public
run_art	examples/art.c	/^void run_art(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
run_captcha	examples/captcha.c	/^void run_captcha(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
run_char_rnn	examples/rnn.c	/^void run_char_rnn(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
run_cifar	examples/cifar.c	/^void run_cifar(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
run_classifier	examples/classifier.c	/^void run_classifier(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
run_coco	examples/coco.c	/^void run_coco(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
run_compare	src/compare.c	/^void run_compare(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
run_detector	examples/detector.c	/^void run_detector(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
run_dice	examples/dice.c	/^void run_dice(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
run_go	examples/go.c	/^void run_go(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
run_lsd	examples/lsd.c	/^void run_lsd(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
run_nightmare	examples/nightmare.c	/^void run_nightmare(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
run_regressor	examples/regressor.c	/^void run_regressor(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
run_segmenter	examples/segmenter.c	/^void run_segmenter(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
run_super	examples/super.c	/^void run_super(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
run_swag	examples/swag.c	/^void run_swag(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
run_tag	examples/tag.c	/^void run_tag(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
run_vid_rnn	examples/rnn_vid.c	/^void run_vid_rnn(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
run_vid_rnn	examples/rnn_vid.c	/^void run_vid_rnn(int argc, char **argv){}$/;"	f	signature:(int argc, char **argv)
run_voxel	examples/voxel.c	/^void run_voxel(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
run_writing	examples/writing.c	/^void run_writing(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
run_yolo	examples/yolo.c	/^void run_yolo(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
running	src/demo.c	/^static int running = 0;$/;"	v	file:
s	src/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon25	access:public
s	src/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon31	access:public
sample_array	src/utils.c	/^int sample_array(float *a, int n)$/;"	f	signature:(float *a, int n)
saturate_exposure_image	src/image.c	/^void saturate_exposure_image(image im, float sat, float exposure)$/;"	f	signature:(image im, float sat, float exposure)
saturate_image	src/image.c	/^void saturate_image(image im, float sat)$/;"	f	signature:(image im, float sat)
saturation	include/darknet.h	/^    float saturation;$/;"	m	struct:layer	access:public
saturation	include/darknet.h	/^    float saturation;$/;"	m	struct:load_args	access:public
saturation	include/darknet.h	/^    float saturation;$/;"	m	struct:network	access:public
save_batchnorm_weights	src/parser.c	/^void save_batchnorm_weights(layer l, FILE *fp)$/;"	f	signature:(layer l, FILE *fp)
save_connected_weights	src/parser.c	/^void save_connected_weights(layer l, FILE *fp)$/;"	f	signature:(layer l, FILE *fp)
save_convolutional_weights	src/parser.c	/^void save_convolutional_weights(layer l, FILE *fp)$/;"	f	signature:(layer l, FILE *fp)
save_convolutional_weights_binary	src/parser.c	/^void save_convolutional_weights_binary(layer l, FILE *fp)$/;"	f	signature:(layer l, FILE *fp)
save_delta_gpu	include/darknet.h	/^    float * save_delta_gpu;$/;"	m	struct:layer	access:public
save_gpu	include/darknet.h	/^    float * save_gpu;$/;"	m	struct:layer	access:public
save_image	src/image.c	/^void save_image(image im, const char *name)$/;"	f	signature:(image im, const char *name)
save_image_jpg	src/image.c	/^void save_image_jpg(image p, const char *name)$/;"	f	signature:(image p, const char *name)
save_image_png	src/image.c	/^void save_image_png(image im, const char *name)$/;"	f	signature:(image im, const char *name)
save_reconstruction	examples/rnn_vid.c	/^image save_reconstruction(network net, image *init, float *feat, char *name, int i)$/;"	f	signature:(network net, image *init, float *feat, char *name, int i)
save_weights	src/parser.c	/^void save_weights(network net, char *filename)$/;"	f	signature:(network net, char *filename)
save_weights_upto	src/parser.c	/^void save_weights_upto(network net, char *filename, int cutoff)$/;"	f	signature:(network net, char *filename, int cutoff)
scal_cpu	src/blas.c	/^void scal_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f	signature:(int N, float ALPHA, float *X, int INCX)
scal_gpu	src/blas_kernels.cu	/^extern "C" void scal_gpu(int N, float ALPHA, float * X, int INCX)$/;"	f	signature:(int N, float ALPHA, float * X, int INCX)
scal_kernel	src/blas_kernels.cu	/^__global__ void scal_kernel(int N, float ALPHA, float *X, int INCX)$/;"	f	signature:(int N, float ALPHA, float *X, int INCX)
scale	include/darknet.h	/^    float scale;$/;"	m	struct:__anon11	access:public
scale	include/darknet.h	/^    float scale;$/;"	m	struct:layer	access:public
scale	include/darknet.h	/^    float scale;$/;"	m	struct:network	access:public
scale	include/darknet.h	/^    int scale;$/;"	m	struct:load_args	access:public
scale_array	src/utils.c	/^void scale_array(float *a, int n, float s)$/;"	f	signature:(float *a, int n, float s)
scale_bias	src/convolutional_layer.c	/^void scale_bias(float *output, float *scales, int batch, int n, int size)$/;"	f	signature:(float *output, float *scales, int batch, int n, int size)
scale_bias_gpu	src/blas_kernels.cu	/^void scale_bias_gpu(float *output, float *biases, int batch, int n, int size)$/;"	f	signature:(float *output, float *biases, int batch, int n, int size)
scale_bias_kernel	src/blas_kernels.cu	/^__global__ void scale_bias_kernel(float *output, float *biases, int n, int size)$/;"	f	signature:(float *output, float *biases, int n, int size)
scale_change_gpu	include/darknet.h	/^    float * scale_change_gpu;$/;"	m	struct:layer	access:public
scale_data_rows	src/data.c	/^void scale_data_rows(data d, float s)$/;"	f	signature:(data d, float s)
scale_image	src/image.c	/^void scale_image(image m, float s)$/;"	f	signature:(image m, float s)
scale_image_channel	src/image.c	/^void scale_image_channel(image im, int c, float v)$/;"	f	signature:(image im, int c, float v)
scale_m	include/darknet.h	/^    float * scale_m;$/;"	m	struct:layer	access:public
scale_m_gpu	include/darknet.h	/^    float *scale_m_gpu;$/;"	m	struct:layer	access:public
scale_mask_gpu	src/blas_kernels.cu	/^extern "C" void scale_mask_gpu(int N, float * X, float mask_num, float * mask, float scale)$/;"	f	signature:(int N, float * X, float mask_num, float * mask, float scale)
scale_mask_kernel	src/blas_kernels.cu	/^__global__ void scale_mask_kernel(int n,  float *x, float mask_num, float *mask, float scale)$/;"	f	signature:(int n, float *x, float mask_num, float *mask, float scale)
scale_matrix	src/matrix.c	/^void scale_matrix(matrix m, float scale)$/;"	f	signature:(matrix m, float scale)
scale_updates	include/darknet.h	/^    float * scale_updates;$/;"	m	struct:layer	access:public
scale_updates_gpu	include/darknet.h	/^    float * scale_updates_gpu;$/;"	m	struct:layer	access:public
scale_v	include/darknet.h	/^    float * scale_v;$/;"	m	struct:layer	access:public
scale_v_gpu	include/darknet.h	/^    float *scale_v_gpu;$/;"	m	struct:layer	access:public
scale_weights	src/network_kernels.cu	/^void scale_weights(layer l, float s)$/;"	f	signature:(layer l, float s)
scales	include/darknet.h	/^    float * scales;$/;"	m	struct:layer	access:public
scales	include/darknet.h	/^    float *scales;$/;"	m	struct:network	access:public
scales_gpu	include/darknet.h	/^    float * scales_gpu;$/;"	m	struct:layer	access:public
scan_n	src/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon25	access:public
score_game	examples/go.c	/^float score_game(float *board)$/;"	f	signature:(float *board)
sec	src/utils.c	/^float sec(clock_t clocks)$/;"	f	signature:(clock_t clocks)
section	src/parser.c	/^}section;$/;"	t	typeref:struct:__anon38	file:
seen	include/darknet.h	/^    size_t *seen;$/;"	m	struct:network	access:public
self_go	examples/go.c	/^void self_go(char *filename, char *weightfile, char *f2, char *w2, int multi)$/;"	f	signature:(char *filename, char *weightfile, char *f2, char *w2, int multi)
self_layer	include/darknet.h	/^    struct layer *self_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
set_batch_network	src/network.c	/^void set_batch_network(network *net, int b)$/;"	f	signature:(network *net, int b)
set_pixel	src/image.c	/^void set_pixel(image m, int x, int y, int c, float val)$/;"	f	signature:(image m, int x, int y, int c, float val)
sets	scripts/voc_label.py	/^sets=[('2012', 'train'), ('2012', 'val'), ('2007', 'train'), ('2007', 'val'), ('2007', 'test')]$/;"	v
shallow	include/darknet.h	/^    int shallow;$/;"	m	struct:__anon14	access:public
shift	include/darknet.h	/^    float shift;$/;"	m	struct:layer	access:public
shortcut	include/darknet.h	/^    int shortcut;$/;"	m	struct:layer	access:public
shortcut_cpu	src/blas.c	/^void shortcut_cpu(int batch, int w1, int h1, int c1, float *add, int w2, int h2, int c2, float *out)$/;"	f	signature:(int batch, int w1, int h1, int c1, float *add, int w2, int h2, int c2, float *out)
shortcut_gpu	src/blas_kernels.cu	/^extern "C" void shortcut_gpu(int batch, int w1, int h1, int c1, float *add, int w2, int h2, int c2, float *out)$/;"	f	signature:(int batch, int w1, int h1, int c1, float *add, int w2, int h2, int c2, float *out)
shortcut_kernel	src/blas_kernels.cu	/^__global__ void shortcut_kernel(int size, int minw, int minh, int minc, int stride, int sample, int batch, int w1, int h1, int c1, float *add, int w2, int h2, int c2, float *out)$/;"	f	signature:(int size, int minw, int minh, int minc, int stride, int sample, int batch, int w1, int h1, int c1, float *add, int w2, int h2, int c2, float *out)
show_image	src/image.c	/^void show_image(image p, const char *name)$/;"	f	signature:(image p, const char *name)
show_image_collapsed	src/image.c	/^void show_image_collapsed(image p, char *name)$/;"	f	signature:(image p, char *name)
show_image_cv	src/image.c	/^void show_image_cv(image p, const char *name, IplImage *disp)$/;"	f	signature:(image p, const char *name, IplImage *disp)
show_image_layers	src/image.c	/^void show_image_layers(image p, char *name)$/;"	f	signature:(image p, char *name)
show_image_normalized	src/image.c	/^void show_image_normalized(image im, const char *name)$/;"	f	signature:(image im, const char *name)
show_images	src/image.c	/^void show_images(image *ims, int n, char *window)$/;"	f	signature:(image *ims, int n, char *window)
shuffle	src/utils.c	/^void shuffle(void *arr, size_t n, size_t size)$/;"	f	signature:(void *arr, size_t n, size_t size)
side	include/darknet.h	/^    int side;$/;"	m	struct:layer	access:public
size	include/darknet.h	/^    int min, max, size;$/;"	m	struct:load_args	access:public
size	include/darknet.h	/^    int size;$/;"	m	struct:layer	access:public
size	include/darknet.h	/^    int size;$/;"	m	struct:list	access:public
size	src/stb_image.h	/^   stbi_uc  size[257];$/;"	m	struct:__anon24	access:public
size	src/stb_image.h	/^   stbi_uc  size[288];$/;"	m	struct:__anon28	access:public
size	src/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon33	access:public
size_params	src/parser.c	/^typedef struct size_params{$/;"	s	file:
size_params	src/parser.c	/^} size_params;$/;"	t	typeref:struct:size_params	file:
size_params::batch	src/parser.c	/^    int batch;$/;"	m	struct:size_params	file:	access:public
size_params::c	src/parser.c	/^    int c;$/;"	m	struct:size_params	file:	access:public
size_params::h	src/parser.c	/^    int h;$/;"	m	struct:size_params	file:	access:public
size_params::index	src/parser.c	/^    int index;$/;"	m	struct:size_params	file:	access:public
size_params::inputs	src/parser.c	/^    int inputs;$/;"	m	struct:size_params	file:	access:public
size_params::net	src/parser.c	/^    network net;$/;"	m	struct:size_params	file:	access:public
size_params::time_steps	src/parser.c	/^    int time_steps;$/;"	m	struct:size_params	file:	access:public
size_params::w	src/parser.c	/^    int w;$/;"	m	struct:size_params	file:	access:public
skip	src/stb_image.h	/^   void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget' the last -n bytes if negative$/;"	m	struct:__anon21	access:public
smooth	examples/nightmare.c	/^void smooth(image recon, image update, float lambda, int num)$/;"	f	signature:(image recon, image update, float lambda, int num)
smooth	include/darknet.h	/^    float smooth;$/;"	m	struct:layer	access:public
smooth_data	src/data.c	/^void smooth_data(data d)$/;"	f	signature:(data d)
smooth_kernel	src/convolutional_kernels.cu	/^__global__ void smooth_kernel(float *x, int n, int w, int h, int c, int size, float rate, float *delta)$/;"	f	signature:(float *x, int n, int w, int h, int c, int size, float rate, float *delta)
smooth_l1_cpu	src/blas.c	/^void smooth_l1_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f	signature:(int n, float *pred, float *truth, float *delta, float *error)
smooth_l1_gpu	src/blas_kernels.cu	/^extern "C" void smooth_l1_gpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f	signature:(int n, float *pred, float *truth, float *delta, float *error)
smooth_l1_kernel	src/blas_kernels.cu	/^__global__ void smooth_l1_kernel(int n, float *pred, float *truth, float *delta, float *error)$/;"	f	signature:(int n, float *pred, float *truth, float *delta, float *error)
smooth_layer	src/convolutional_kernels.cu	/^extern "C" void smooth_layer(layer l, int size, float rate)$/;"	f	signature:(layer l, int size, float rate)
softmax	include/darknet.h	/^    int softmax;$/;"	m	struct:layer	access:public
softmax	src/blas.c	/^void softmax(float *input, int n, float temp, int stride, float *output)$/;"	f	signature:(float *input, int n, float temp, int stride, float *output)
softmax_cpu	src/blas.c	/^void softmax_cpu(float *input, int n, int batch, int batch_offset, int groups, int group_offset, int stride, float temp, float *output)$/;"	f	signature:(float *input, int n, int batch, int batch_offset, int groups, int group_offset, int stride, float temp, float *output)
softmax_device	src/blas_kernels.cu	/^__device__ void softmax_device(float *input, int n, float temp, int stride, float *output)$/;"	f	signature:(float *input, int n, float temp, int stride, float *output)
softmax_gpu	src/blas_kernels.cu	/^extern "C" void softmax_gpu(float *input, int n, int batch, int batch_offset, int groups, int group_offset, int stride, float temp, float *output)$/;"	f	signature:(float *input, int n, int batch, int batch_offset, int groups, int group_offset, int stride, float temp, float *output)
softmax_kernel	src/blas_kernels.cu	/^__global__ void softmax_kernel(float *input, int n, int batch, int batch_offset, int groups, int group_offset, int stride, float temp, float *output)$/;"	f	signature:(float *input, int n, int batch, int batch_offset, int groups, int group_offset, int stride, float temp, float *output)
softmax_layer	src/softmax_layer.h	/^typedef layer softmax_layer;$/;"	t
softmax_tree	include/darknet.h	/^    tree *softmax_tree;$/;"	m	struct:layer	access:public
softmax_tree	src/blas_kernels.cu	/^extern "C" void softmax_tree(float *input, int spatial, int batch, int stride, float temp, float *output, tree hier)$/;"	f	signature:(float *input, int spatial, int batch, int stride, float temp, float *output, tree hier)
softmax_tree_kernel	src/blas_kernels.cu	/^__global__ void softmax_tree_kernel(float *input, int spatial, int batch, int stride, float temp, float *output, int groups, int *group_size, int *group_offset)$/;"	f	signature:(float *input, int spatial, int batch, int stride, float temp, float *output, int groups, int *group_size, int *group_offset)
sorta_shuffle	src/utils.c	/^void sorta_shuffle(void *arr, size_t n, size_t size, size_t sections)$/;"	f	signature:(void *arr, size_t n, size_t size, size_t sections)
sortable_bbox	src/box.c	/^} sortable_bbox;$/;"	t	typeref:struct:__anon36	file:
sortable_bbox	src/compare.c	/^} sortable_bbox;$/;"	t	typeref:struct:__anon17	file:
spatial	include/darknet.h	/^    int spatial;$/;"	m	struct:layer	access:public
spatial_mean	include/darknet.h	/^    float * spatial_mean;$/;"	m	struct:layer	access:public
spec_end	src/stb_image.h	/^   int            spec_end;$/;"	m	struct:__anon25	access:public
spec_start	src/stb_image.h	/^   int            spec_start;$/;"	m	struct:__anon25	access:public
speed	examples/darknet.c	/^void speed(char *cfgfile, int tics)$/;"	f	signature:(char *cfgfile, int tics)
split_data	src/data.c	/^data *split_data(data d, int part, int total)$/;"	f	signature:(data d, int part, int total)
split_str	src/utils.c	/^list *split_str(char *s, char delim)$/;"	f	signature:(char *s, char delim)
sqrt	include/darknet.h	/^    int sqrt;$/;"	m	struct:layer	access:public
squared	include/darknet.h	/^    float * squared;$/;"	m	struct:layer	access:public
squared_gpu	include/darknet.h	/^    float * squared_gpu;$/;"	m	struct:layer	access:public
srcTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t srcTensorDesc, dstTensorDesc;$/;"	m	struct:layer	access:public
stair_activate	src/activations.h	/^static inline float stair_activate(float x)$/;"	f	signature:(float x)
stair_activate_kernel	src/activation_kernels.cu	/^__device__ float stair_activate_kernel(float x)$/;"	f	signature:(float x)
stair_gradient	src/activations.h	/^static inline float stair_gradient(float x)$/;"	f	signature:(float x)
stair_gradient_kernel	src/activation_kernels.cu	/^__device__ float stair_gradient_kernel(float x)$/;"	f	signature:(float x)
start_x	src/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon35	access:public
start_y	src/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon35	access:public
state	include/darknet.h	/^    float * state;$/;"	m	struct:layer	access:public
state_delta	include/darknet.h	/^    float * state_delta;$/;"	m	struct:layer	access:public
state_delta_gpu	include/darknet.h	/^    float * state_delta_gpu;$/;"	m	struct:layer	access:public
state_gate_layer	include/darknet.h	/^    struct layer *state_gate_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
state_gpu	include/darknet.h	/^    float * state_gpu;$/;"	m	struct:layer	access:public
state_h_layer	include/darknet.h	/^    struct layer *state_h_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
state_layer	include/darknet.h	/^    struct layer *state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
state_r_layer	include/darknet.h	/^    struct layer *state_r_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
state_save_layer	include/darknet.h	/^    struct layer *state_save_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
state_state_layer	include/darknet.h	/^    struct layer *state_state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
state_z_layer	include/darknet.h	/^    struct layer *state_z_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
statistics_connected_layer	src/connected_layer.c	/^void statistics_connected_layer(layer l)$/;"	f	signature:(layer l)
statistics_net	examples/darknet.c	/^void statistics_net(char *cfgfile, char *weightfile)$/;"	f	signature:(char *cfgfile, char *weightfile)
stb_image_write_test	src/stb_image_write.h	/^typedef int stb_image_write_test[sizeof(stbiw_uint32)==4 ? 1 : -1];$/;"	t
stbi__DNL	src/stb_image.h	2764;"	d
stbi__EOI	src/stb_image.h	2766;"	d
stbi__SOF	src/stb_image.h	2767;"	d
stbi__SOF_progressive	src/stb_image.h	2770;"	d
stbi__SOI	src/stb_image.h	2765;"	d
stbi__SOS	src/stb_image.h	2768;"	d
stbi__YCbCr_to_RGB_row	src/stb_image.h	/^static void stbi__YCbCr_to_RGB_row(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step)$/;"	f	signature:(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step)
stbi__YCbCr_to_RGB_simd	src/stb_image.h	/^static void stbi__YCbCr_to_RGB_simd(stbi_uc *out, stbi_uc const *y, stbi_uc const *pcb, stbi_uc const *pcr, int count, int step)$/;"	f	signature:(stbi_uc *out, stbi_uc const *y, stbi_uc const *pcb, stbi_uc const *pcr, int count, int step)
stbi__at_eof	src/stb_image.h	/^stbi_inline static int stbi__at_eof(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__bit_reverse	src/stb_image.h	/^stbi_inline static int stbi__bit_reverse(int v, int bits)$/;"	f	signature:(int v, int bits)
stbi__bitcount	src/stb_image.h	/^static int stbi__bitcount(unsigned int a)$/;"	f	signature:(unsigned int a)
stbi__bitreverse16	src/stb_image.h	/^stbi_inline static int stbi__bitreverse16(int n)$/;"	f	signature:(int n)
stbi__bmask	src/stb_image.h	/^static stbi__uint32 stbi__bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535};$/;"	v
stbi__bmp_info	src/stb_image.h	/^static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__bmp_load	src/stb_image.h	/^static stbi_uc *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__bmp_test	src/stb_image.h	/^static int stbi__bmp_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__bmp_test_raw	src/stb_image.h	/^static int stbi__bmp_test_raw(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__build_fast_ac	src/stb_image.h	/^static void stbi__build_fast_ac(stbi__int16 *fast_ac, stbi__huffman *h)$/;"	f	signature:(stbi__int16 *fast_ac, stbi__huffman *h)
stbi__build_huffman	src/stb_image.h	/^static int stbi__build_huffman(stbi__huffman *h, int *count)$/;"	f	signature:(stbi__huffman *h, int *count)
stbi__check_png_header	src/stb_image.h	/^static int stbi__check_png_header(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__clamp	src/stb_image.h	/^stbi_inline static stbi_uc stbi__clamp(int x)$/;"	f	signature:(int x)
stbi__cleanup_jpeg	src/stb_image.h	/^static void stbi__cleanup_jpeg(stbi__jpeg *j)$/;"	f	signature:(stbi__jpeg *j)
stbi__compute_huffman_codes	src/stb_image.h	/^static int stbi__compute_huffman_codes(stbi__zbuf *a)$/;"	f	signature:(stbi__zbuf *a)
stbi__compute_transparency	src/stb_image.h	/^static int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n)$/;"	f	signature:(stbi__png *z, stbi_uc tc[3], int out_n)
stbi__compute_y	src/stb_image.h	/^static stbi_uc stbi__compute_y(int r, int g, int b)$/;"	f	signature:(int r, int g, int b)
stbi__context	src/stb_image.h	/^} stbi__context;$/;"	t	typeref:struct:__anon22
stbi__convert_format	src/stb_image.h	/^static unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)$/;"	f	signature:(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)
stbi__copyval	src/stb_image.h	/^static void stbi__copyval(int channel,stbi_uc *dest,const stbi_uc *src)$/;"	f	signature:(int channel,stbi_uc *dest,const stbi_uc *src)
stbi__cpuid3	src/stb_image.h	/^static int stbi__cpuid3(void)$/;"	f	signature:(void)
stbi__create_png_image	src/stb_image.h	/^static int stbi__create_png_image(stbi__png *a, stbi_uc *image_data, stbi__uint32 image_data_len, int out_n, int depth, int color, int interlaced)$/;"	f	signature:(stbi__png *a, stbi_uc *image_data, stbi__uint32 image_data_len, int out_n, int depth, int color, int interlaced)
stbi__create_png_image_raw	src/stb_image.h	/^static int stbi__create_png_image_raw(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y, int depth, int color)$/;"	f	signature:(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y, int depth, int color)
stbi__de_iphone	src/stb_image.h	/^static void stbi__de_iphone(stbi__png *z)$/;"	f	signature:(stbi__png *z)
stbi__de_iphone_flag	src/stb_image.h	/^static int stbi__de_iphone_flag = 0;$/;"	v
stbi__decode_jpeg_header	src/stb_image.h	/^static int stbi__decode_jpeg_header(stbi__jpeg *z, int scan)$/;"	f	signature:(stbi__jpeg *z, int scan)
stbi__decode_jpeg_image	src/stb_image.h	/^static int stbi__decode_jpeg_image(stbi__jpeg *j)$/;"	f	signature:(stbi__jpeg *j)
stbi__depth_scale_table	src/stb_image.h	/^static stbi_uc stbi__depth_scale_table[9] = { 0, 0xff, 0x55, 0, 0x11, 0,0,0, 0x01 };$/;"	v
stbi__div16	src/stb_image.h	2886;"	d
stbi__div4	src/stb_image.h	2837;"	d
stbi__do_png	src/stb_image.h	/^static unsigned char *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp)$/;"	f	signature:(stbi__png *p, int *x, int *y, int *n, int req_comp)
stbi__do_zlib	src/stb_image.h	/^static int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)$/;"	f	signature:(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)
stbi__err	src/stb_image.h	/^static int stbi__err(const char *str)$/;"	f	signature:(const char *str)
stbi__err	src/stb_image.h	897;"	d
stbi__err	src/stb_image.h	899;"	d
stbi__err	src/stb_image.h	901;"	d
stbi__errpf	src/stb_image.h	904;"	d
stbi__errpuc	src/stb_image.h	905;"	d
stbi__expand_png_palette	src/stb_image.h	/^static int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)$/;"	f	signature:(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)
stbi__extend_receive	src/stb_image.h	/^stbi_inline static int stbi__extend_receive(stbi__jpeg *j, int n)$/;"	f	signature:(stbi__jpeg *j, int n)
stbi__f2f	src/stb_image.h	1905;"	d
stbi__fill_bits	src/stb_image.h	/^static void stbi__fill_bits(stbi__zbuf *z)$/;"	f	signature:(stbi__zbuf *z)
stbi__fill_gif_background	src/stb_image.h	/^static void stbi__fill_gif_background(stbi__gif *g)$/;"	f	signature:(stbi__gif *g)
stbi__float2int	src/stb_image.h	1383;"	d
stbi__float_postprocess	src/stb_image.h	/^static void stbi__float_postprocess(float *result, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(float *result, int *x, int *y, int *comp, int req_comp)
stbi__fopen	src/stb_image.h	/^static FILE *stbi__fopen(char const *filename, char const *mode)$/;"	f	signature:(char const *filename, char const *mode)
stbi__fsh	src/stb_image.h	1906;"	d
stbi__g_failure_reason	src/stb_image.h	/^static const char *stbi__g_failure_reason;$/;"	v
stbi__get16be	src/stb_image.h	/^static int stbi__get16be(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__get16le	src/stb_image.h	/^static int stbi__get16le(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__get32be	src/stb_image.h	/^static stbi__uint32 stbi__get32be(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__get32le	src/stb_image.h	/^static stbi__uint32 stbi__get32le(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__get8	src/stb_image.h	/^stbi_inline static stbi_uc stbi__get8(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__get_chunk_header	src/stb_image.h	/^static stbi__pngchunk stbi__get_chunk_header(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__get_marker	src/stb_image.h	/^static stbi_uc stbi__get_marker(stbi__jpeg *j)$/;"	f	signature:(stbi__jpeg *j)
stbi__getn	src/stb_image.h	/^static int stbi__getn(stbi__context *s, stbi_uc *buffer, int n)$/;"	f	signature:(stbi__context *s, stbi_uc *buffer, int n)
stbi__gif	src/stb_image.h	/^} stbi__gif;$/;"	t	typeref:struct:__anon35
stbi__gif_header	src/stb_image.h	/^static int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info)$/;"	f	signature:(stbi__context *s, stbi__gif *g, int *comp, int is_info)
stbi__gif_info	src/stb_image.h	/^static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__gif_info_raw	src/stb_image.h	/^static int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__gif_load	src/stb_image.h	/^static stbi_uc *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__gif_load_next	src/stb_image.h	/^static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, stbi__gif *g, int *comp, int req_comp)
stbi__gif_lzw	src/stb_image.h	/^} stbi__gif_lzw;$/;"	t	typeref:struct:__anon34
stbi__gif_parse_colortable	src/stb_image.h	/^static void stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp)$/;"	f	signature:(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp)
stbi__gif_test	src/stb_image.h	/^static int stbi__gif_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__gif_test_raw	src/stb_image.h	/^static int stbi__gif_test_raw(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__grow_buffer_unsafe	src/stb_image.h	/^static void stbi__grow_buffer_unsafe(stbi__jpeg *j)$/;"	f	signature:(stbi__jpeg *j)
stbi__h2l_gamma_i	src/stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__h2l_scale_i	src/stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__hdr_convert	src/stb_image.h	/^static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)$/;"	f	signature:(float *output, stbi_uc *input, int req_comp)
stbi__hdr_gettoken	src/stb_image.h	/^static char *stbi__hdr_gettoken(stbi__context *z, char *buffer)$/;"	f	signature:(stbi__context *z, char *buffer)
stbi__hdr_info	src/stb_image.h	/^static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__hdr_load	src/stb_image.h	/^static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__hdr_test	src/stb_image.h	/^static int stbi__hdr_test(stbi__context* s)$/;"	f	signature:(stbi__context* s)
stbi__hdr_test_core	src/stb_image.h	/^static int stbi__hdr_test_core(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__hdr_to_ldr	src/stb_image.h	/^static stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp)$/;"	f	signature:(float *data, int x, int y, int comp)
stbi__high_bit	src/stb_image.h	/^static int stbi__high_bit(unsigned int z)$/;"	f	signature:(unsigned int z)
stbi__huffman	src/stb_image.h	/^} stbi__huffman;$/;"	t	typeref:struct:__anon24
stbi__idct_block	src/stb_image.h	/^static void stbi__idct_block(stbi_uc *out, int out_stride, short data[64])$/;"	f	signature:(stbi_uc *out, int out_stride, short data[64])
stbi__idct_simd	src/stb_image.h	/^static void stbi__idct_simd(stbi_uc *out, int out_stride, short data[64])$/;"	f	signature:(stbi_uc *out, int out_stride, short data[64])
stbi__info_main	src/stb_image.h	/^static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__init_zdefaults	src/stb_image.h	/^static void stbi__init_zdefaults(void)$/;"	f	signature:(void)
stbi__int16	src/stb_image.h	/^typedef   signed short stbi__int16;$/;"	t
stbi__int16	src/stb_image.h	/^typedef int16_t  stbi__int16;$/;"	t
stbi__int32	src/stb_image.h	/^typedef   signed int   stbi__int32;$/;"	t
stbi__int32	src/stb_image.h	/^typedef int32_t  stbi__int32;$/;"	t
stbi__jbias	src/stb_image.h	/^static int const stbi__jbias[16] = {0,-1,-3,-7,-15,-31,-63,-127,-255,-511,-1023,-2047,-4095,-8191,-16383,-32767};$/;"	v
stbi__jpeg	src/stb_image.h	/^} stbi__jpeg;$/;"	t	typeref:struct:__anon25
stbi__jpeg_decode_block	src/stb_image.h	/^static int stbi__jpeg_decode_block(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huffman *hac, stbi__int16 *fac, int b, stbi_uc *dequant)$/;"	f	signature:(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huffman *hac, stbi__int16 *fac, int b, stbi_uc *dequant)
stbi__jpeg_decode_block_prog_ac	src/stb_image.h	/^static int stbi__jpeg_decode_block_prog_ac(stbi__jpeg *j, short data[64], stbi__huffman *hac, stbi__int16 *fac)$/;"	f	signature:(stbi__jpeg *j, short data[64], stbi__huffman *hac, stbi__int16 *fac)
stbi__jpeg_decode_block_prog_dc	src/stb_image.h	/^static int stbi__jpeg_decode_block_prog_dc(stbi__jpeg *j, short data[64], stbi__huffman *hdc, int b)$/;"	f	signature:(stbi__jpeg *j, short data[64], stbi__huffman *hdc, int b)
stbi__jpeg_dequantize	src/stb_image.h	/^static void stbi__jpeg_dequantize(short *data, stbi_uc *dequant)$/;"	f	signature:(short *data, stbi_uc *dequant)
stbi__jpeg_dezigzag	src/stb_image.h	/^static stbi_uc stbi__jpeg_dezigzag[64+15] =$/;"	v
stbi__jpeg_finish	src/stb_image.h	/^static void stbi__jpeg_finish(stbi__jpeg *z)$/;"	f	signature:(stbi__jpeg *z)
stbi__jpeg_get_bit	src/stb_image.h	/^stbi_inline static int stbi__jpeg_get_bit(stbi__jpeg *j)$/;"	f	signature:(stbi__jpeg *j)
stbi__jpeg_get_bits	src/stb_image.h	/^stbi_inline static int stbi__jpeg_get_bits(stbi__jpeg *j, int n)$/;"	f	signature:(stbi__jpeg *j, int n)
stbi__jpeg_huff_decode	src/stb_image.h	/^stbi_inline static int stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h)$/;"	f	signature:(stbi__jpeg *j, stbi__huffman *h)
stbi__jpeg_info	src/stb_image.h	/^static int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__jpeg_info_raw	src/stb_image.h	/^static int stbi__jpeg_info_raw(stbi__jpeg *j, int *x, int *y, int *comp)$/;"	f	signature:(stbi__jpeg *j, int *x, int *y, int *comp)
stbi__jpeg_load	src/stb_image.h	/^static unsigned char *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__jpeg_reset	src/stb_image.h	/^static void stbi__jpeg_reset(stbi__jpeg *j)$/;"	f	signature:(stbi__jpeg *j)
stbi__jpeg_test	src/stb_image.h	/^static int stbi__jpeg_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__l2h_gamma	src/stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__l2h_scale	src/stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__ldr_to_hdr	src/stb_image.h	/^static float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp)$/;"	f	signature:(stbi_uc *data, int x, int y, int comp)
stbi__load_flip	src/stb_image.h	/^static unsigned char *stbi__load_flip(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__load_main	src/stb_image.h	/^static unsigned char *stbi__load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__loadf_main	src/stb_image.h	/^static float *stbi__loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__malloc	src/stb_image.h	/^static void *stbi__malloc(size_t size)$/;"	f	signature:(size_t size)
stbi__out_gif_code	src/stb_image.h	/^static void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code)$/;"	f	signature:(stbi__gif *g, stbi__uint16 code)
stbi__paeth	src/stb_image.h	/^static int stbi__paeth(int a, int b, int c)$/;"	f	signature:(int a, int b, int c)
stbi__parse_entropy_coded_data	src/stb_image.h	/^static int stbi__parse_entropy_coded_data(stbi__jpeg *z)$/;"	f	signature:(stbi__jpeg *z)
stbi__parse_huffman_block	src/stb_image.h	/^static int stbi__parse_huffman_block(stbi__zbuf *a)$/;"	f	signature:(stbi__zbuf *a)
stbi__parse_png_file	src/stb_image.h	/^static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)$/;"	f	signature:(stbi__png *z, int scan, int req_comp)
stbi__parse_uncomperssed_block	src/stb_image.h	/^static int stbi__parse_uncomperssed_block(stbi__zbuf *a)$/;"	f	signature:(stbi__zbuf *a)
stbi__parse_zlib	src/stb_image.h	/^static int stbi__parse_zlib(stbi__zbuf *a, int parse_header)$/;"	f	signature:(stbi__zbuf *a, int parse_header)
stbi__parse_zlib_header	src/stb_image.h	/^static int stbi__parse_zlib_header(stbi__zbuf *a)$/;"	f	signature:(stbi__zbuf *a)
stbi__pic_info	src/stb_image.h	/^static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__pic_is4	src/stb_image.h	/^static int stbi__pic_is4(stbi__context *s,const char *str)$/;"	f	signature:(stbi__context *s,const char *str)
stbi__pic_load	src/stb_image.h	/^static stbi_uc *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp)$/;"	f	signature:(stbi__context *s,int *px,int *py,int *comp,int req_comp)
stbi__pic_load_core	src/stb_image.h	/^static stbi_uc *stbi__pic_load_core(stbi__context *s,int width,int height,int *comp, stbi_uc *result)$/;"	f	signature:(stbi__context *s,int width,int height,int *comp, stbi_uc *result)
stbi__pic_packet	src/stb_image.h	/^} stbi__pic_packet;$/;"	t	typeref:struct:__anon33
stbi__pic_test	src/stb_image.h	/^static int stbi__pic_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__pic_test_core	src/stb_image.h	/^static int stbi__pic_test_core(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__png	src/stb_image.h	/^} stbi__png;$/;"	t	typeref:struct:__anon31
stbi__png_info	src/stb_image.h	/^static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__png_info_raw	src/stb_image.h	/^static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp)$/;"	f	signature:(stbi__png *p, int *x, int *y, int *comp)
stbi__png_load	src/stb_image.h	/^static unsigned char *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__png_test	src/stb_image.h	/^static int stbi__png_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__pngchunk	src/stb_image.h	/^} stbi__pngchunk;$/;"	t	typeref:struct:__anon30
stbi__pnm_getinteger	src/stb_image.h	/^static int      stbi__pnm_getinteger(stbi__context *s, char *c)$/;"	f	signature:(stbi__context *s, char *c)
stbi__pnm_info	src/stb_image.h	/^static int      stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__pnm_isdigit	src/stb_image.h	/^static int      stbi__pnm_isdigit(char c)$/;"	f	signature:(char c)
stbi__pnm_isspace	src/stb_image.h	/^static int      stbi__pnm_isspace(char c)$/;"	f	signature:(char c)
stbi__pnm_load	src/stb_image.h	/^static stbi_uc *stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__pnm_skip_whitespace	src/stb_image.h	/^static void     stbi__pnm_skip_whitespace(stbi__context *s, char *c)$/;"	f	signature:(stbi__context *s, char *c)
stbi__pnm_test	src/stb_image.h	/^static int      stbi__pnm_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__process_frame_header	src/stb_image.h	/^static int stbi__process_frame_header(stbi__jpeg *z, int scan)$/;"	f	signature:(stbi__jpeg *z, int scan)
stbi__process_gif_raster	src/stb_image.h	/^static stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g)$/;"	f	signature:(stbi__context *s, stbi__gif *g)
stbi__process_marker	src/stb_image.h	/^static int stbi__process_marker(stbi__jpeg *z, int m)$/;"	f	signature:(stbi__jpeg *z, int m)
stbi__process_scan_header	src/stb_image.h	/^static int stbi__process_scan_header(stbi__jpeg *z)$/;"	f	signature:(stbi__jpeg *z)
stbi__psd_info	src/stb_image.h	/^static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__psd_load	src/stb_image.h	/^static stbi_uc *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__psd_test	src/stb_image.h	/^static int stbi__psd_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__readval	src/stb_image.h	/^static stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest)$/;"	f	signature:(stbi__context *s, int channel, stbi_uc *dest)
stbi__refill_buffer	src/stb_image.h	/^static void stbi__refill_buffer(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__resample	src/stb_image.h	/^} stbi__resample;$/;"	t	typeref:struct:__anon27
stbi__resample_row_generic	src/stb_image.h	/^static stbi_uc *stbi__resample_row_generic(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	signature:(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
stbi__resample_row_h_2	src/stb_image.h	/^static stbi_uc*  stbi__resample_row_h_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	signature:(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
stbi__resample_row_hv_2	src/stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	signature:(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
stbi__resample_row_hv_2_simd	src/stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2_simd(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	signature:(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
stbi__resample_row_v_2	src/stb_image.h	/^static stbi_uc* stbi__resample_row_v_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	signature:(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
stbi__rewind	src/stb_image.h	/^static void stbi__rewind(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__setup_jpeg	src/stb_image.h	/^static void stbi__setup_jpeg(stbi__jpeg *j)$/;"	f	signature:(stbi__jpeg *j)
stbi__shiftsigned	src/stb_image.h	/^static int stbi__shiftsigned(int v, int shift, int bits)$/;"	f	signature:(int v, int shift, int bits)
stbi__skip	src/stb_image.h	/^static void stbi__skip(stbi__context *s, int n)$/;"	f	signature:(stbi__context *s, int n)
stbi__sse2_available	src/stb_image.h	/^static int stbi__sse2_available()$/;"	f	signature:()
stbi__start_callbacks	src/stb_image.h	/^static void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user)$/;"	f	signature:(stbi__context *s, stbi_io_callbacks *c, void *user)
stbi__start_file	src/stb_image.h	/^static void stbi__start_file(stbi__context *s, FILE *f)$/;"	f	signature:(stbi__context *s, FILE *f)
stbi__start_mem	src/stb_image.h	/^static void stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len)$/;"	f	signature:(stbi__context *s, stbi_uc const *buffer, int len)
stbi__stdio_callbacks	src/stb_image.h	/^static stbi_io_callbacks stbi__stdio_callbacks =$/;"	v
stbi__stdio_eof	src/stb_image.h	/^static int stbi__stdio_eof(void *user)$/;"	f	signature:(void *user)
stbi__stdio_read	src/stb_image.h	/^static int stbi__stdio_read(void *user, char *data, int size)$/;"	f	signature:(void *user, char *data, int size)
stbi__stdio_skip	src/stb_image.h	/^static void stbi__stdio_skip(void *user, int n)$/;"	f	signature:(void *user, int n)
stbi__tga_info	src/stb_image.h	/^static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__tga_load	src/stb_image.h	/^static stbi_uc *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__tga_test	src/stb_image.h	/^static int stbi__tga_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__uint16	src/stb_image.h	/^typedef uint16_t stbi__uint16;$/;"	t
stbi__uint16	src/stb_image.h	/^typedef unsigned short stbi__uint16;$/;"	t
stbi__uint32	src/stb_image.h	/^typedef uint32_t stbi__uint32;$/;"	t
stbi__uint32	src/stb_image.h	/^typedef unsigned int   stbi__uint32;$/;"	t
stbi__unpremultiply_on_load	src/stb_image.h	/^static int stbi__unpremultiply_on_load = 0;$/;"	v
stbi__vertically_flip_on_load	src/stb_image.h	/^static int stbi__vertically_flip_on_load = 0;$/;"	v
stbi__zbuf	src/stb_image.h	/^} stbi__zbuf;$/;"	t	typeref:struct:__anon29
stbi__zbuild_huffman	src/stb_image.h	/^static int stbi__zbuild_huffman(stbi__zhuffman *z, stbi_uc *sizelist, int num)$/;"	f	signature:(stbi__zhuffman *z, stbi_uc *sizelist, int num)
stbi__zdefault_distance	src/stb_image.h	/^static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];$/;"	v
stbi__zdefault_length	src/stb_image.h	/^static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];$/;"	v
stbi__zdist_base	src/stb_image.h	/^static int stbi__zdist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,$/;"	v
stbi__zdist_extra	src/stb_image.h	/^static int stbi__zdist_extra[32] =$/;"	v
stbi__zexpand	src/stb_image.h	/^static int stbi__zexpand(stbi__zbuf *z, char *zout, int n)  \/\/ need to make room for n bytes$/;"	f	signature:(stbi__zbuf *z, char *zout, int n)
stbi__zget8	src/stb_image.h	/^stbi_inline static stbi_uc stbi__zget8(stbi__zbuf *z)$/;"	f	signature:(stbi__zbuf *z)
stbi__zhuffman	src/stb_image.h	/^} stbi__zhuffman;$/;"	t	typeref:struct:__anon28
stbi__zhuffman_decode	src/stb_image.h	/^stbi_inline static int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f	signature:(stbi__zbuf *a, stbi__zhuffman *z)
stbi__zhuffman_decode_slowpath	src/stb_image.h	/^static int stbi__zhuffman_decode_slowpath(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f	signature:(stbi__zbuf *a, stbi__zhuffman *z)
stbi__zlength_base	src/stb_image.h	/^static int stbi__zlength_base[31] = {$/;"	v
stbi__zlength_extra	src/stb_image.h	/^static int stbi__zlength_extra[31]=$/;"	v
stbi__zreceive	src/stb_image.h	/^stbi_inline static unsigned int stbi__zreceive(stbi__zbuf *z, int n)$/;"	f	signature:(stbi__zbuf *z, int n)
stbi_convert_iphone_png_to_rgb	src/stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)$/;"	f	signature:(int flag_true_if_should_convert)
stbi_failure_reason	src/stb_image.h	/^STBIDEF const char *stbi_failure_reason(void)$/;"	f	signature:(void)
stbi_hdr_to_ldr_gamma	src/stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1\/gamma; }$/;"	f	signature:(float gamma)
stbi_hdr_to_ldr_scale	src/stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1\/scale; }$/;"	f	signature:(float scale)
stbi_image_free	src/stb_image.h	/^STBIDEF void stbi_image_free(void *retval_from_stbi_load)$/;"	f	signature:(void *retval_from_stbi_load)
stbi_info	src/stb_image.h	/^STBIDEF int stbi_info(char const *filename, int *x, int *y, int *comp)$/;"	f	signature:(char const *filename, int *x, int *y, int *comp)
stbi_info_from_callbacks	src/stb_image.h	/^STBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)$/;"	f	signature:(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)
stbi_info_from_file	src/stb_image.h	/^STBIDEF int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)$/;"	f	signature:(FILE *f, int *x, int *y, int *comp)
stbi_info_from_memory	src/stb_image.h	/^STBIDEF int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)$/;"	f	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp)
stbi_inline	src/stb_image.h	581;"	d
stbi_inline	src/stb_image.h	583;"	d
stbi_inline	src/stb_image.h	586;"	d
stbi_io_callbacks	src/stb_image.h	/^} stbi_io_callbacks;$/;"	t	typeref:struct:__anon21
stbi_is_hdr	src/stb_image.h	/^STBIDEF int      stbi_is_hdr          (char const *filename)$/;"	f	signature:(char const *filename)
stbi_is_hdr_from_callbacks	src/stb_image.h	/^STBIDEF int      stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)$/;"	f	signature:(stbi_io_callbacks const *clbk, void *user)
stbi_is_hdr_from_file	src/stb_image.h	/^STBIDEF int      stbi_is_hdr_from_file(FILE *f)$/;"	f	signature:(FILE *f)
stbi_is_hdr_from_memory	src/stb_image.h	/^STBIDEF int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)$/;"	f	signature:(stbi_uc const *buffer, int len)
stbi_ldr_to_hdr_gamma	src/stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }$/;"	f	signature:(float gamma)
stbi_ldr_to_hdr_scale	src/stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }$/;"	f	signature:(float scale)
stbi_load	src/stb_image.h	/^STBIDEF stbi_uc *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(char const *filename, int *x, int *y, int *comp, int req_comp)
stbi_load_from_callbacks	src/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
stbi_load_from_file	src/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(FILE *f, int *x, int *y, int *comp, int req_comp)
stbi_load_from_memory	src/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
stbi_loadf	src/stb_image.h	/^STBIDEF float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(char const *filename, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_callbacks	src/stb_image.h	/^STBIDEF float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_file	src/stb_image.h	/^STBIDEF float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(FILE *f, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_memory	src/stb_image.h	/^STBIDEF float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
stbi_lrot	src/stb_image.h	617;"	d
stbi_lrot	src/stb_image.h	619;"	d
stbi_set_flip_vertically_on_load	src/stb_image.h	/^STBIDEF void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip)$/;"	f	signature:(int flag_true_if_should_flip)
stbi_set_unpremultiply_on_load	src/stb_image.h	/^STBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)$/;"	f	signature:(int flag_true_if_should_unpremultiply)
stbi_uc	src/stb_image.h	/^typedef unsigned char stbi_uc;$/;"	t
stbi_write_bmp	src/stb_image_write.h	/^int stbi_write_bmp(char const *filename, int x, int y, int comp, const void *data)$/;"	f	signature:(char const *filename, int x, int y, int comp, const void *data)
stbi_write_hdr	src/stb_image_write.h	/^int stbi_write_hdr(char const *filename, int x, int y, int comp, const float *data)$/;"	f	signature:(char const *filename, int x, int y, int comp, const float *data)
stbi_write_png	src/stb_image_write.h	/^int stbi_write_png(char const *filename, int x, int y, int comp, const void *data, int stride_bytes)$/;"	f	signature:(char const *filename, int x, int y, int comp, const void *data, int stride_bytes)
stbi_write_png_to_mem	src/stb_image_write.h	/^unsigned char *stbi_write_png_to_mem(unsigned char *pixels, int stride_bytes, int x, int y, int n, int *out_len)$/;"	f	signature:(unsigned char *pixels, int stride_bytes, int x, int y, int n, int *out_len)
stbi_write_tga	src/stb_image_write.h	/^int stbi_write_tga(char const *filename, int x, int y, int comp, const void *data)$/;"	f	signature:(char const *filename, int x, int y, int comp, const void *data)
stbi_zlib_compress	src/stb_image_write.h	/^unsigned char * stbi_zlib_compress(unsigned char *data, int data_len, int *out_len, int quality)$/;"	f	signature:(unsigned char *data, int data_len, int *out_len, int quality)
stbi_zlib_decode_buffer	src/stb_image.h	/^STBIDEF int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)$/;"	f	signature:(char *obuffer, int olen, char const *ibuffer, int ilen)
stbi_zlib_decode_malloc	src/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)$/;"	f	signature:(char const *buffer, int len, int *outlen)
stbi_zlib_decode_malloc_guesssize	src/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen)$/;"	f	signature:(const char *buffer, int len, int initial_size, int *outlen)
stbi_zlib_decode_malloc_guesssize_headerflag	src/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header)$/;"	f	signature:(const char *buffer, int len, int initial_size, int *outlen, int parse_header)
stbi_zlib_decode_noheader_buffer	src/stb_image.h	/^STBIDEF int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen)$/;"	f	signature:(char *obuffer, int olen, const char *ibuffer, int ilen)
stbi_zlib_decode_noheader_malloc	src/stb_image.h	/^STBIDEF char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)$/;"	f	signature:(char const *buffer, int len, int *outlen)
stbiw__ZHASH	src/stb_image_write.h	467;"	d
stbiw__crc32	src/stb_image_write.h	/^unsigned int stbiw__crc32(unsigned char *buffer, int len)$/;"	f	signature:(unsigned char *buffer, int len)
stbiw__linear_to_rgbe	src/stb_image_write.h	/^void stbiw__linear_to_rgbe(unsigned char *rgbe, float *linear)$/;"	f	signature:(unsigned char *rgbe, float *linear)
stbiw__max	src/stb_image_write.h	243;"	d
stbiw__paeth	src/stb_image_write.h	/^static unsigned char stbiw__paeth(int a, int b, int c)$/;"	f	signature:(int a, int b, int c)
stbiw__sbcount	src/stb_image_write.h	399;"	d
stbiw__sbfree	src/stb_image_write.h	400;"	d
stbiw__sbgrow	src/stb_image_write.h	396;"	d
stbiw__sbgrowf	src/stb_image_write.h	/^static void *stbiw__sbgrowf(void **arr, int increment, int itemsize)$/;"	f	signature:(void **arr, int increment, int itemsize)
stbiw__sbm	src/stb_image_write.h	391;"	d
stbiw__sbmaybegrow	src/stb_image_write.h	395;"	d
stbiw__sbn	src/stb_image_write.h	392;"	d
stbiw__sbneedgrow	src/stb_image_write.h	394;"	d
stbiw__sbpush	src/stb_image_write.h	398;"	d
stbiw__sbraw	src/stb_image_write.h	390;"	d
stbiw__wp32	src/stb_image_write.h	587;"	d
stbiw__wpcrc	src/stb_image_write.h	/^static void stbiw__wpcrc(unsigned char **data, int len)$/;"	f	signature:(unsigned char **data, int len)
stbiw__wpng4	src/stb_image_write.h	586;"	d
stbiw__wptag	src/stb_image_write.h	588;"	d
stbiw__write_dump_data	src/stb_image_write.h	/^void stbiw__write_dump_data(FILE *f, int length, unsigned char *data)$/;"	f	signature:(FILE *f, int length, unsigned char *data)
stbiw__write_hdr_scanline	src/stb_image_write.h	/^void stbiw__write_hdr_scanline(FILE *f, int width, int comp, unsigned char *scratch, const float *scanline)$/;"	f	signature:(FILE *f, int width, int comp, unsigned char *scratch, const float *scanline)
stbiw__write_run_data	src/stb_image_write.h	/^void stbiw__write_run_data(FILE *f, int length, unsigned char databyte)$/;"	f	signature:(FILE *f, int length, unsigned char databyte)
stbiw__zhash	src/stb_image_write.h	/^static unsigned int stbiw__zhash(unsigned char *data)$/;"	f	signature:(unsigned char *data)
stbiw__zlib_add	src/stb_image_write.h	456;"	d
stbiw__zlib_bitrev	src/stb_image_write.h	/^static int stbiw__zlib_bitrev(int code, int codebits)$/;"	f	signature:(int code, int codebits)
stbiw__zlib_countm	src/stb_image_write.h	/^static unsigned int stbiw__zlib_countm(unsigned char *a, unsigned char *b, int limit)$/;"	f	signature:(unsigned char *a, unsigned char *b, int limit)
stbiw__zlib_flush	src/stb_image_write.h	455;"	d
stbiw__zlib_flushf	src/stb_image_write.h	/^static unsigned char *stbiw__zlib_flushf(unsigned char *data, unsigned int *bitbuffer, int *bitcount)$/;"	f	signature:(unsigned char *data, unsigned int *bitbuffer, int *bitcount)
stbiw__zlib_huff	src/stb_image_write.h	464;"	d
stbiw__zlib_huff1	src/stb_image_write.h	460;"	d
stbiw__zlib_huff2	src/stb_image_write.h	461;"	d
stbiw__zlib_huff3	src/stb_image_write.h	462;"	d
stbiw__zlib_huff4	src/stb_image_write.h	463;"	d
stbiw__zlib_huffa	src/stb_image_write.h	458;"	d
stbiw__zlib_huffb	src/stb_image_write.h	465;"	d
stbiw_uint32	src/stb_image_write.h	/^typedef unsigned int stbiw_uint32;$/;"	t
step	include/darknet.h	/^    int step;$/;"	m	struct:network	access:public
step	src/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon35	access:public
steps	include/darknet.h	/^    int   *steps;$/;"	m	struct:network	access:public
steps	include/darknet.h	/^    int steps;$/;"	m	struct:layer	access:public
stopbackward	include/darknet.h	/^    int stopbackward;$/;"	m	struct:layer	access:public
stride	include/darknet.h	/^    int stride;$/;"	m	struct:layer	access:public
string_to_board	examples/go.c	/^void string_to_board(char *s, float *board)$/;"	f	signature:(char *s, float *board)
string_to_layer_type	src/parser.c	/^LAYER_TYPE string_to_layer_type(char * type)$/;"	f	signature:(char * type)
strip	src/utils.c	/^void strip(char *s)$/;"	f	signature:(char *s)
strip_char	src/utils.c	/^void strip_char(char *s, char bad)$/;"	f	signature:(char *s, char bad)
subdivisions	include/darknet.h	/^    int subdivisions;$/;"	m	struct:network	access:public
succ_high	src/stb_image.h	/^   int            succ_high;$/;"	m	struct:__anon25	access:public
succ_low	src/stb_image.h	/^   int            succ_low;$/;"	m	struct:__anon25	access:public
suffix	src/stb_image.h	/^   stbi_uc suffix;$/;"	m	struct:__anon34	access:public
suicide_go	examples/go.c	/^int suicide_go(float *b, int p, int r, int c)$/;"	f	signature:(float *b, int p, int r, int c)
sum_array	src/utils.c	/^float sum_array(float *a, int n)$/;"	f	signature:(float *a, int n)
supp_gpu	src/blas_kernels.cu	/^extern "C" void supp_gpu(int N, float ALPHA, float * X, int INCX)$/;"	f	signature:(int N, float ALPHA, float * X, int INCX)
supp_kernel	src/blas_kernels.cu	/^__global__ void supp_kernel(int N, float ALPHA, float *X, int INCX)$/;"	f	signature:(int N, float ALPHA, float *X, int INCX)
swap_binary	src/convolutional_layer.c	/^void swap_binary(convolutional_layer *l)$/;"	f	signature:(convolutional_layer *l)
sync_args	src/network_kernels.cu	/^} sync_args;$/;"	t	typeref:struct:__anon19	file:
sync_layer	src/network_kernels.cu	/^void sync_layer(network *nets, int n, int j)$/;"	f	signature:(network *nets, int n, int j)
sync_layer_in_thread	src/network_kernels.cu	/^pthread_t sync_layer_in_thread(network *nets, int n, int j)$/;"	f	signature:(network *nets, int n, int j)
sync_layer_thread	src/network_kernels.cu	/^void *sync_layer_thread(void *ptr)$/;"	f	signature:(void *ptr)
sync_nets	src/network_kernels.cu	/^void sync_nets(network *nets, int n, int interval)$/;"	f	signature:(network *nets, int n, int interval)
t	include/darknet.h	/^    int *t;$/;"	m	struct:network	access:public
t	include/darknet.h	/^    int t;$/;"	m	struct:__anon9	access:public
tanh	include/darknet.h	/^    int tanh;$/;"	m	struct:layer	access:public
tanh_activate	src/activations.h	/^static inline float tanh_activate(float x){return (exp(2*x)-1)\/(exp(2*x)+1);}$/;"	f	signature:(float x)
tanh_activate_kernel	src/activation_kernels.cu	/^__device__ float tanh_activate_kernel(float x){return (2\/(1 + exp(-2*x)) - 1);}$/;"	f	signature:(float x)
tanh_gradient	src/activations.h	/^static inline float tanh_gradient(float x){return 1-x*x;}$/;"	f	signature:(float x)
tanh_gradient_kernel	src/activation_kernels.cu	/^__device__ float tanh_gradient_kernel(float x){return 1-x*x;}$/;"	f	signature:(float x)
temp2_cpu	include/darknet.h	/^    float *temp2_cpu;$/;"	m	struct:layer	access:public
temp2_gpu	include/darknet.h	/^    float *temp2_gpu;$/;"	m	struct:layer	access:public
temp3_cpu	include/darknet.h	/^    float *temp3_cpu;$/;"	m	struct:layer	access:public
temp3_gpu	include/darknet.h	/^    float *temp3_gpu;$/;"	m	struct:layer	access:public
temp_cpu	include/darknet.h	/^    float *temp_cpu;$/;"	m	struct:layer	access:public
temp_gpu	include/darknet.h	/^    float *temp_gpu;$/;"	m	struct:layer	access:public
temperature	include/darknet.h	/^    float temperature;$/;"	m	struct:layer	access:public
test_box	src/box.c	/^void test_box()$/;"	f
test_captcha	examples/captcha.c	/^void test_captcha(char *cfgfile, char *weightfile, char *filename)$/;"	f	signature:(char *cfgfile, char *weightfile, char *filename)
test_char_rnn	examples/rnn.c	/^void test_char_rnn(char *cfgfile, char *weightfile, int num, char *seed, float temp, int rseed, char *token_file)$/;"	f	signature:(char *cfgfile, char *weightfile, int num, char *seed, float temp, int rseed, char *token_file)
test_cifar	examples/cifar.c	/^void test_cifar(char *filename, char *weightfile)$/;"	f	signature:(char *filename, char *weightfile)
test_cifar_csv	examples/cifar.c	/^void test_cifar_csv(char *filename, char *weightfile)$/;"	f	signature:(char *filename, char *weightfile)
test_cifar_csvtrain	examples/cifar.c	/^void test_cifar_csvtrain(char *filename, char *weightfile)$/;"	f	signature:(char *filename, char *weightfile)
test_cifar_multi	examples/cifar.c	/^void test_cifar_multi(char *filename, char *weightfile)$/;"	f	signature:(char *filename, char *weightfile)
test_classifier	examples/classifier.c	/^void test_classifier(char *datacfg, char *cfgfile, char *weightfile, int target_layer)$/;"	f	signature:(char *datacfg, char *cfgfile, char *weightfile, int target_layer)
test_coco	examples/coco.c	/^void test_coco(char *cfgfile, char *weightfile, char *filename, float thresh)$/;"	f	signature:(char *cfgfile, char *weightfile, char *filename, float thresh)
test_dcgan	examples/lsd.c	/^void test_dcgan(char *cfgfile, char *weightfile)$/;"	f	signature:(char *cfgfile, char *weightfile)
test_detector	examples/detector.c	/^void test_detector(char *datacfg, char *cfgfile, char *weightfile, char *filename, float thresh, float hier_thresh, char *outfile, int fullscreen)$/;"	f	signature:(char *datacfg, char *cfgfile, char *weightfile, char *filename, float thresh, float hier_thresh, char *outfile, int fullscreen)
test_dice	examples/dice.c	/^void test_dice(char *cfgfile, char *weightfile, char *filename)$/;"	f	signature:(char *cfgfile, char *weightfile, char *filename)
test_dintersect	src/box.c	/^void test_dintersect()$/;"	f
test_dunion	src/box.c	/^void test_dunion()$/;"	f
test_go	examples/go.c	/^void test_go(char *cfg, char *weights, int multi)$/;"	f	signature:(char *cfg, char *weights, int multi)
test_gpu_accuracy	src/gemm.c	/^void test_gpu_accuracy(int TA, int TB, int m, int k, int n)$/;"	f	signature:(int TA, int TB, int m, int k, int n)
test_gpu_blas	src/gemm.c	/^int test_gpu_blas()$/;"	f
test_lsd	examples/lsd.c	/^void test_lsd(char *cfgfile, char *weightfile, char *filename, int gray)$/;"	f	signature:(char *cfgfile, char *weightfile, char *filename, int gray)
test_resize	src/image.c	/^void test_resize(char *filename)$/;"	f	signature:(char *filename)
test_super	examples/super.c	/^void test_super(char *cfgfile, char *weightfile, char *filename)$/;"	f	signature:(char *cfgfile, char *weightfile, char *filename)
test_tactic_rnn	examples/rnn.c	/^void test_tactic_rnn(char *cfgfile, char *weightfile, int num, float temp, int rseed, char *token_file)$/;"	f	signature:(char *cfgfile, char *weightfile, int num, float temp, int rseed, char *token_file)
test_tag	examples/tag.c	/^void test_tag(char *cfgfile, char *weightfile, char *filename)$/;"	f	signature:(char *cfgfile, char *weightfile, char *filename)
test_voxel	examples/voxel.c	/^void test_voxel(char *cfgfile, char *weightfile, char *filename)$/;"	f	signature:(char *cfgfile, char *weightfile, char *filename)
test_writing	examples/writing.c	/^void test_writing(char *cfgfile, char *weightfile, char *filename)$/;"	f	signature:(char *cfgfile, char *weightfile, char *filename)
test_yolo	examples/yolo.c	/^void test_yolo(char *cfgfile, char *weightfile, char *filename, float thresh)$/;"	f	signature:(char *cfgfile, char *weightfile, char *filename, float thresh)
threads	include/darknet.h	/^    int threads;$/;"	m	struct:load_args	access:public
threat_classifier	examples/classifier.c	/^void threat_classifier(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)$/;"	f	signature:(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)
three_way_max	src/image.c	/^float three_way_max(float a, float b, float c)$/;"	f	signature:(float a, float b, float c)
three_way_min	src/image.c	/^float three_way_min(float a, float b, float c)$/;"	f	signature:(float a, float b, float c)
thresh	include/darknet.h	/^    float thresh;$/;"	m	struct:layer	access:public
threshold_image	src/image.c	/^image threshold_image(image im, float thresh)$/;"	f	signature:(image im, float thresh)
tile_images	src/image.c	/^image tile_images(image a, image b, int dx)$/;"	f	signature:(image a, image b, int dx)
time_gpu	src/gemm.c	/^void time_gpu(int TA, int TB, int m, int k, int n)$/;"	f	signature:(int TA, int TB, int m, int k, int n)
time_gpu_random_matrix	src/gemm.c	/^void time_gpu_random_matrix(int TA, int TB, int m, int k, int n)$/;"	f	signature:(int TA, int TB, int m, int k, int n)
time_random_matrix	src/gemm.c	/^void time_random_matrix(int TA, int TB, int m, int k, int n)$/;"	f	signature:(int TA, int TB, int m, int k, int n)
time_steps	include/darknet.h	/^    int time_steps;$/;"	m	struct:network	access:public
time_steps	src/parser.c	/^    int time_steps;$/;"	m	struct:size_params	file:	access:public
tisnan	src/region_layer.c	/^float tisnan(float x)$/;"	f	signature:(float x)
todo	src/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon25	access:public
top	include/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon16	access:public
top_k	src/utils.c	/^void top_k(float *a, int n, int k, int *index)$/;"	f	signature:(float *a, int n, int k, int *index)
top_predictions	src/network.c	/^void top_predictions(network net, int k, int *index)$/;"	f	signature:(network net, int k, int *index)
total_compares	src/compare.c	/^int total_compares = 0;$/;"	v
tq	src/stb_image.h	/^      int tq;$/;"	m	struct:__anon25::__anon26	access:public
train	include/darknet.h	/^    int train;$/;"	m	struct:network	access:public
train_args	src/network_kernels.cu	/^} train_args;$/;"	t	typeref:struct:__anon18	file:
train_captcha	examples/captcha.c	/^void train_captcha(char *cfgfile, char *weightfile)$/;"	f	signature:(char *cfgfile, char *weightfile)
train_char_rnn	examples/rnn.c	/^void train_char_rnn(char *cfgfile, char *weightfile, char *filename, int clear, int tokenized)$/;"	f	signature:(char *cfgfile, char *weightfile, char *filename, int clear, int tokenized)
train_cifar	examples/cifar.c	/^void train_cifar(char *cfgfile, char *weightfile)$/;"	f	signature:(char *cfgfile, char *weightfile)
train_cifar_distill	examples/cifar.c	/^void train_cifar_distill(char *cfgfile, char *weightfile)$/;"	f	signature:(char *cfgfile, char *weightfile)
train_classifier	examples/classifier.c	/^void train_classifier(char *datacfg, char *cfgfile, char *weightfile, int *gpus, int ngpus, int clear)$/;"	f	signature:(char *datacfg, char *cfgfile, char *weightfile, int *gpus, int ngpus, int clear)
train_coco	examples/coco.c	/^void train_coco(char *cfgfile, char *weightfile)$/;"	f	signature:(char *cfgfile, char *weightfile)
train_colorizer	examples/lsd.c	/^void train_colorizer(char *cfg, char *weight, char *acfg, char *aweight, int clear, int display)$/;"	f	signature:(char *cfg, char *weight, char *acfg, char *aweight, int clear, int display)
train_compare	src/compare.c	/^void train_compare(char *cfgfile, char *weightfile)$/;"	f	signature:(char *cfgfile, char *weightfile)
train_dcgan	examples/lsd.c	/^void train_dcgan(char *cfg, char *weight, char *acfg, char *aweight, int clear, int display, char *train_images)$/;"	f	signature:(char *cfg, char *weight, char *acfg, char *aweight, int clear, int display, char *train_images)
train_detector	examples/detector.c	/^void train_detector(char *datacfg, char *cfgfile, char *weightfile, int *gpus, int ngpus, int clear)$/;"	f	signature:(char *datacfg, char *cfgfile, char *weightfile, int *gpus, int ngpus, int clear)
train_dice	examples/dice.c	/^void train_dice(char *cfgfile, char *weightfile)$/;"	f	signature:(char *cfgfile, char *weightfile)
train_go	examples/go.c	/^void train_go(char *cfgfile, char *weightfile, char *filename, int *gpus, int ngpus, int clear)$/;"	f	signature:(char *cfgfile, char *weightfile, char *filename, int *gpus, int ngpus, int clear)
train_network	src/network.c	/^float train_network(network net, data d)$/;"	f	signature:(network net, data d)
train_network_datum	src/network.c	/^float train_network_datum(network net)$/;"	f	signature:(network net)
train_network_datum_gpu	src/network_kernels.cu	/^float train_network_datum_gpu(network net)$/;"	f	signature:(network net)
train_network_in_thread	src/network_kernels.cu	/^pthread_t train_network_in_thread(network net, data d, float *err)$/;"	f	signature:(network net, data d, float *err)
train_network_sgd	src/network.c	/^float train_network_sgd(network net, data d, int n)$/;"	f	signature:(network net, data d, int n)
train_networks	src/network_kernels.cu	/^float train_networks(network *nets, int n, data d, int interval)$/;"	f	signature:(network *nets, int n, data d, int interval)
train_regressor	examples/regressor.c	/^void train_regressor(char *datacfg, char *cfgfile, char *weightfile, int *gpus, int ngpus, int clear)$/;"	f	signature:(char *datacfg, char *cfgfile, char *weightfile, int *gpus, int ngpus, int clear)
train_segmenter	examples/segmenter.c	/^void train_segmenter(char *datacfg, char *cfgfile, char *weightfile, int *gpus, int ngpus, int clear, int display)$/;"	f	signature:(char *datacfg, char *cfgfile, char *weightfile, int *gpus, int ngpus, int clear, int display)
train_super	examples/super.c	/^void train_super(char *cfgfile, char *weightfile, int clear)$/;"	f	signature:(char *cfgfile, char *weightfile, int clear)
train_swag	examples/swag.c	/^void train_swag(char *cfgfile, char *weightfile)$/;"	f	signature:(char *cfgfile, char *weightfile)
train_tag	examples/tag.c	/^void train_tag(char *cfgfile, char *weightfile, int clear)$/;"	f	signature:(char *cfgfile, char *weightfile, int clear)
train_thread	src/network_kernels.cu	/^void *train_thread(void *ptr)$/;"	f	signature:(void *ptr)
train_vid_rnn	examples/rnn_vid.c	/^void train_vid_rnn(char *cfgfile, char *weightfile)$/;"	f	signature:(char *cfgfile, char *weightfile)
train_voxel	examples/voxel.c	/^void train_voxel(char *cfgfile, char *weightfile)$/;"	f	signature:(char *cfgfile, char *weightfile)
train_writing	examples/writing.c	/^void train_writing(char *cfgfile, char *weightfile)$/;"	f	signature:(char *cfgfile, char *weightfile)
train_yolo	examples/yolo.c	/^void train_yolo(char *cfgfile, char *weightfile)$/;"	f	signature:(char *cfgfile, char *weightfile)
translate_array	src/utils.c	/^void translate_array(float *a, int n, float s)$/;"	f	signature:(float *a, int n, float s)
translate_data_rows	src/data.c	/^void translate_data_rows(data d, float s)$/;"	f	signature:(data d, float s)
translate_image	src/image.c	/^void translate_image(image m, float s)$/;"	f	signature:(image m, float s)
translate_image_channel	src/image.c	/^void translate_image_channel(image im, int c, float v)$/;"	f	signature:(image im, int c, float v)
transparent	src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon35	access:public
transpose_image	src/image.c	/^void transpose_image(image im)$/;"	f	signature:(image im)
transpose_matrix	src/parser.c	/^void transpose_matrix(float *a, int rows, int cols)$/;"	f	signature:(float *a, int rows, int cols)
tree	include/darknet.h	/^} tree;$/;"	t	typeref:struct:__anon5
truth	include/darknet.h	/^    float *truth;$/;"	m	struct:network	access:public
truth	include/darknet.h	/^    int truth;$/;"	m	struct:layer	access:public
truth_gpu	include/darknet.h	/^    float *truth_gpu;$/;"	m	struct:network	access:public
truths	include/darknet.h	/^    int truths;$/;"	m	struct:layer	access:public
truths	include/darknet.h	/^    int truths;$/;"	m	struct:network	access:public
try_classifier	examples/classifier.c	/^void try_classifier(char *datacfg, char *cfgfile, char *weightfile, char *filename, int layer_num)$/;"	f	signature:(char *datacfg, char *cfgfile, char *weightfile, char *filename, int layer_num)
type	include/darknet.h	/^    LAYER_TYPE type;$/;"	m	struct:layer	access:public
type	include/darknet.h	/^    data_type type;$/;"	m	struct:load_args	access:public
type	src/parser.c	/^    char *type;$/;"	m	struct:__anon38	file:	access:public
type	src/stb_image.h	/^   stbi__uint32 type;$/;"	m	struct:__anon30	access:public
type	src/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon33	access:public
uf	include/darknet.h	/^    struct layer *uf;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
ug	include/darknet.h	/^    struct layer *ug;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
uh	include/darknet.h	/^    struct layer *uh;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
ui	include/darknet.h	/^    struct layer *ui;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
uo	include/darknet.h	/^    struct layer *uo;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
update	include/darknet.h	/^    void (*update)    (struct layer, update_args);$/;"	m	struct:layer	access:public
update_args	include/darknet.h	/^} update_args;$/;"	t	typeref:struct:__anon9
update_connected_layer	src/connected_layer.c	/^void update_connected_layer(layer l, update_args a)$/;"	f	signature:(layer l, update_args a)
update_connected_layer_gpu	src/connected_layer.c	/^void update_connected_layer_gpu(layer l, update_args a)$/;"	f	signature:(layer l, update_args a)
update_convolutional_layer	src/convolutional_layer.c	/^void update_convolutional_layer(convolutional_layer l, update_args a)$/;"	f	signature:(convolutional_layer l, update_args a)
update_convolutional_layer_gpu	src/convolutional_kernels.cu	/^void update_convolutional_layer_gpu(layer l, update_args a)$/;"	f	signature:(layer l, update_args a)
update_crnn_layer	src/crnn_layer.c	/^void update_crnn_layer(layer l, update_args a)$/;"	f	signature:(layer l, update_args a)
update_crnn_layer_gpu	src/crnn_layer.c	/^void update_crnn_layer_gpu(layer l, update_args a)$/;"	f	signature:(layer l, update_args a)
update_deconvolutional_layer	src/deconvolutional_layer.c	/^void update_deconvolutional_layer(layer l, update_args a)$/;"	f	signature:(layer l, update_args a)
update_deconvolutional_layer_gpu	src/deconvolutional_kernels.cu	/^void update_deconvolutional_layer_gpu(layer l, update_args a)$/;"	f	signature:(layer l, update_args a)
update_gpu	include/darknet.h	/^    void (*update_gpu)    (struct layer, update_args);$/;"	m	struct:layer	access:public
update_gru_layer	src/gru_layer.c	/^void update_gru_layer(layer l, update_args a)$/;"	f	signature:(layer l, update_args a)
update_gru_layer_gpu	src/gru_layer.c	/^void update_gru_layer_gpu(layer l, update_args a)$/;"	f	signature:(layer l, update_args a)
update_layer	include/darknet.h	/^    struct layer *update_layer;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
update_local_layer	src/local_layer.c	/^void update_local_layer(local_layer l, update_args a)$/;"	f	signature:(local_layer l, update_args a)
update_local_layer_gpu	src/local_layer.c	/^void update_local_layer_gpu(local_layer l, update_args a)$/;"	f	signature:(local_layer l, update_args a)
update_lstm_layer	src/lstm_layer.c	/^void update_lstm_layer(layer l, update_args a)$/;"	f	signature:(layer l, update_args a)
update_lstm_layer_gpu	src/lstm_layer.c	/^void update_lstm_layer_gpu(layer l, update_args a)$/;"	f	signature:(layer l, update_args a)
update_network	src/network.c	/^void update_network(network net)$/;"	f	signature:(network net)
update_network_gpu	src/network_kernels.cu	/^void update_network_gpu(network net)$/;"	f	signature:(network net)
update_rnn_layer	src/rnn_layer.c	/^void update_rnn_layer(layer l, update_args a)$/;"	f	signature:(layer l, update_args a)
update_rnn_layer_gpu	src/rnn_layer.c	/^void update_rnn_layer_gpu(layer l, update_args a)$/;"	f	signature:(layer l, update_args a)
ur	include/darknet.h	/^    struct layer *ur;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
used	src/option_list.h	/^    int used;$/;"	m	struct:__anon37	access:public
uz	include/darknet.h	/^    struct layer *uz;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
v	include/darknet.h	/^    float * v;$/;"	m	struct:layer	access:public
v	src/stb_image.h	/^      int h,v;$/;"	m	struct:__anon25::__anon26	access:public
v_gpu	include/darknet.h	/^    float *v_gpu;$/;"	m	struct:layer	access:public
val	include/darknet.h	/^    void *val;$/;"	m	struct:node	access:public
val	src/option_list.h	/^    char *val;$/;"	m	struct:__anon37	access:public
valid_captcha	examples/captcha.c	/^void valid_captcha(char *cfgfile, char *weightfile, char *filename)$/;"	f	signature:(char *cfgfile, char *weightfile, char *filename)
valid_char_rnn	examples/rnn.c	/^void valid_char_rnn(char *cfgfile, char *weightfile, char *seed)$/;"	f	signature:(char *cfgfile, char *weightfile, char *seed)
valid_go	examples/go.c	/^void valid_go(char *cfgfile, char *weightfile, int multi, char *filename)$/;"	f	signature:(char *cfgfile, char *weightfile, int multi, char *filename)
valid_tactic_rnn	examples/rnn.c	/^void valid_tactic_rnn(char *cfgfile, char *weightfile, char *seed)$/;"	f	signature:(char *cfgfile, char *weightfile, char *seed)
validate_classifier_10	examples/classifier.c	/^void validate_classifier_10(char *datacfg, char *filename, char *weightfile)$/;"	f	signature:(char *datacfg, char *filename, char *weightfile)
validate_classifier_crop	examples/classifier.c	/^void validate_classifier_crop(char *datacfg, char *filename, char *weightfile)$/;"	f	signature:(char *datacfg, char *filename, char *weightfile)
validate_classifier_full	examples/classifier.c	/^void validate_classifier_full(char *datacfg, char *filename, char *weightfile)$/;"	f	signature:(char *datacfg, char *filename, char *weightfile)
validate_classifier_multi	examples/classifier.c	/^void validate_classifier_multi(char *datacfg, char *filename, char *weightfile)$/;"	f	signature:(char *datacfg, char *filename, char *weightfile)
validate_classifier_single	examples/classifier.c	/^void validate_classifier_single(char *datacfg, char *filename, char *weightfile)$/;"	f	signature:(char *datacfg, char *filename, char *weightfile)
validate_coco	examples/coco.c	/^void validate_coco(char *cfgfile, char *weightfile)$/;"	f	signature:(char *cfgfile, char *weightfile)
validate_coco_recall	examples/coco.c	/^void validate_coco_recall(char *cfgfile, char *weightfile)$/;"	f	signature:(char *cfgfile, char *weightfile)
validate_compare	src/compare.c	/^void validate_compare(char *filename, char *weightfile)$/;"	f	signature:(char *filename, char *weightfile)
validate_detector	examples/detector.c	/^void validate_detector(char *datacfg, char *cfgfile, char *weightfile, char *outfile)$/;"	f	signature:(char *datacfg, char *cfgfile, char *weightfile, char *outfile)
validate_detector_flip	examples/detector.c	/^void validate_detector_flip(char *datacfg, char *cfgfile, char *weightfile, char *outfile)$/;"	f	signature:(char *datacfg, char *cfgfile, char *weightfile, char *outfile)
validate_detector_recall	examples/detector.c	/^void validate_detector_recall(char *cfgfile, char *weightfile)$/;"	f	signature:(char *cfgfile, char *weightfile)
validate_dice	examples/dice.c	/^void validate_dice(char *filename, char *weightfile)$/;"	f	signature:(char *filename, char *weightfile)
validate_uint32	src/stb_image.h	/^typedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 : -1];$/;"	t
validate_yolo	examples/yolo.c	/^void validate_yolo(char *cfgfile, char *weightfile)$/;"	f	signature:(char *cfgfile, char *weightfile)
validate_yolo_recall	examples/yolo.c	/^void validate_yolo_recall(char *cfgfile, char *weightfile)$/;"	f	signature:(char *cfgfile, char *weightfile)
vals	include/darknet.h	/^    float **vals;$/;"	m	struct:matrix	access:public
value	src/stb_image.h	/^   stbi__uint16 value[288];$/;"	m	struct:__anon28	access:public
values	src/stb_image.h	/^   stbi_uc  values[256];$/;"	m	struct:__anon24	access:public
variance	include/darknet.h	/^    float * variance;$/;"	m	struct:layer	access:public
variance_array	src/utils.c	/^float variance_array(float *a, int n)$/;"	f	signature:(float *a, int n)
variance_cpu	src/blas.c	/^void variance_cpu(float *x, float *mean, int batch, int filters, int spatial, float *variance)$/;"	f	signature:(float *x, float *mean, int batch, int filters, int spatial, float *variance)
variance_delta	include/darknet.h	/^    float * variance_delta;$/;"	m	struct:layer	access:public
variance_delta_cpu	src/batchnorm_layer.c	/^void  variance_delta_cpu(float *x, float *delta, float *mean, float *variance, int batch, int filters, int spatial, float *variance_delta)$/;"	f	signature:(float *x, float *delta, float *mean, float *variance, int batch, int filters, int spatial, float *variance_delta)
variance_delta_gpu	include/darknet.h	/^    float * variance_delta_gpu;$/;"	m	struct:layer	access:public
variance_delta_kernel	src/blas_kernels.cu	/^__global__ void  variance_delta_kernel(float *x, float *delta, float *mean, float *variance, int batch, int filters, int spatial, float *variance_delta)$/;"	f	signature:(float *x, float *delta, float *mean, float *variance, int batch, int filters, int spatial, float *variance_delta)
variance_gpu	include/darknet.h	/^    float * variance_gpu;$/;"	m	struct:layer	access:public
variance_gpu	src/blas_kernels.cu	/^extern "C" void variance_gpu(float *x, float *mean, int batch, int filters, int spatial, float *variance)$/;"	f	signature:(float *x, float *mean, int batch, int filters, int spatial, float *variance)
variance_kernel	src/blas_kernels.cu	/^__global__ void variance_kernel(float *x, float *mean, int batch, int filters, int spatial, float *variance)$/;"	f	signature:(float *x, float *mean, int batch, int filters, int spatial, float *variance)
vec_char_rnn	examples/rnn.c	/^void vec_char_rnn(char *cfgfile, char *weightfile, char *seed)$/;"	f	signature:(char *cfgfile, char *weightfile, char *seed)
visualize	examples/darknet.c	/^void visualize(char *cfgfile, char *weightfile)$/;"	f	signature:(char *cfgfile, char *weightfile)
visualize_convolutional_layer	src/convolutional_layer.c	/^image *visualize_convolutional_layer(convolutional_layer l, char *window, image *prev_weights)$/;"	f	signature:(convolutional_layer l, char *window, image *prev_weights)
visualize_network	src/network.c	/^void visualize_network(network net)$/;"	f	signature:(network net)
voc_names	examples/yolo.c	/^char *voc_names[] = {"aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"};$/;"	v
vs	src/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon27	access:public
w	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:__anon13	access:public
w	include/darknet.h	/^    float x,y,w,h;$/;"	m	struct:__anon16	access:public
w	include/darknet.h	/^    int h, w, c;$/;"	m	struct:network	access:public
w	include/darknet.h	/^    int h,w,c;$/;"	m	struct:layer	access:public
w	include/darknet.h	/^    int w, h;$/;"	m	struct:__anon14	access:public
w	include/darknet.h	/^    int w;$/;"	m	struct:__anon11	access:public
w	include/darknet.h	/^    int w;$/;"	m	struct:__anon12	access:public
w	include/darknet.h	/^    int w;$/;"	m	struct:load_args	access:public
w	src/parser.c	/^    int w;$/;"	m	struct:size_params	file:	access:public
w	src/stb_image.h	/^   int w,h;$/;"	m	struct:__anon35	access:public
w2	src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon25::__anon26	access:public
w_lores	src/stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion$/;"	m	struct:__anon27	access:public
wd	scripts/voc_label.py	/^wd = getcwd()$/;"	v
weightDesc	include/darknet.h	/^    cudnnFilterDescriptor_t weightDesc;$/;"	m	struct:layer	access:public
weight_change_gpu	include/darknet.h	/^    float * weight_change_gpu;$/;"	m	struct:layer	access:public
weight_updates	include/darknet.h	/^    float * weight_updates;$/;"	m	struct:layer	access:public
weight_updates_gpu	include/darknet.h	/^    float * weight_updates_gpu;$/;"	m	struct:layer	access:public
weighted_delta_cpu	src/blas.c	/^void weighted_delta_cpu(float *a, float *b, float *s, float *da, float *db, float *ds, int n, float *dc)$/;"	f	signature:(float *a, float *b, float *s, float *da, float *db, float *ds, int n, float *dc)
weighted_delta_gpu	src/blas_kernels.cu	/^extern "C" void weighted_delta_gpu(float *a, float *b, float *s, float *da, float *db, float *ds, int num, float *dc)$/;"	f	signature:(float *a, float *b, float *s, float *da, float *db, float *ds, int num, float *dc)
weighted_delta_kernel	src/blas_kernels.cu	/^__global__ void weighted_delta_kernel(int n, float *a, float *b, float *s, float *da, float *db, float *ds, float *dc)$/;"	f	signature:(int n, float *a, float *b, float *s, float *da, float *db, float *ds, float *dc)
weighted_sum_cpu	src/blas.c	/^void weighted_sum_cpu(float *a, float *b, float *s, int n, float *c)$/;"	f	signature:(float *a, float *b, float *s, int n, float *c)
weighted_sum_gpu	src/blas_kernels.cu	/^extern "C" void weighted_sum_gpu(float *a, float *b, float *s, int num, float *c)$/;"	f	signature:(float *a, float *b, float *s, int num, float *c)
weighted_sum_kernel	src/blas_kernels.cu	/^__global__ void weighted_sum_kernel(int n, float *a, float *b, float *s, float *c)$/;"	f	signature:(int n, float *a, float *b, float *s, float *c)
weights	include/darknet.h	/^    float * weights;$/;"	m	struct:layer	access:public
weights_gpu	include/darknet.h	/^    float * weights_gpu;$/;"	m	struct:layer	access:public
wf	include/darknet.h	/^    struct layer *wf;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
wg	include/darknet.h	/^    struct layer *wg;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
wh	include/darknet.h	/^    struct layer *wh;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
what_time_is_it_now	src/utils.c	/^double what_time_is_it_now()$/;"	f
wi	include/darknet.h	/^    struct layer *wi;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
windows	src/image.c	/^int windows = 0;$/;"	v
wo	include/darknet.h	/^    struct layer *wo;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
workspace	include/darknet.h	/^    float *workspace;$/;"	m	struct:network	access:public
workspace_size	include/darknet.h	/^    size_t workspace_size;$/;"	m	struct:layer	access:public
wr	include/darknet.h	/^    struct layer *wr;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
write3	src/stb_image_write.h	/^static void write3(FILE *f, unsigned char a, unsigned char b, unsigned char c)$/;"	f	signature:(FILE *f, unsigned char a, unsigned char b, unsigned char c)
write_all	src/utils.c	/^void write_all(int fd, char *buffer, size_t bytes)$/;"	f	signature:(int fd, char *buffer, size_t bytes)
write_all_fail	src/utils.c	/^int write_all_fail(int fd, char *buffer, size_t bytes)$/;"	f	signature:(int fd, char *buffer, size_t bytes)
write_int	src/utils.c	/^void write_int(int fd, int n)$/;"	f	signature:(int fd, int n)
write_pixels	src/stb_image_write.h	/^static void write_pixels(FILE *f, int rgb_dir, int vdir, int x, int y, int comp, void *data, int write_alpha, int scanline_pad, int expand_mono)$/;"	f	signature:(FILE *f, int rgb_dir, int vdir, int x, int y, int comp, void *data, int write_alpha, int scanline_pad, int expand_mono)
writefv	src/stb_image_write.h	/^static void writefv(FILE *f, const char *fmt, va_list v)$/;"	f	signature:(FILE *f, const char *fmt, va_list v)
wz	include/darknet.h	/^    struct layer *wz;$/;"	m	struct:layer	typeref:struct:layer::layer	access:public
x	examples/rnn.c	/^    float *x;$/;"	m	struct:__anon3	file:	access:public
x	examples/rnn_vid.c	/^    float *x;$/;"	m	struct:__anon2	file:	access:public
x	include/darknet.h	/^    float * x;$/;"	m	struct:layer	access:public
x	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:__anon13	access:public
x	include/darknet.h	/^    float x,y,w,h;$/;"	m	struct:__anon16	access:public
x	src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon25::__anon26	access:public
x_gpu	include/darknet.h	/^    float * x_gpu;$/;"	m	struct:layer	access:public
x_norm	include/darknet.h	/^    float * x_norm;$/;"	m	struct:layer	access:public
x_norm_gpu	include/darknet.h	/^    float * x_norm_gpu;$/;"	m	struct:layer	access:public
xnor	include/darknet.h	/^    int xnor;$/;"	m	struct:layer	access:public
y	examples/rnn.c	/^    float *y;$/;"	m	struct:__anon3	file:	access:public
y	examples/rnn_vid.c	/^    float *y;$/;"	m	struct:__anon2	file:	access:public
y	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:__anon13	access:public
y	include/darknet.h	/^    float x,y,w,h;$/;"	m	struct:__anon16	access:public
y	include/darknet.h	/^    matrix y;$/;"	m	struct:__anon14	access:public
y	src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon25::__anon26	access:public
yoloswag420blazeit360noscope	src/dropout_layer_kernels.cu	/^__global__ void yoloswag420blazeit360noscope(float *input, int size, float *rand, float prob, float scale)$/;"	f	signature:(float *input, int size, float *rand, float prob, float scale)
ypos	src/stb_image.h	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon27	access:public
ystep	src/stb_image.h	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon27	access:public
yuv_to_rgb	src/image.c	/^void yuv_to_rgb(image im)$/;"	f	signature:(image im)
z_cpu	include/darknet.h	/^    float *z_cpu;$/;"	m	struct:layer	access:public
z_distance	src/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon29	access:public
z_expandable	src/stb_image.h	/^   int   z_expandable;$/;"	m	struct:__anon29	access:public
z_gpu	include/darknet.h	/^    float *z_gpu;$/;"	m	struct:layer	access:public
z_length	src/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon29	access:public
zbuffer	src/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon29	access:public
zbuffer_end	src/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon29	access:public
zero_objectness	src/region_layer.c	/^void zero_objectness(layer l)$/;"	f	signature:(layer l)
zout	src/stb_image.h	/^   char *zout;$/;"	m	struct:__anon29	access:public
zout_end	src/stb_image.h	/^   char *zout_end;$/;"	m	struct:__anon29	access:public
zout_start	src/stb_image.h	/^   char *zout_start;$/;"	m	struct:__anon29	access:public
